{
  "api/Box2D.NET.B2AABB.html": {
    "href": "api/Box2D.NET.B2AABB.html",
    "title": "Struct B2AABB | Box2D API",
    "keywords": "Struct B2AABB Namespace Box2D.NET Assembly Box2D.NET.dll Axis-aligned bounding box public struct B2AABB Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2AABB(B2Vec2, B2Vec2) public B2AABB(B2Vec2 lowerBound, B2Vec2 upperBound) Parameters lowerBound B2Vec2 upperBound B2Vec2 Fields lowerBound public B2Vec2 lowerBound Field Value B2Vec2 upperBound public B2Vec2 upperBound Field Value B2Vec2"
  },
  "api/Box2D.NET.B2AABBs.html": {
    "href": "api/Box2D.NET.B2AABBs.html",
    "title": "Class B2AABBs | Box2D API",
    "keywords": "Class B2AABBs Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2AABBs Inheritance object B2AABBs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2AABB_RayCast(B2AABB, B2Vec2, B2Vec2) Ray cast an AABB From Real-time Collision Detection, p179. public static B2CastOutput b2AABB_RayCast(B2AABB a, B2Vec2 p1, B2Vec2 p2) Parameters a B2AABB p1 B2Vec2 p2 B2Vec2 Returns B2CastOutput b2EnlargeAABB(ref B2AABB, B2AABB) Enlarge a to contain b @return true if the AABB grew public static bool b2EnlargeAABB(ref B2AABB a, B2AABB b) Parameters a B2AABB b B2AABB Returns bool b2Perimeter(B2AABB) public static float b2Perimeter(B2AABB a) Parameters a B2AABB Returns float"
  },
  "api/Box2D.NET.B2ArenaAllocator.html": {
    "href": "api/Box2D.NET.B2ArenaAllocator.html",
    "title": "Class B2ArenaAllocator | Box2D API",
    "keywords": "Class B2ArenaAllocator Namespace Box2D.NET Assembly Box2D.NET.dll public class B2ArenaAllocator Inheritance object B2ArenaAllocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors B2ArenaAllocator(int) public B2ArenaAllocator(int capacity) Parameters capacity int Properties Count public int Count { get; } Property Value int Methods AsSpan() public Span<IB2ArenaAllocatable> AsSpan() Returns Span<IB2ArenaAllocatable> GetOrCreateFor<T>() public B2ArenaAllocatorTyped<T> GetOrCreateFor<T>() where T : new() Returns B2ArenaAllocatorTyped<T> Type Parameters T"
  },
  "api/Box2D.NET.B2ArenaAllocatorTyped-1.html": {
    "href": "api/Box2D.NET.B2ArenaAllocatorTyped-1.html",
    "title": "Class B2ArenaAllocatorTyped<T> | Box2D API",
    "keywords": "Class B2ArenaAllocatorTyped<T> Namespace Box2D.NET Assembly Box2D.NET.dll This is a stack-like arena allocator used for fast per step allocations. You must nest allocate/free pairs. The code will Debug.Assert if you try to interleave multiple allocate/free pairs. This allocator uses the heap if space is insufficient. I could remove the need to free entries individually. public class B2ArenaAllocatorTyped<T> : IB2ArenaAllocatable where T : new() Type Parameters T Inheritance object B2ArenaAllocatorTyped<T> Implements IB2ArenaAllocatable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields data public ArraySegment<T> data Field Value ArraySegment<T> entries public B2Array<B2ArenaEntry<T>> entries Field Value B2Array<B2ArenaEntry<T>> Properties allocation public int allocation { get; set; } Property Value int capacity public int capacity { get; set; } Property Value int index public int index { get; set; } Property Value int maxAllocation public int maxAllocation { get; set; } Property Value int Methods Destroy() public void Destroy() Grow() public int Grow() Returns int"
  },
  "api/Box2D.NET.B2ArenaAllocators.html": {
    "href": "api/Box2D.NET.B2ArenaAllocators.html",
    "title": "Class B2ArenaAllocators | Box2D API",
    "keywords": "Class B2ArenaAllocators Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2ArenaAllocators Inheritance object B2ArenaAllocators Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2AllocateArenaItem<T>(B2ArenaAllocator, int, string) public static ArraySegment<T> b2AllocateArenaItem<T>(B2ArenaAllocator allocator, int size, string name) where T : new() Parameters allocator B2ArenaAllocator size int name string Returns ArraySegment<T> Type Parameters T b2CreateArenaAllocator(int) public static B2ArenaAllocator b2CreateArenaAllocator(int capacity) Parameters capacity int Returns B2ArenaAllocator b2CreateArenaAllocator<T>(int) public static B2ArenaAllocatorTyped<T> b2CreateArenaAllocator<T>(int capacity) where T : new() Parameters capacity int Returns B2ArenaAllocatorTyped<T> Type Parameters T b2DestroyArenaAllocator(B2ArenaAllocator) public static void b2DestroyArenaAllocator(B2ArenaAllocator allocator) Parameters allocator B2ArenaAllocator b2FreeArenaItem<T>(B2ArenaAllocator, ArraySegment<T>) public static void b2FreeArenaItem<T>(B2ArenaAllocator allocator, ArraySegment<T> mem) where T : new() Parameters allocator B2ArenaAllocator mem ArraySegment<T> Type Parameters T b2GetArenaAllocation(B2ArenaAllocator) public static int b2GetArenaAllocation(B2ArenaAllocator allocator) Parameters allocator B2ArenaAllocator Returns int b2GetArenaCapacity(B2ArenaAllocator) Grow the arena based on usage public static int b2GetArenaCapacity(B2ArenaAllocator allocator) Parameters allocator B2ArenaAllocator Returns int b2GetMaxArenaAllocation(B2ArenaAllocator) public static int b2GetMaxArenaAllocation(B2ArenaAllocator allocator) Parameters allocator B2ArenaAllocator Returns int b2GrowArena(B2ArenaAllocator) public static void b2GrowArena(B2ArenaAllocator allocator) Parameters allocator B2ArenaAllocator"
  },
  "api/Box2D.NET.B2ArenaEntry-1.html": {
    "href": "api/Box2D.NET.B2ArenaEntry-1.html",
    "title": "Struct B2ArenaEntry<T> | Box2D API",
    "keywords": "Struct B2ArenaEntry<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ArenaEntry<T> Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields data public ArraySegment<T> data Field Value ArraySegment<T> name public string name Field Value string size public int size Field Value int usedMalloc public bool usedMalloc Field Value bool"
  },
  "api/Box2D.NET.B2Array-1.html": {
    "href": "api/Box2D.NET.B2Array-1.html",
    "title": "Struct B2Array<T> | Box2D API",
    "keywords": "Struct B2Array<T> Namespace Box2D.NET Assembly Box2D.NET.dll Array declaration that doesn't need the type T to be defined public struct B2Array<T> Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields capacity public int capacity Field Value int count public int count Field Value int data public T[] data Field Value T[]"
  },
  "api/Box2D.NET.B2Arrays.html": {
    "href": "api/Box2D.NET.B2Arrays.html",
    "title": "Class B2Arrays | Box2D API",
    "keywords": "Class B2Arrays Namespace Box2D.NET Assembly Box2D.NET.dll todo_erin consider code-gen: https://github.com/IbrahimHindawi/haikal public static class B2Arrays Inheritance object B2Arrays Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2Array_Add<T>(ref B2Array<T>) public static ref T b2Array_Add<T>(ref B2Array<T> a) where T : new() Parameters a B2Array<T> Returns T Type Parameters T b2Array_ByteCount<T>(ref B2Array<T>) public static int b2Array_ByteCount<T>(ref B2Array<T> a) Parameters a B2Array<T> Returns int Type Parameters T b2Array_Clear<T>(ref B2Array<T>) public static void b2Array_Clear<T>(ref B2Array<T> a) Parameters a B2Array<T> Type Parameters T b2Array_Create<T>(int) public static B2Array<T> b2Array_Create<T>(int capacity = 0) where T : new() Parameters capacity int Returns B2Array<T> Type Parameters T b2Array_Destroy<T>(ref B2Array<T>) public static void b2Array_Destroy<T>(ref B2Array<T> a) Parameters a B2Array<T> Type Parameters T b2Array_Get<T>(ref B2Array<T>, int) public static ref T b2Array_Get<T>(ref B2Array<T> a, int index) Parameters a B2Array<T> index int Returns T Type Parameters T b2Array_Pop<T>(ref B2Array<T>) public static T b2Array_Pop<T>(ref B2Array<T> a) where T : new() Parameters a B2Array<T> Returns T Type Parameters T b2Array_Push<T>(ref B2Array<T>, T) public static void b2Array_Push<T>(ref B2Array<T> a, T value) where T : new() Parameters a B2Array<T> value T Type Parameters T b2Array_RemoveSwap<T>(ref B2Array<T>, int) public static int b2Array_RemoveSwap<T>(ref B2Array<T> a, int index) where T : new() Parameters a B2Array<T> index int Returns int Type Parameters T b2Array_Reserve<T>(ref B2Array<T>, int) public static void b2Array_Reserve<T>(ref B2Array<T> a, int newCapacity) where T : new() Parameters a B2Array<T> newCapacity int Type Parameters T b2Array_Resize<T>(ref B2Array<T>, int) public static void b2Array_Resize<T>(ref B2Array<T> a, int count) where T : new() Parameters a B2Array<T> count int Type Parameters T b2Array_Set<T>(ref B2Array<T>, int, T) public static void b2Array_Set<T>(ref B2Array<T> a, int index, T value) Parameters a B2Array<T> index int value T Type Parameters T"
  },
  "api/Box2D.NET.B2AtomicInt.html": {
    "href": "api/Box2D.NET.B2AtomicInt.html",
    "title": "Struct B2AtomicInt | Box2D API",
    "keywords": "Struct B2AtomicInt Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2AtomicInt Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields value public volatile int value Field Value int"
  },
  "api/Box2D.NET.B2AtomicU32.html": {
    "href": "api/Box2D.NET.B2AtomicU32.html",
    "title": "Struct B2AtomicU32 | Box2D API",
    "keywords": "Struct B2AtomicU32 Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2AtomicU32 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields value public long value Field Value long"
  },
  "api/Box2D.NET.B2Atomics.html": {
    "href": "api/Box2D.NET.B2Atomics.html",
    "title": "Class B2Atomics | Box2D API",
    "keywords": "Class B2Atomics Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Atomics Inheritance object B2Atomics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2AtomicCompareExchangeInt(ref B2AtomicInt, int, int) public static bool b2AtomicCompareExchangeInt(ref B2AtomicInt a, int expected, int desired) Parameters a B2AtomicInt expected int desired int Returns bool b2AtomicFetchAddInt(ref B2AtomicInt, int) public static int b2AtomicFetchAddInt(ref B2AtomicInt a, int increment) Parameters a B2AtomicInt increment int Returns int b2AtomicLoadInt(ref B2AtomicInt) public static int b2AtomicLoadInt(ref B2AtomicInt a) Parameters a B2AtomicInt Returns int b2AtomicLoadU32(ref B2AtomicU32) public static uint b2AtomicLoadU32(ref B2AtomicU32 a) Parameters a B2AtomicU32 Returns uint b2AtomicStoreInt(ref B2AtomicInt, int) public static void b2AtomicStoreInt(ref B2AtomicInt a, int value) Parameters a B2AtomicInt value int b2AtomicStoreU32(ref B2AtomicU32, uint) public static void b2AtomicStoreU32(ref B2AtomicU32 a, uint value) Parameters a B2AtomicU32 value uint"
  },
  "api/Box2D.NET.B2BitSet.html": {
    "href": "api/Box2D.NET.B2BitSet.html",
    "title": "Struct B2BitSet | Box2D API",
    "keywords": "Struct B2BitSet Namespace Box2D.NET Assembly Box2D.NET.dll Bit set provides fast operations on large arrays of bits. public struct B2BitSet Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bits public ulong[] bits Field Value ulong[] blockCapacity public int blockCapacity Field Value int blockCount public int blockCount Field Value int"
  },
  "api/Box2D.NET.B2BitSets.html": {
    "href": "api/Box2D.NET.B2BitSets.html",
    "title": "Class B2BitSets | Box2D API",
    "keywords": "Class B2BitSets Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2BitSets Inheritance object B2BitSets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2ClearBit(ref B2BitSet, uint) public static void b2ClearBit(ref B2BitSet bitSet, uint bitIndex) Parameters bitSet B2BitSet bitIndex uint b2CreateBitSet(ref B2BitSet, int) fix public static void b2CreateBitSet(ref B2BitSet bitSet, int bitCapacity) Parameters bitSet B2BitSet bitCapacity int b2CreateBitSet(int) public static B2BitSet b2CreateBitSet(int bitCapacity) Parameters bitCapacity int Returns B2BitSet b2DestroyBitSet(ref B2BitSet) public static void b2DestroyBitSet(ref B2BitSet bitSet) Parameters bitSet B2BitSet b2GetBit(ref B2BitSet, int) public static bool b2GetBit(ref B2BitSet bitSet, int bitIndex) Parameters bitSet B2BitSet bitIndex int Returns bool b2GetBitSetBytes(ref B2BitSet) public static int b2GetBitSetBytes(ref B2BitSet bitSet) Parameters bitSet B2BitSet Returns int b2GrowBitSet(ref B2BitSet, int) public static void b2GrowBitSet(ref B2BitSet bitSet, int blockCount) Parameters bitSet B2BitSet blockCount int b2InPlaceUnion(ref B2BitSet, ref B2BitSet) public static void b2InPlaceUnion(ref B2BitSet setA, ref B2BitSet setB) Parameters setA B2BitSet setB B2BitSet b2SetBit(ref B2BitSet, int) public static void b2SetBit(ref B2BitSet bitSet, int bitIndex) Parameters bitSet B2BitSet bitIndex int b2SetBitCountAndClear(ref B2BitSet, int) public static void b2SetBitCountAndClear(ref B2BitSet bitSet, int bitCount) Parameters bitSet B2BitSet bitCount int b2SetBitGrow(ref B2BitSet, int) public static void b2SetBitGrow(ref B2BitSet bitSet, int bitIndex) Parameters bitSet B2BitSet bitIndex int"
  },
  "api/Box2D.NET.B2BoardPhases.html": {
    "href": "api/Box2D.NET.B2BoardPhases.html",
    "title": "Class B2BoardPhases | Box2D API",
    "keywords": "Class B2BoardPhases Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2BoardPhases Inheritance object B2BoardPhases Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods B2_PROXY_ID(int) public static int B2_PROXY_ID(int KEY) Parameters KEY int Returns int B2_PROXY_KEY(int, B2BodyType) public static int B2_PROXY_KEY(int ID, B2BodyType TYPE) Parameters ID int TYPE B2BodyType Returns int B2_PROXY_TYPE(int) public static B2BodyType B2_PROXY_TYPE(int KEY) Parameters KEY int Returns B2BodyType b2BroadPhase_CreateProxy(B2BroadPhase, B2BodyType, B2AABB, ulong, int, bool) public static int b2BroadPhase_CreateProxy(B2BroadPhase bp, B2BodyType proxyType, B2AABB aabb, ulong categoryBits, int shapeIndex, bool forcePairCreation) Parameters bp B2BroadPhase proxyType B2BodyType aabb B2AABB categoryBits ulong shapeIndex int forcePairCreation bool Returns int b2BroadPhase_DestroyProxy(B2BroadPhase, int) public static void b2BroadPhase_DestroyProxy(B2BroadPhase bp, int proxyKey) Parameters bp B2BroadPhase proxyKey int b2BroadPhase_EnlargeProxy(B2BroadPhase, int, B2AABB) public static void b2BroadPhase_EnlargeProxy(B2BroadPhase bp, int proxyKey, B2AABB aabb) Parameters bp B2BroadPhase proxyKey int aabb B2AABB b2BroadPhase_GetShapeIndex(B2BroadPhase, int) public static int b2BroadPhase_GetShapeIndex(B2BroadPhase bp, int proxyKey) Parameters bp B2BroadPhase proxyKey int Returns int b2BroadPhase_MoveProxy(B2BroadPhase, int, B2AABB) public static void b2BroadPhase_MoveProxy(B2BroadPhase bp, int proxyKey, B2AABB aabb) Parameters bp B2BroadPhase proxyKey int aabb B2AABB b2BroadPhase_RebuildTrees(B2BroadPhase) public static void b2BroadPhase_RebuildTrees(B2BroadPhase bp) Parameters bp B2BroadPhase b2BroadPhase_TestOverlap(B2BroadPhase, int, int) public static bool b2BroadPhase_TestOverlap(B2BroadPhase bp, int proxyKeyA, int proxyKeyB) Parameters bp B2BroadPhase proxyKeyA int proxyKeyB int Returns bool b2BufferMove(B2BroadPhase, int) This is what triggers new contact pairs to be created Warning: this must be called in deterministic order public static void b2BufferMove(B2BroadPhase bp, int queryProxy) Parameters bp B2BroadPhase queryProxy int b2CreateBroadPhase(ref B2BroadPhase) static FILE* s_file = NULL; public static void b2CreateBroadPhase(ref B2BroadPhase bp) Parameters bp B2BroadPhase b2DestroyBroadPhase(B2BroadPhase) public static void b2DestroyBroadPhase(B2BroadPhase bp) Parameters bp B2BroadPhase b2FindPairsTask(int, int, uint, object) public static void b2FindPairsTask(int startIndex, int endIndex, uint threadIndex, object context) Parameters startIndex int endIndex int threadIndex uint context object b2PairQueryCallback(int, ulong, ref B2QueryPairContext) This is called from b2DynamicTree::Query when we are gathering pairs. public static bool b2PairQueryCallback(int proxyId, ulong userData, ref B2QueryPairContext context) Parameters proxyId int userData ulong context B2QueryPairContext Returns bool b2UnBufferMove(B2BroadPhase, int) public static void b2UnBufferMove(B2BroadPhase bp, int proxyKey) Parameters bp B2BroadPhase proxyKey int b2UpdateBroadPhasePairs(B2World) public static void b2UpdateBroadPhasePairs(B2World world) Parameters world B2World b2ValidateBroadphase(B2BroadPhase) public static void b2ValidateBroadphase(B2BroadPhase bp) Parameters bp B2BroadPhase b2ValidateNoEnlarged(B2BroadPhase) public static void b2ValidateNoEnlarged(B2BroadPhase bp) Parameters bp B2BroadPhase"
  },
  "api/Box2D.NET.B2Bodies.html": {
    "href": "api/Box2D.NET.B2Bodies.html",
    "title": "Class B2Bodies | Box2D API",
    "keywords": "Class B2Bodies Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Bodies Inheritance object B2Bodies Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields b2_identityBodyState Identity body state, notice the deltaRotation is {1, 0} public static readonly B2BodyState b2_identityBodyState Field Value B2BodyState Methods b2Body_ApplyAngularImpulse(B2BodyId, float, bool) public static void b2Body_ApplyAngularImpulse(B2BodyId bodyId, float impulse, bool wake) Parameters bodyId B2BodyId impulse float wake bool b2Body_ApplyForce(B2BodyId, B2Vec2, B2Vec2, bool) public static void b2Body_ApplyForce(B2BodyId bodyId, B2Vec2 force, B2Vec2 point, bool wake) Parameters bodyId B2BodyId force B2Vec2 point B2Vec2 wake bool b2Body_ApplyForceToCenter(B2BodyId, B2Vec2, bool) public static void b2Body_ApplyForceToCenter(B2BodyId bodyId, B2Vec2 force, bool wake) Parameters bodyId B2BodyId force B2Vec2 wake bool b2Body_ApplyLinearImpulse(B2BodyId, B2Vec2, B2Vec2, bool) public static void b2Body_ApplyLinearImpulse(B2BodyId bodyId, B2Vec2 impulse, B2Vec2 point, bool wake) Parameters bodyId B2BodyId impulse B2Vec2 point B2Vec2 wake bool b2Body_ApplyLinearImpulseToCenter(B2BodyId, B2Vec2, bool) public static void b2Body_ApplyLinearImpulseToCenter(B2BodyId bodyId, B2Vec2 impulse, bool wake) Parameters bodyId B2BodyId impulse B2Vec2 wake bool b2Body_ApplyMassFromShapes(B2BodyId) This update the mass properties to the sum of the mass properties of the shapes. This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass. You may also use this when automatic mass computation has been disabled. You should call this regardless of body type. Note that sensor shapes may have mass. public static void b2Body_ApplyMassFromShapes(B2BodyId bodyId) Parameters bodyId B2BodyId b2Body_ApplyTorque(B2BodyId, float, bool) public static void b2Body_ApplyTorque(B2BodyId bodyId, float torque, bool wake) Parameters bodyId B2BodyId torque float wake bool b2Body_ComputeAABB(B2BodyId) public static B2AABB b2Body_ComputeAABB(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2AABB b2Body_Disable(B2BodyId) Disabling a body requires a lot of detailed bookkeeping, but it is a valuable feature. The most challenging aspect that joints may connect to bodies that are not disabled. public static void b2Body_Disable(B2BodyId bodyId) Parameters bodyId B2BodyId b2Body_Enable(B2BodyId) public static void b2Body_Enable(B2BodyId bodyId) Parameters bodyId B2BodyId b2Body_EnableContactEvents(B2BodyId, bool) public static void b2Body_EnableContactEvents(B2BodyId bodyId, bool flag) Parameters bodyId B2BodyId flag bool b2Body_EnableHitEvents(B2BodyId, bool) public static void b2Body_EnableHitEvents(B2BodyId bodyId, bool flag) Parameters bodyId B2BodyId flag bool b2Body_EnableSleep(B2BodyId, bool) public static void b2Body_EnableSleep(B2BodyId bodyId, bool enableSleep) Parameters bodyId B2BodyId enableSleep bool b2Body_GetAngularDamping(B2BodyId) public static float b2Body_GetAngularDamping(B2BodyId bodyId) Parameters bodyId B2BodyId Returns float b2Body_GetAngularVelocity(B2BodyId) public static float b2Body_GetAngularVelocity(B2BodyId bodyId) Parameters bodyId B2BodyId Returns float b2Body_GetContactCapacity(B2BodyId) public static int b2Body_GetContactCapacity(B2BodyId bodyId) Parameters bodyId B2BodyId Returns int b2Body_GetContactData(B2BodyId, Span<B2ContactData>, int) public static int b2Body_GetContactData(B2BodyId bodyId, Span<B2ContactData> contactData, int capacity) Parameters bodyId B2BodyId contactData Span<B2ContactData> capacity int Returns int b2Body_GetGravityScale(B2BodyId) public static float b2Body_GetGravityScale(B2BodyId bodyId) Parameters bodyId B2BodyId Returns float b2Body_GetJointCount(B2BodyId) public static int b2Body_GetJointCount(B2BodyId bodyId) Parameters bodyId B2BodyId Returns int b2Body_GetJoints(B2BodyId, Span<B2JointId>, int) public static int b2Body_GetJoints(B2BodyId bodyId, Span<B2JointId> jointArray, int capacity) Parameters bodyId B2BodyId jointArray Span<B2JointId> capacity int Returns int b2Body_GetLinearDamping(B2BodyId) public static float b2Body_GetLinearDamping(B2BodyId bodyId) Parameters bodyId B2BodyId Returns float b2Body_GetLinearVelocity(B2BodyId) public static B2Vec2 b2Body_GetLinearVelocity(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2Vec2 b2Body_GetLocalCenterOfMass(B2BodyId) public static B2Vec2 b2Body_GetLocalCenterOfMass(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2Vec2 b2Body_GetLocalPoint(B2BodyId, B2Vec2) public static B2Vec2 b2Body_GetLocalPoint(B2BodyId bodyId, B2Vec2 worldPoint) Parameters bodyId B2BodyId worldPoint B2Vec2 Returns B2Vec2 b2Body_GetLocalPointVelocity(B2BodyId, B2Vec2) public static B2Vec2 b2Body_GetLocalPointVelocity(B2BodyId bodyId, B2Vec2 localPoint) Parameters bodyId B2BodyId localPoint B2Vec2 Returns B2Vec2 b2Body_GetLocalVector(B2BodyId, B2Vec2) public static B2Vec2 b2Body_GetLocalVector(B2BodyId bodyId, B2Vec2 worldVector) Parameters bodyId B2BodyId worldVector B2Vec2 Returns B2Vec2 b2Body_GetMass(B2BodyId) public static float b2Body_GetMass(B2BodyId bodyId) Parameters bodyId B2BodyId Returns float b2Body_GetMassData(B2BodyId) public static B2MassData b2Body_GetMassData(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2MassData b2Body_GetName(B2BodyId) public static string b2Body_GetName(B2BodyId bodyId) Parameters bodyId B2BodyId Returns string b2Body_GetPosition(B2BodyId) public static B2Vec2 b2Body_GetPosition(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2Vec2 b2Body_GetRotation(B2BodyId) public static B2Rot b2Body_GetRotation(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2Rot b2Body_GetRotationalInertia(B2BodyId) public static float b2Body_GetRotationalInertia(B2BodyId bodyId) Parameters bodyId B2BodyId Returns float b2Body_GetShapeCount(B2BodyId) public static int b2Body_GetShapeCount(B2BodyId bodyId) Parameters bodyId B2BodyId Returns int b2Body_GetShapes(B2BodyId, Span<B2ShapeId>, int) public static int b2Body_GetShapes(B2BodyId bodyId, Span<B2ShapeId> shapeArray, int capacity) Parameters bodyId B2BodyId shapeArray Span<B2ShapeId> capacity int Returns int b2Body_GetSleepThreshold(B2BodyId) public static float b2Body_GetSleepThreshold(B2BodyId bodyId) Parameters bodyId B2BodyId Returns float b2Body_GetTransform(B2BodyId) public static B2Transform b2Body_GetTransform(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2Transform b2Body_GetType(B2BodyId) public static B2BodyType b2Body_GetType(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2BodyType b2Body_GetUserData(B2BodyId) public static object b2Body_GetUserData(B2BodyId bodyId) Parameters bodyId B2BodyId Returns object b2Body_GetWorld(B2BodyId) public static B2WorldId b2Body_GetWorld(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2WorldId b2Body_GetWorldCenterOfMass(B2BodyId) public static B2Vec2 b2Body_GetWorldCenterOfMass(B2BodyId bodyId) Parameters bodyId B2BodyId Returns B2Vec2 b2Body_GetWorldPoint(B2BodyId, B2Vec2) public static B2Vec2 b2Body_GetWorldPoint(B2BodyId bodyId, B2Vec2 localPoint) Parameters bodyId B2BodyId localPoint B2Vec2 Returns B2Vec2 b2Body_GetWorldPointVelocity(B2BodyId, B2Vec2) public static B2Vec2 b2Body_GetWorldPointVelocity(B2BodyId bodyId, B2Vec2 worldPoint) Parameters bodyId B2BodyId worldPoint B2Vec2 Returns B2Vec2 b2Body_GetWorldVector(B2BodyId, B2Vec2) public static B2Vec2 b2Body_GetWorldVector(B2BodyId bodyId, B2Vec2 localVector) Parameters bodyId B2BodyId localVector B2Vec2 Returns B2Vec2 b2Body_IsAwake(B2BodyId) public static bool b2Body_IsAwake(B2BodyId bodyId) Parameters bodyId B2BodyId Returns bool b2Body_IsBullet(B2BodyId) public static bool b2Body_IsBullet(B2BodyId bodyId) Parameters bodyId B2BodyId Returns bool b2Body_IsEnabled(B2BodyId) public static bool b2Body_IsEnabled(B2BodyId bodyId) Parameters bodyId B2BodyId Returns bool b2Body_IsFixedRotation(B2BodyId) public static bool b2Body_IsFixedRotation(B2BodyId bodyId) Parameters bodyId B2BodyId Returns bool b2Body_IsSleepEnabled(B2BodyId) public static bool b2Body_IsSleepEnabled(B2BodyId bodyId) Parameters bodyId B2BodyId Returns bool b2Body_SetAngularDamping(B2BodyId, float) public static void b2Body_SetAngularDamping(B2BodyId bodyId, float angularDamping) Parameters bodyId B2BodyId angularDamping float b2Body_SetAngularVelocity(B2BodyId, float) Set the angular velocity of a body in radians per second public static void b2Body_SetAngularVelocity(B2BodyId bodyId, float angularVelocity) Parameters bodyId B2BodyId angularVelocity float b2Body_SetAwake(B2BodyId, bool) public static void b2Body_SetAwake(B2BodyId bodyId, bool awake) Parameters bodyId B2BodyId awake bool b2Body_SetBullet(B2BodyId, bool) public static void b2Body_SetBullet(B2BodyId bodyId, bool flag) Parameters bodyId B2BodyId flag bool b2Body_SetFixedRotation(B2BodyId, bool) public static void b2Body_SetFixedRotation(B2BodyId bodyId, bool flag) Parameters bodyId B2BodyId flag bool b2Body_SetGravityScale(B2BodyId, float) public static void b2Body_SetGravityScale(B2BodyId bodyId, float gravityScale) Parameters bodyId B2BodyId gravityScale float b2Body_SetLinearDamping(B2BodyId, float) public static void b2Body_SetLinearDamping(B2BodyId bodyId, float linearDamping) Parameters bodyId B2BodyId linearDamping float b2Body_SetLinearVelocity(B2BodyId, B2Vec2) public static void b2Body_SetLinearVelocity(B2BodyId bodyId, B2Vec2 linearVelocity) Parameters bodyId B2BodyId linearVelocity B2Vec2 b2Body_SetMassData(B2BodyId, B2MassData) public static void b2Body_SetMassData(B2BodyId bodyId, B2MassData massData) Parameters bodyId B2BodyId massData B2MassData b2Body_SetName(B2BodyId, string) public static void b2Body_SetName(B2BodyId bodyId, string name) Parameters bodyId B2BodyId name string b2Body_SetSleepThreshold(B2BodyId, float) public static void b2Body_SetSleepThreshold(B2BodyId bodyId, float sleepThreshold) Parameters bodyId B2BodyId sleepThreshold float b2Body_SetTargetTransform(B2BodyId, B2Transform, float) Set the velocity to reach the given transform after a given time step. The result will be close but maybe not exact. This is meant for kinematic bodies. The target is not applied if the velocity would be below the sleep threshold. This will automatically wake the body if asleep. public static void b2Body_SetTargetTransform(B2BodyId bodyId, B2Transform target, float timeStep) Parameters bodyId B2BodyId target B2Transform timeStep float b2Body_SetTransform(B2BodyId, B2Vec2, B2Rot) public static void b2Body_SetTransform(B2BodyId bodyId, B2Vec2 position, B2Rot rotation) Parameters bodyId B2BodyId position B2Vec2 rotation B2Rot b2Body_SetType(B2BodyId, B2BodyType) Changing the body type is quite complex mainly due to joints. Considerations: body and joints must be moved to the correct set islands must be updated graph coloring must be correct any body connected to a joint may be disabled joints between static bodies must go into the static set public static void b2Body_SetType(B2BodyId bodyId, B2BodyType type) Parameters bodyId B2BodyId type B2BodyType b2Body_SetUserData(B2BodyId, object) public static void b2Body_SetUserData(B2BodyId bodyId, object userData) Parameters bodyId B2BodyId userData object b2CreateBody(B2WorldId, ref B2BodyDef) public static B2BodyId b2CreateBody(B2WorldId worldId, ref B2BodyDef def) Parameters worldId B2WorldId def B2BodyDef Returns B2BodyId b2CreateIslandForBody(B2World, int, B2Body) public static void b2CreateIslandForBody(B2World world, int setIndex, B2Body body) Parameters world B2World setIndex int body B2Body b2DestroyBody(B2BodyId) public static void b2DestroyBody(B2BodyId bodyId) Parameters bodyId B2BodyId b2DestroyBodyContacts(B2World, B2Body, bool) public static void b2DestroyBodyContacts(B2World world, B2Body body, bool wakeBodies) Parameters world B2World body B2Body wakeBodies bool b2GetBodyFullId(B2World, B2BodyId) Get a validated body from a world using an id. public static B2Body b2GetBodyFullId(B2World world, B2BodyId bodyId) Parameters world B2World bodyId B2BodyId Returns B2Body b2GetBodySim(B2World, B2Body) public static B2BodySim b2GetBodySim(B2World world, B2Body body) Parameters world B2World body B2Body Returns B2BodySim b2GetBodyState(B2World, B2Body) public static B2BodyState b2GetBodyState(B2World world, B2Body body) Parameters world B2World body B2Body Returns B2BodyState b2GetBodyTransform(B2World, int) public static B2Transform b2GetBodyTransform(B2World world, int bodyId) Parameters world B2World bodyId int Returns B2Transform b2GetBodyTransformQuick(B2World, B2Body) public static B2Transform b2GetBodyTransformQuick(B2World world, B2Body body) Parameters world B2World body B2Body Returns B2Transform b2LimitVelocity(B2BodyState, float) public static void b2LimitVelocity(B2BodyState state, float maxLinearSpeed) Parameters state B2BodyState maxLinearSpeed float b2MakeBodyId(B2World, int) Create a b2BodyId from a raw id. public static B2BodyId b2MakeBodyId(B2World world, int bodyId) Parameters world B2World bodyId int Returns B2BodyId b2MakeSweep(B2BodySim) public static B2Sweep b2MakeSweep(B2BodySim bodySim) Parameters bodySim B2BodySim Returns B2Sweep b2RemoveBodyFromIsland(B2World, B2Body) public static void b2RemoveBodyFromIsland(B2World world, B2Body body) Parameters world B2World body B2Body b2ShouldBodiesCollide(B2World, B2Body, B2Body) public static bool b2ShouldBodiesCollide(B2World world, B2Body bodyA, B2Body bodyB) Parameters world B2World bodyA B2Body bodyB B2Body Returns bool b2UpdateBodyMassData(B2World, B2Body) public static void b2UpdateBodyMassData(B2World world, B2Body body) Parameters world B2World body B2Body b2WakeBody(B2World, B2Body) careful calling this because it can invalidate body, state, joint, and contact pointers public static bool b2WakeBody(B2World world, B2Body body) Parameters world B2World body B2Body Returns bool"
  },
  "api/Box2D.NET.B2Body.html": {
    "href": "api/Box2D.NET.B2Body.html",
    "title": "Class B2Body | Box2D API",
    "keywords": "Class B2Body Namespace Box2D.NET Assembly Box2D.NET.dll Body organizational details that are not used in the solver. public class B2Body Inheritance object B2Body Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields bodyMoveIndex this is used to adjust the fellAsleep flag in the body move array public int bodyMoveIndex Field Value int contactCount public int contactCount Field Value int enableSleep public bool enableSleep Field Value bool fixedRotation public bool fixedRotation Field Value bool generation This is monotonically advanced when a body is allocated in this slot Used to check for invalid b2BodyId public ushort generation Field Value ushort headChainId public int headChainId Field Value int headContactKey [31 : contactId | 1 : edgeIndex] public int headContactKey Field Value int headJointKey [31 : jointId | 1 : edgeIndex] public int headJointKey Field Value int headShapeId todo maybe move this to the body sim public int headShapeId Field Value int id public int id Field Value int inertia Rotational inertia about the center of mass. public float inertia Field Value float isMarked public bool isMarked Field Value bool isSpeedCapped public bool isSpeedCapped Field Value bool islandId All enabled dynamic and kinematic bodies are in an island. public int islandId Field Value int islandNext public int islandNext Field Value int islandPrev doubly-linked island list public int islandPrev Field Value int jointCount public int jointCount Field Value int localIndex body sim and state index within set may be B2_NULL_INDEX public int localIndex Field Value int mass public float mass Field Value float name public string name Field Value string setIndex index of solver set stored in b2World may be B2_NULL_INDEX public int setIndex Field Value int shapeCount public int shapeCount Field Value int sleepThreshold public float sleepThreshold Field Value float sleepTime public float sleepTime Field Value float type public B2BodyType type Field Value B2BodyType userData public object userData Field Value object"
  },
  "api/Box2D.NET.B2BodyDef.html": {
    "href": "api/Box2D.NET.B2BodyDef.html",
    "title": "Struct B2BodyDef | Box2D API",
    "keywords": "Struct B2BodyDef Namespace Box2D.NET Assembly Box2D.NET.dll A body definition holds all the data needed to construct a rigid body. You can safely re-use body definitions. Shapes are added to a body after construction. Body definitions are temporary objects used to bundle creation parameters. Must be initialized using b2DefaultBodyDef(). @ingroup body public struct B2BodyDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields allowFastRotation This allows this body to bypass rotational speed limits. Should only be used for circular objects, like wheels. public bool allowFastRotation Field Value bool angularDamping Angular damping is used to reduce the angular velocity. The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large. Angular damping can be use slow down rotating bodies. public float angularDamping Field Value float angularVelocity The initial angular velocity of the body. Radians per second. public float angularVelocity Field Value float enableSleep Set this flag to false if this body should never fall asleep. public bool enableSleep Field Value bool fixedRotation Should this body be prevented from rotating? Useful for characters. public bool fixedRotation Field Value bool gravityScale Scale the gravity applied to this body. Non-dimensional. public float gravityScale Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int isAwake Is this body initially awake or sleeping? public bool isAwake Field Value bool isBullet Treat this body as high speed object that performs continuous collision detection against dynamic and kinematic bodies, but not other bullet bodies. @warning Bullets should be used sparingly. They are not a solution for general dynamic-versus-dynamic continuous collision. They may interfere with joint constraints. public bool isBullet Field Value bool isEnabled Used to disable a body. A disabled body does not move or collide. public bool isEnabled Field Value bool linearDamping Linear damping is used to reduce the linear velocity. The damping parameter can be larger than 1 but the damping effect becomes sensitive to the time step when the damping parameter is large. Generally linear damping is undesirable because it makes objects move slowly as if they are floating. public float linearDamping Field Value float linearVelocity The initial linear velocity of the body's origin. Usually in meters per second. public B2Vec2 linearVelocity Field Value B2Vec2 name Optional body name for debugging. Up to 31 characters (excluding null termination) public string name Field Value string position The initial world position of the body. Bodies should be created with the desired position. @note Creating bodies at the origin and then moving them nearly doubles the cost of body creation, especially if the body is moved after shapes have been added. public B2Vec2 position Field Value B2Vec2 rotation The initial world rotation of the body. Use b2MakeRot() if you have an angle. public B2Rot rotation Field Value B2Rot sleepThreshold Sleep speed threshold, default is 0.05 meters per second public float sleepThreshold Field Value float type The body type: static, kinematic, or dynamic. public B2BodyType type Field Value B2BodyType userData Use this to store application specific body data. public object userData Field Value object"
  },
  "api/Box2D.NET.B2BodyEvents.html": {
    "href": "api/Box2D.NET.B2BodyEvents.html",
    "title": "Struct B2BodyEvents | Box2D API",
    "keywords": "Struct B2BodyEvents Namespace Box2D.NET Assembly Box2D.NET.dll Body events are buffered in the Box2D world and are available as event arrays after the time step is complete. Note: this data becomes invalid if bodies are destroyed public struct B2BodyEvents Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2BodyEvents(B2BodyMoveEvent[], int) public B2BodyEvents(B2BodyMoveEvent[] moveEvents, int moveCount) Parameters moveEvents B2BodyMoveEvent[] moveCount int Fields moveCount Number of move events public int moveCount Field Value int moveEvents Array of move events public B2BodyMoveEvent[] moveEvents Field Value B2BodyMoveEvent[]"
  },
  "api/Box2D.NET.B2BodyId.html": {
    "href": "api/Box2D.NET.B2BodyId.html",
    "title": "Struct B2BodyId | Box2D API",
    "keywords": "Struct B2BodyId Namespace Box2D.NET Assembly Box2D.NET.dll Body id references a body instance. This should be treated as an opaque handle. public readonly struct B2BodyId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2BodyId(int, ushort, ushort) public B2BodyId(int index1, ushort world0, ushort generation) Parameters index1 int world0 ushort generation ushort Fields generation public readonly ushort generation Field Value ushort index1 public readonly int index1 Field Value int world0 public readonly ushort world0 Field Value ushort Operators operator ==(B2BodyId, B2BodyId) public static bool operator ==(B2BodyId a, B2BodyId b) Parameters a B2BodyId b B2BodyId Returns bool operator >(B2BodyId, B2BodyId) public static bool operator >(B2BodyId a, B2BodyId b) Parameters a B2BodyId b B2BodyId Returns bool operator !=(B2BodyId, B2BodyId) public static bool operator !=(B2BodyId a, B2BodyId b) Parameters a B2BodyId b B2BodyId Returns bool operator <(B2BodyId, B2BodyId) public static bool operator <(B2BodyId a, B2BodyId b) Parameters a B2BodyId b B2BodyId Returns bool"
  },
  "api/Box2D.NET.B2BodyMoveEvent.html": {
    "href": "api/Box2D.NET.B2BodyMoveEvent.html",
    "title": "Struct B2BodyMoveEvent | Box2D API",
    "keywords": "Struct B2BodyMoveEvent Namespace Box2D.NET Assembly Box2D.NET.dll Body move events triggered when a body moves. Triggered when a body moves due to simulation. Not reported for bodies moved by the user. This also has a flag to indicate that the body went to sleep so the application can also sleep that actor/entity/object associated with the body. On the other hand if the flag does not indicate the body went to sleep then the application can treat the actor/entity/object associated with the body as awake. This is an efficient way for an application to update game object transforms rather than calling functions such as b2Body_GetTransform() because this data is delivered as a contiguous array and it is only populated with bodies that have moved. @note If sleeping is disabled all dynamic and kinematic bodies will trigger move events. public struct B2BodyMoveEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyId public B2BodyId bodyId Field Value B2BodyId fellAsleep public bool fellAsleep Field Value bool transform public B2Transform transform Field Value B2Transform userData public object userData Field Value object"
  },
  "api/Box2D.NET.B2BodySim.html": {
    "href": "api/Box2D.NET.B2BodySim.html",
    "title": "Class B2BodySim | Box2D API",
    "keywords": "Class B2BodySim Namespace Box2D.NET Assembly Box2D.NET.dll Body simulation data used for integration of position and velocity Transform data used for collision and solver preparation. public class B2BodySim Inheritance object B2BodySim Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields allowFastRotation public bool allowFastRotation Field Value bool angularDamping public float angularDamping Field Value float bodyId body data can be moved around, the id is stable (used in b2BodyId) public int bodyId Field Value int center center of mass position in world space public B2Vec2 center Field Value B2Vec2 center0 public B2Vec2 center0 Field Value B2Vec2 enlargeAABB public bool enlargeAABB Field Value bool force public B2Vec2 force Field Value B2Vec2 gravityScale public float gravityScale Field Value float invInertia public float invInertia Field Value float invMass inverse inertia public float invMass Field Value float isBullet public bool isBullet Field Value bool isFast This flag is used for debug draw public bool isFast Field Value bool isSpeedCapped public bool isSpeedCapped Field Value bool linearDamping public float linearDamping Field Value float localCenter location of center of mass relative to the body origin public B2Vec2 localCenter Field Value B2Vec2 maxExtent public float maxExtent Field Value float minExtent public float minExtent Field Value float rotation0 previous rotation and COM for TOI public B2Rot rotation0 Field Value B2Rot torque public float torque Field Value float transform todo better to have transform in sim or in @base body? Try both! transform for body origin public B2Transform transform Field Value B2Transform Methods Clear() public void Clear() CopyFrom(B2BodySim) public void CopyFrom(B2BodySim other) Parameters other B2BodySim"
  },
  "api/Box2D.NET.B2BodyState.html": {
    "href": "api/Box2D.NET.B2BodyState.html",
    "title": "Class B2BodyState | Box2D API",
    "keywords": "Class B2BodyState Namespace Box2D.NET Assembly Box2D.NET.dll 32 bytes public class B2BodyState Inheritance object B2BodyState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields angularVelocity public float angularVelocity Field Value float deltaPosition Using delta position reduces round-off error far from the origin public B2Vec2 deltaPosition Field Value B2Vec2 deltaRotation Using delta rotation because I cannot access the full rotation on static bodies in the solver and must use zero delta rotation for static bodies (c,s) = (1,0) public B2Rot deltaRotation Field Value B2Rot flags public int flags Field Value int linearVelocity public B2Vec2 linearVelocity Field Value B2Vec2 Methods Clear() public void Clear() CopyFrom(B2BodyState) public void CopyFrom(B2BodyState other) Parameters other B2BodyState Create(B2BodyState) public static B2BodyState Create(B2BodyState other) Parameters other B2BodyState Returns B2BodyState"
  },
  "api/Box2D.NET.B2BodyStateW.html": {
    "href": "api/Box2D.NET.B2BodyStateW.html",
    "title": "Struct B2BodyStateW | Box2D API",
    "keywords": "Struct B2BodyStateW Namespace Box2D.NET Assembly Box2D.NET.dll wide version of b2BodyState public struct B2BodyStateW Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields dp public B2Vec2W dp Field Value B2Vec2W dq public B2RotW dq Field Value B2RotW flags public B2FloatW flags Field Value B2FloatW v public B2Vec2W v Field Value B2Vec2W w public B2FloatW w Field Value B2FloatW"
  },
  "api/Box2D.NET.B2BodyType.html": {
    "href": "api/Box2D.NET.B2BodyType.html",
    "title": "Enum B2BodyType | Box2D API",
    "keywords": "Enum B2BodyType Namespace Box2D.NET Assembly Box2D.NET.dll The body simulation type. Each body is one of these three types. The type determines how the body behaves in the simulation. @ingroup body public enum B2BodyType Fields b2_bodyTypeCount = 3 b2_dynamicBody = 2 b2_kinematicBody = 1 b2_staticBody = 0"
  },
  "api/Box2D.NET.B2BroadPhase.html": {
    "href": "api/Box2D.NET.B2BroadPhase.html",
    "title": "Class B2BroadPhase | Box2D API",
    "keywords": "Class B2BroadPhase Namespace Box2D.NET Assembly Box2D.NET.dll The broad-phase is used for computing pairs and performing volume queries and ray casts. This broad-phase does not persist pairs. Instead, this reports potentially new pairs. It is up to the client to consume the new pairs and to track subsequent overlap. public class B2BroadPhase Inheritance object B2BroadPhase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields moveArray public B2Array<int> moveArray Field Value B2Array<int> movePairCapacity public int movePairCapacity Field Value int movePairIndex public B2AtomicInt movePairIndex Field Value B2AtomicInt movePairs public ArraySegment<B2MovePair> movePairs Field Value ArraySegment<B2MovePair> moveResults These are the results from the pair query and are used to create new contacts in deterministic order. todo these could be in the step context public ArraySegment<B2MoveResult> moveResults Field Value ArraySegment<B2MoveResult> moveSet The move set and array are used to track shapes that have moved significantly and need a pair query for new contacts. The array has a deterministic order. todo perhaps just a move set? todo implement a 32bit hash set for faster lookup todo moveSet can grow quite large on the first time step and remain large public B2HashSet moveSet Field Value B2HashSet pairSet Tracks shape pairs that have a b2Contact todo pairSet can grow quite large on the first time step and remain large public B2HashSet pairSet Field Value B2HashSet trees public B2DynamicTree[] trees Field Value B2DynamicTree[] Methods Clear() public void Clear()"
  },
  "api/Box2D.NET.B2Buffers.html": {
    "href": "api/Box2D.NET.B2Buffers.html",
    "title": "Class B2Buffers | Box2D API",
    "keywords": "Class B2Buffers Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Buffers Inheritance object B2Buffers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2Alloc<T>(int) public static T[] b2Alloc<T>(int size) where T : new() Parameters size int Returns T[] Type Parameters T b2Free<T>(T, int) public static void b2Free<T>(T mem, int size) Parameters mem T size int Type Parameters T b2Free<T>(T[], int) public static void b2Free<T>(T[] mem, int size) Parameters mem T[] size int Type Parameters T b2GetByteCount() @return the total bytes allocated by Box2D public static int b2GetByteCount() Returns int b2GrowAlloc<T>(T[], int, int) public static T[] b2GrowAlloc<T>(T[] oldMem, int oldSize, int newSize) where T : new() Parameters oldMem T[] oldSize int newSize int Returns T[] Type Parameters T b2SetAllocator(b2AllocFcn, b2FreeFcn) This allows the user to override the allocation functions. These should be set during application startup. public static void b2SetAllocator(b2AllocFcn allocFcn, b2FreeFcn freeFcn) Parameters allocFcn b2AllocFcn freeFcn b2FreeFcn"
  },
  "api/Box2D.NET.B2CTZs.html": {
    "href": "api/Box2D.NET.B2CTZs.html",
    "title": "Class B2CTZs | Box2D API",
    "keywords": "Class B2CTZs Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2CTZs Inheritance object B2CTZs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2BoundingPowerOf2(int) public static int b2BoundingPowerOf2(int x) Parameters x int Returns int b2CLZ32(uint) public static uint b2CLZ32(uint value) Parameters value uint Returns uint b2CTZ32(uint) public static uint b2CTZ32(uint block) Parameters block uint Returns uint b2CTZ64(ulong) public static uint b2CTZ64(ulong block) Parameters block ulong Returns uint b2IsPowerOf2(int) public static bool b2IsPowerOf2(int x) Parameters x int Returns bool b2RoundUpPowerOf2(int) public static int b2RoundUpPowerOf2(int x) Parameters x int Returns int"
  },
  "api/Box2D.NET.B2Capsule.html": {
    "href": "api/Box2D.NET.B2Capsule.html",
    "title": "Struct B2Capsule | Box2D API",
    "keywords": "Struct B2Capsule Namespace Box2D.NET Assembly Box2D.NET.dll A solid capsule can be viewed as two semicircles connected by a rectangle. public struct B2Capsule Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Capsule(B2Vec2, B2Vec2, float) public B2Capsule(B2Vec2 center1, B2Vec2 center2, float radius) Parameters center1 B2Vec2 center2 B2Vec2 radius float Fields center1 Local center of the first semicircle public B2Vec2 center1 Field Value B2Vec2 center2 Local center of the second semicircle public B2Vec2 center2 Field Value B2Vec2 radius The radius of the semicircles public float radius Field Value float"
  },
  "api/Box2D.NET.B2CastOutput.html": {
    "href": "api/Box2D.NET.B2CastOutput.html",
    "title": "Struct B2CastOutput | Box2D API",
    "keywords": "Struct B2CastOutput Namespace Box2D.NET Assembly Box2D.NET.dll Low level ray cast or shape-cast output data. Returns a zero fraction and normal in the case of initial overlap. public struct B2CastOutput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fraction The fraction of the input translation at collision public float fraction Field Value float hit Did the cast hit? public bool hit Field Value bool iterations The number of iterations used public int iterations Field Value int normal The surface normal at the hit point public B2Vec2 normal Field Value B2Vec2 point The surface hit point public B2Vec2 point Field Value B2Vec2"
  },
  "api/Box2D.NET.B2ChainDef.html": {
    "href": "api/Box2D.NET.B2ChainDef.html",
    "title": "Struct B2ChainDef | Box2D API",
    "keywords": "Struct B2ChainDef Namespace Box2D.NET Assembly Box2D.NET.dll Used to create a chain of line segments. This is designed to eliminate ghost collisions with some limitations. chains are one-sided chains have no mass and should be used on static bodies chains have a counter-clockwise winding order (normal points right of segment direction) chains are either a loop or open a chain must have at least 4 points the distance between any two points must be greater than B2_LINEAR_SLOP a chain shape should not self intersect (this is not validated) an open chain shape has NO COLLISION on the first and final edge you may overlap two open chains on their first three and/or last three points to get smooth collision a chain shape creates multiple line segment shapes on the body https://en.wikipedia.org/wiki/Polygonal_chain Must be initialized using b2DefaultChainDef(). @warning Do not use chain shapes unless you understand the limitations. This is an advanced feature. @ingroup shape public struct B2ChainDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields count The point count, must be 4 or more. public int count Field Value int enableSensorEvents Enable sensors to detect this chain. False by default. public bool enableSensorEvents Field Value bool filter Contact filtering data. public B2Filter filter Field Value B2Filter internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int isLoop Indicates a closed chain formed by connecting the first and last points public bool isLoop Field Value bool materialCount The material count. Must be 1 or count. This allows you to provide one material for all segments or a unique material per segment. public int materialCount Field Value int materials Surface materials for each segment. These are cloned. public B2SurfaceMaterial[] materials Field Value B2SurfaceMaterial[] points An array of at least 4 points. These are cloned and may be temporary. public B2Vec2[] points Field Value B2Vec2[] userData Use this to store application specific shape data. public object userData Field Value object"
  },
  "api/Box2D.NET.B2ChainId.html": {
    "href": "api/Box2D.NET.B2ChainId.html",
    "title": "Struct B2ChainId | Box2D API",
    "keywords": "Struct B2ChainId Namespace Box2D.NET Assembly Box2D.NET.dll Chain id references a chain instances. This should be treated as an opaque handle. public readonly struct B2ChainId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2ChainId(int, ushort, ushort) public B2ChainId(int index1, ushort world0, ushort generation) Parameters index1 int world0 ushort generation ushort Fields generation public readonly ushort generation Field Value ushort index1 public readonly int index1 Field Value int world0 public readonly ushort world0 Field Value ushort"
  },
  "api/Box2D.NET.B2ChainSegment.html": {
    "href": "api/Box2D.NET.B2ChainSegment.html",
    "title": "Struct B2ChainSegment | Box2D API",
    "keywords": "Struct B2ChainSegment Namespace Box2D.NET Assembly Box2D.NET.dll A line segment with one-sided collision. Only collides on the right side. Several of these are generated for a chain shape. ghost1 -> point1 -> point2 -> ghost2 public struct B2ChainSegment Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields chainId The owning chain shape index (internal usage only) public int chainId Field Value int ghost1 The tail ghost vertex public B2Vec2 ghost1 Field Value B2Vec2 ghost2 The head ghost vertex public B2Vec2 ghost2 Field Value B2Vec2 segment The line segment public B2Segment segment Field Value B2Segment"
  },
  "api/Box2D.NET.B2ChainSegmentParams.html": {
    "href": "api/Box2D.NET.B2ChainSegmentParams.html",
    "title": "Struct B2ChainSegmentParams | Box2D API",
    "keywords": "Struct B2ChainSegmentParams Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ChainSegmentParams Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields convex1 public bool convex1 Field Value bool convex2 public bool convex2 Field Value bool edge1 public B2Vec2 edge1 Field Value B2Vec2 normal0 public B2Vec2 normal0 Field Value B2Vec2 normal2 public B2Vec2 normal2 Field Value B2Vec2"
  },
  "api/Box2D.NET.B2ChainShape.html": {
    "href": "api/Box2D.NET.B2ChainShape.html",
    "title": "Class B2ChainShape | Box2D API",
    "keywords": "Class B2ChainShape Namespace Box2D.NET Assembly Box2D.NET.dll public class B2ChainShape Inheritance object B2ChainShape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields bodyId public int bodyId Field Value int count public int count Field Value int generation public ushort generation Field Value ushort id public int id Field Value int materialCount public int materialCount Field Value int materials public B2SurfaceMaterial[] materials Field Value B2SurfaceMaterial[] nextChainId public int nextChainId Field Value int shapeIndices public int[] shapeIndices Field Value int[]"
  },
  "api/Box2D.NET.B2Circle.html": {
    "href": "api/Box2D.NET.B2Circle.html",
    "title": "Struct B2Circle | Box2D API",
    "keywords": "Struct B2Circle Namespace Box2D.NET Assembly Box2D.NET.dll A solid circle public struct B2Circle Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Circle(B2Vec2, float) public B2Circle(B2Vec2 center, float radius) Parameters center B2Vec2 radius float Fields center The local center public B2Vec2 center Field Value B2Vec2 radius The radius public float radius Field Value float"
  },
  "api/Box2D.NET.B2CollisionPlane.html": {
    "href": "api/Box2D.NET.B2CollisionPlane.html",
    "title": "Struct B2CollisionPlane | Box2D API",
    "keywords": "Struct B2CollisionPlane Namespace Box2D.NET Assembly Box2D.NET.dll These are collision planes that can be fed to b2SolvePlanes. Normally this is assembled by the user from plane results in b2PlaneResult public struct B2CollisionPlane Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2CollisionPlane(B2Plane, float, float, bool) public B2CollisionPlane(B2Plane plane, float pushLimit, float push, bool clipVelocity) Parameters plane B2Plane pushLimit float push float clipVelocity bool Fields clipVelocity Indicates if b2ClipVector should clip against this plane. Should be false for soft collision. public bool clipVelocity Field Value bool plane The collision plane between the mover and some shape public B2Plane plane Field Value B2Plane push The push on the mover determined by b2SolvePlanes. Usually in meters. public float push Field Value float pushLimit Setting this to FLT_MAX makes the plane as rigid as possible. Lower values can make the plane collision soft. Usually in meters. public float pushLimit Field Value float"
  },
  "api/Box2D.NET.B2Collisions.html": {
    "href": "api/Box2D.NET.B2Collisions.html",
    "title": "Class B2Collisions | Box2D API",
    "keywords": "Class B2Collisions Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Collisions Inheritance object B2Collisions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields b2_emptySimplexCache TODO: @ikpil, check empty or class public static readonly B2SimplexCache b2_emptySimplexCache Field Value B2SimplexCache"
  },
  "api/Box2D.NET.B2Constants.html": {
    "href": "api/Box2D.NET.B2Constants.html",
    "title": "Class B2Constants | Box2D API",
    "keywords": "Class B2Constants Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Constants Inheritance object B2Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields B2_ALIGNMENT Use 32 byte alignment for everything. Works with 256bit SIMD. public const int B2_ALIGNMENT = 32 Field Value int B2_DEFAULT_CATEGORY_BITS types public const ulong B2_DEFAULT_CATEGORY_BITS = 1 Field Value ulong B2_DEFAULT_MASK_BITS public const ulong B2_DEFAULT_MASK_BITS = 18446744073709551615 Field Value ulong B2_GRAPH_COLOR_COUNT Maximum number of colors in the constraint graph. Constraints that cannot find a color are added to the overflow set which are solved single-threaded. public const int B2_GRAPH_COLOR_COUNT = 12 Field Value int B2_HASH_INIT @base Simple djb2 hash function for determinism testing public const int B2_HASH_INIT = 5381 Field Value int B2_MAX_POLYGON_VERTICES collision The maximum number of vertices on a convex polygon. Changing this affects performance even if you don't use more vertices. public const int B2_MAX_POLYGON_VERTICES = 8 Field Value int B2_MAX_ROTATION The maximum rotation of a body per time step. This limit is very large and is used to prevent numerical problems. You shouldn't need to adjust this. @warning increasing this to 0.5f * b2_pi or greater will break continuous collision. public static readonly float B2_MAX_ROTATION Field Value float B2_MAX_WORKERS Maximum parallel workers. Used to size some static arrays. public const int B2_MAX_WORKERS = 64 Field Value int B2_MAX_WORLDS Maximum number of simultaneous worlds that can be allocated public const int B2_MAX_WORLDS = 128 Field Value int B2_NULL_INDEX core public const int B2_NULL_INDEX = -1 Field Value int B2_SECRET_COOKIE Use to validate definitions. Do not take my cookie. public const int B2_SECRET_COOKIE = 1152023 Field Value int B2_SPECULATIVE_DISTANCE Box2D uses limited speculative collision. This reduces jitter. Normally this is 2cm. @warning modifying this can have a significant impact on performance and stability public static readonly float B2_SPECULATIVE_DISTANCE Field Value float B2_TIME_TO_SLEEP The time that a body must be still before it will go to sleep. In seconds. public const float B2_TIME_TO_SLEEP = 0.5 Field Value float Properties B2_AABB_MARGIN This is used to fatten AABBs in the dynamic tree. This allows proxies to move by a small amount without triggering a tree adjustment. This is in meters. Normally this is 5cm. @warning modifying this can have a significant impact on performance public static float B2_AABB_MARGIN { get; } Property Value float B2_HUGE Used to detect bad values. Positions greater than about 16km will have precision problems, so 100km as a limit should be fine in all cases. public static float B2_HUGE { get; } Property Value float B2_LINEAR_SLOP A small length used as a collision and constraint tolerance. Usually it is chosen to be numerically significant, but visually insignificant. In meters. Normally this is 0.5cm. @warning modifying this can have a significant impact on stability public static float B2_LINEAR_SLOP { get; } Property Value float"
  },
  "api/Box2D.NET.B2ConstraintGraph.html": {
    "href": "api/Box2D.NET.B2ConstraintGraph.html",
    "title": "Struct B2ConstraintGraph | Box2D API",
    "keywords": "Struct B2ConstraintGraph Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ConstraintGraph Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields colors including overflow at the end public B2GraphColor[] colors Field Value B2GraphColor[]"
  },
  "api/Box2D.NET.B2ConstraintGraphs.html": {
    "href": "api/Box2D.NET.B2ConstraintGraphs.html",
    "title": "Class B2ConstraintGraphs | Box2D API",
    "keywords": "Class B2ConstraintGraphs Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2ConstraintGraphs Inheritance object B2ConstraintGraphs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields B2_OVERFLOW_INDEX This holds constraints that cannot fit the graph color limit. This happens when a single dynamic body is touching many other bodies. public const int B2_OVERFLOW_INDEX = 11 Field Value int Methods b2AddContactToGraph(B2World, B2ContactSim, B2Contact) Contacts are always created as non-touching. They get cloned into the constraint graph once they are found to be touching. todo maybe kinematic bodies should not go into graph public static void b2AddContactToGraph(B2World world, B2ContactSim contactSim, B2Contact contact) Parameters world B2World contactSim B2ContactSim contact B2Contact b2AddJointToGraph(B2World, B2JointSim, B2Joint) public static void b2AddJointToGraph(B2World world, B2JointSim jointSim, B2Joint joint) Parameters world B2World jointSim B2JointSim joint B2Joint b2AssignJointColor(ref B2ConstraintGraph, int, int, bool, bool) public static int b2AssignJointColor(ref B2ConstraintGraph graph, int bodyIdA, int bodyIdB, bool staticA, bool staticB) Parameters graph B2ConstraintGraph bodyIdA int bodyIdB int staticA bool staticB bool Returns int b2CreateGraph(ref B2ConstraintGraph, int) public static void b2CreateGraph(ref B2ConstraintGraph graph, int bodyCapacity) Parameters graph B2ConstraintGraph bodyCapacity int b2CreateJointInGraph(B2World, B2Joint) public static ref B2JointSim b2CreateJointInGraph(B2World world, B2Joint joint) Parameters world B2World joint B2Joint Returns B2JointSim b2DestroyGraph(ref B2ConstraintGraph) public static void b2DestroyGraph(ref B2ConstraintGraph graph) Parameters graph B2ConstraintGraph b2RemoveContactFromGraph(B2World, int, int, int, int) public static void b2RemoveContactFromGraph(B2World world, int bodyIdA, int bodyIdB, int colorIndex, int localIndex) Parameters world B2World bodyIdA int bodyIdB int colorIndex int localIndex int b2RemoveJointFromGraph(B2World, int, int, int, int) public static void b2RemoveJointFromGraph(B2World world, int bodyIdA, int bodyIdB, int colorIndex, int localIndex) Parameters world B2World bodyIdA int bodyIdB int colorIndex int localIndex int"
  },
  "api/Box2D.NET.B2Contact.html": {
    "href": "api/Box2D.NET.B2Contact.html",
    "title": "Class B2Contact | Box2D API",
    "keywords": "Class B2Contact Namespace Box2D.NET Assembly Box2D.NET.dll Cold contact data. Used as a persistent handle and for persistent island connectivity. public class B2Contact Inheritance object B2Contact Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields colorIndex index into the constraint graph color array B2_NULL_INDEX for non-touching or sleeping contacts B2_NULL_INDEX when slot is free public int colorIndex Field Value int contactId public int contactId Field Value int edges public B2FixedArray2<B2ContactEdge> edges Field Value B2FixedArray2<B2ContactEdge> flags b2ContactFlags public uint flags Field Value uint isMarked public bool isMarked Field Value bool islandId public int islandId Field Value int islandNext public int islandNext Field Value int islandPrev A contact only belongs to an island if touching, otherwise B2_NULL_INDEX. public int islandPrev Field Value int localIndex contact index within set or graph color B2_NULL_INDEX when slot is free public int localIndex Field Value int setIndex index of simulation set stored in b2World B2_NULL_INDEX when slot is free public int setIndex Field Value int shapeIdA public int shapeIdA Field Value int shapeIdB public int shapeIdB Field Value int"
  },
  "api/Box2D.NET.B2ContactBeginTouchEvent.html": {
    "href": "api/Box2D.NET.B2ContactBeginTouchEvent.html",
    "title": "Struct B2ContactBeginTouchEvent | Box2D API",
    "keywords": "Struct B2ContactBeginTouchEvent Namespace Box2D.NET Assembly Box2D.NET.dll A begin touch event is generated when two shapes begin touching. public struct B2ContactBeginTouchEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2ContactBeginTouchEvent(B2ShapeId, B2ShapeId, ref B2Manifold) public B2ContactBeginTouchEvent(B2ShapeId shapeIdA, B2ShapeId shapeIdB, ref B2Manifold manifold) Parameters shapeIdA B2ShapeId shapeIdB B2ShapeId manifold B2Manifold Fields manifold The initial contact manifold. This is recorded before the solver is called, so all the impulses will be zero. public B2Manifold manifold Field Value B2Manifold shapeIdA Id of the first shape public B2ShapeId shapeIdA Field Value B2ShapeId shapeIdB Id of the second shape public B2ShapeId shapeIdB Field Value B2ShapeId"
  },
  "api/Box2D.NET.B2ContactConstraint.html": {
    "href": "api/Box2D.NET.B2ContactConstraint.html",
    "title": "Struct B2ContactConstraint | Box2D API",
    "keywords": "Struct B2ContactConstraint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ContactConstraint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields friction public float friction Field Value float indexA public int indexA Field Value int indexB public int indexB Field Value int invIA public float invIA Field Value float invIB public float invIB Field Value float invMassA public float invMassA Field Value float invMassB public float invMassB Field Value float normal public B2Vec2 normal Field Value B2Vec2 pointCount public int pointCount Field Value int points public B2FixedArray2<B2ContactConstraintPoint> points Field Value B2FixedArray2<B2ContactConstraintPoint> restitution public float restitution Field Value float rollingImpulse public float rollingImpulse Field Value float rollingMass public float rollingMass Field Value float rollingResistance public float rollingResistance Field Value float softness public B2Softness softness Field Value B2Softness tangentSpeed public float tangentSpeed Field Value float"
  },
  "api/Box2D.NET.B2ContactConstraintPoint.html": {
    "href": "api/Box2D.NET.B2ContactConstraintPoint.html",
    "title": "Struct B2ContactConstraintPoint | Box2D API",
    "keywords": "Struct B2ContactConstraintPoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ContactConstraintPoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA public B2Vec2 anchorA Field Value B2Vec2 anchorB public B2Vec2 anchorB Field Value B2Vec2 baseSeparation public float baseSeparation Field Value float normalImpulse public float normalImpulse Field Value float normalMass public float normalMass Field Value float relativeVelocity public float relativeVelocity Field Value float tangentImpulse public float tangentImpulse Field Value float tangentMass public float tangentMass Field Value float totalNormalImpulse public float totalNormalImpulse Field Value float"
  },
  "api/Box2D.NET.B2ContactConstraintSIMD.html": {
    "href": "api/Box2D.NET.B2ContactConstraintSIMD.html",
    "title": "Struct B2ContactConstraintSIMD | Box2D API",
    "keywords": "Struct B2ContactConstraintSIMD Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ContactConstraintSIMD Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA1 public B2Vec2W anchorA1 Field Value B2Vec2W anchorA2 public B2Vec2W anchorA2 Field Value B2Vec2W anchorB1 public B2Vec2W anchorB1 Field Value B2Vec2W anchorB2 public B2Vec2W anchorB2 Field Value B2Vec2W baseSeparation1 public B2FloatW baseSeparation1 Field Value B2FloatW baseSeparation2 public B2FloatW baseSeparation2 Field Value B2FloatW biasRate public B2FloatW biasRate Field Value B2FloatW friction public B2FloatW friction Field Value B2FloatW impulseScale public B2FloatW impulseScale Field Value B2FloatW indexA public B2FixedArray4<int> indexA Field Value B2FixedArray4<int> indexB public B2FixedArray4<int> indexB Field Value B2FixedArray4<int> invIA public B2FloatW invIA Field Value B2FloatW invIB public B2FloatW invIB Field Value B2FloatW invMassA public B2FloatW invMassA Field Value B2FloatW invMassB public B2FloatW invMassB Field Value B2FloatW massScale public B2FloatW massScale Field Value B2FloatW normal public B2Vec2W normal Field Value B2Vec2W normalImpulse1 public B2FloatW normalImpulse1 Field Value B2FloatW normalImpulse2 public B2FloatW normalImpulse2 Field Value B2FloatW normalMass1 public B2FloatW normalMass1 Field Value B2FloatW normalMass2 public B2FloatW normalMass2 Field Value B2FloatW relativeVelocity1 public B2FloatW relativeVelocity1 Field Value B2FloatW relativeVelocity2 public B2FloatW relativeVelocity2 Field Value B2FloatW restitution public B2FloatW restitution Field Value B2FloatW rollingImpulse public B2FloatW rollingImpulse Field Value B2FloatW rollingMass public B2FloatW rollingMass Field Value B2FloatW rollingResistance public B2FloatW rollingResistance Field Value B2FloatW tangentImpulse1 public B2FloatW tangentImpulse1 Field Value B2FloatW tangentImpulse2 public B2FloatW tangentImpulse2 Field Value B2FloatW tangentMass1 public B2FloatW tangentMass1 Field Value B2FloatW tangentMass2 public B2FloatW tangentMass2 Field Value B2FloatW tangentSpeed public B2FloatW tangentSpeed Field Value B2FloatW totalNormalImpulse1 public B2FloatW totalNormalImpulse1 Field Value B2FloatW totalNormalImpulse2 public B2FloatW totalNormalImpulse2 Field Value B2FloatW"
  },
  "api/Box2D.NET.B2ContactData.html": {
    "href": "api/Box2D.NET.B2ContactData.html",
    "title": "Struct B2ContactData | Box2D API",
    "keywords": "Struct B2ContactData Namespace Box2D.NET Assembly Box2D.NET.dll The contact data for two shapes. By convention the manifold normal points from shape A to shape B. @see b2Shape_GetContactData() and b2Body_GetContactData() public struct B2ContactData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields manifold public B2Manifold manifold Field Value B2Manifold shapeIdA public B2ShapeId shapeIdA Field Value B2ShapeId shapeIdB public B2ShapeId shapeIdB Field Value B2ShapeId"
  },
  "api/Box2D.NET.B2ContactEdge.html": {
    "href": "api/Box2D.NET.B2ContactEdge.html",
    "title": "Struct B2ContactEdge | Box2D API",
    "keywords": "Struct B2ContactEdge Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ContactEdge Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyId public int bodyId Field Value int nextKey public int nextKey Field Value int prevKey public int prevKey Field Value int"
  },
  "api/Box2D.NET.B2ContactEndTouchEvent.html": {
    "href": "api/Box2D.NET.B2ContactEndTouchEvent.html",
    "title": "Struct B2ContactEndTouchEvent | Box2D API",
    "keywords": "Struct B2ContactEndTouchEvent Namespace Box2D.NET Assembly Box2D.NET.dll An end touch event is generated when two shapes stop touching. You will get an end event if you do anything that destroys contacts previous to the last world step. These include things like setting the transform, destroying a body or shape, or changing a filter or body type. public struct B2ContactEndTouchEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2ContactEndTouchEvent(B2ShapeId, B2ShapeId) public B2ContactEndTouchEvent(B2ShapeId shapeIdA, B2ShapeId shapeIdB) Parameters shapeIdA B2ShapeId shapeIdB B2ShapeId Fields shapeIdA Id of the first shape @warning this shape may have been destroyed @see b2Shape_IsValid public B2ShapeId shapeIdA Field Value B2ShapeId shapeIdB Id of the second shape @warning this shape may have been destroyed @see b2Shape_IsValid public B2ShapeId shapeIdB Field Value B2ShapeId"
  },
  "api/Box2D.NET.B2ContactEvents.html": {
    "href": "api/Box2D.NET.B2ContactEvents.html",
    "title": "Struct B2ContactEvents | Box2D API",
    "keywords": "Struct B2ContactEvents Namespace Box2D.NET Assembly Box2D.NET.dll Contact events are buffered in the Box2D world and are available as event arrays after the time step is complete. Note: these may become invalid if bodies and/or shapes are destroyed public struct B2ContactEvents Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields beginCount Number of begin touch events public int beginCount Field Value int beginEvents Array of begin touch events public B2ContactBeginTouchEvent[] beginEvents Field Value B2ContactBeginTouchEvent[] endCount Number of end touch events public int endCount Field Value int endEvents Array of end touch events public B2ContactEndTouchEvent[] endEvents Field Value B2ContactEndTouchEvent[] hitCount Number of hit events public int hitCount Field Value int hitEvents Array of hit events public B2ContactHitEvent[] hitEvents Field Value B2ContactHitEvent[]"
  },
  "api/Box2D.NET.B2ContactFlags.html": {
    "href": "api/Box2D.NET.B2ContactFlags.html",
    "title": "Enum B2ContactFlags | Box2D API",
    "keywords": "Enum B2ContactFlags Namespace Box2D.NET Assembly Box2D.NET.dll A contact edge is used to connect bodies and contacts together in a contact graph where each body is a node and each contact is an edge. A contact edge belongs to a doubly linked list maintained in each attached body. Each contact has two contact edges, one for each attached body. public enum B2ContactFlags Fields b2_contactEnableContactEvents = 4 b2_contactHitEventFlag = 2 b2_contactTouchingFlag = 1"
  },
  "api/Box2D.NET.B2ContactHitEvent.html": {
    "href": "api/Box2D.NET.B2ContactHitEvent.html",
    "title": "Struct B2ContactHitEvent | Box2D API",
    "keywords": "Struct B2ContactHitEvent Namespace Box2D.NET Assembly Box2D.NET.dll A hit touch event is generated when two shapes collide with a speed faster than the hit speed threshold. This may be reported for speculative contacts that have a confirmed impulse. public struct B2ContactHitEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields approachSpeed The speed the shapes are approaching. Always positive. Typically in meters per second. public float approachSpeed Field Value float normal Normal vector pointing from shape A to shape B public B2Vec2 normal Field Value B2Vec2 point Point where the shapes hit at the beginning of the time step. This is a mid-point between the two surfaces. It could be at speculative point where the two shapes were not touching at the beginning of the time step. public B2Vec2 point Field Value B2Vec2 shapeIdA Id of the first shape public B2ShapeId shapeIdA Field Value B2ShapeId shapeIdB Id of the second shape public B2ShapeId shapeIdB Field Value B2ShapeId"
  },
  "api/Box2D.NET.B2ContactRegister.html": {
    "href": "api/Box2D.NET.B2ContactRegister.html",
    "title": "Struct B2ContactRegister | Box2D API",
    "keywords": "Struct B2ContactRegister Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ContactRegister Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fcn public b2ManifoldFcn fcn Field Value b2ManifoldFcn primary public bool primary Field Value bool"
  },
  "api/Box2D.NET.B2ContactSim.html": {
    "href": "api/Box2D.NET.B2ContactSim.html",
    "title": "Class B2ContactSim | Box2D API",
    "keywords": "Class B2ContactSim Namespace Box2D.NET Assembly Box2D.NET.dll The class manages contact between two shapes. A contact exists for each overlapping AABB in the broad-phase (except if filtered). Therefore a contact object may exist that has no contact points. public class B2ContactSim Inheritance object B2ContactSim Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields bodySimIndexA public int bodySimIndexA Field Value int bodySimIndexB public int bodySimIndexB Field Value int cache public B2SimplexCache cache Field Value B2SimplexCache contactId public int contactId Field Value int friction Mixed friction and restitution public float friction Field Value float invIA public float invIA Field Value float invIB public float invIB Field Value float invMassA public float invMassA Field Value float invMassB public float invMassB Field Value float manifold public B2Manifold manifold Field Value B2Manifold restitution public float restitution Field Value float rollingResistance public float rollingResistance Field Value float shapeIdA public int shapeIdA Field Value int shapeIdB public int shapeIdB Field Value int simFlags b2ContactSimFlags public uint simFlags Field Value uint tangentSpeed public float tangentSpeed Field Value float Methods CopyFrom(B2ContactSim) public void CopyFrom(B2ContactSim other) Parameters other B2ContactSim"
  },
  "api/Box2D.NET.B2ContactSimFlags.html": {
    "href": "api/Box2D.NET.B2ContactSimFlags.html",
    "title": "Enum B2ContactSimFlags | Box2D API",
    "keywords": "Enum B2ContactSimFlags Namespace Box2D.NET Assembly Box2D.NET.dll Shifted to be distinct from b2ContactFlags public enum B2ContactSimFlags Fields b2_simDisjoint = 131072 b2_simEnableHitEvent = 1048576 b2_simEnablePreSolveEvents = 2097152 b2_simStartedTouching = 262144 b2_simStoppedTouching = 524288 b2_simTouchingFlag = 65536"
  },
  "api/Box2D.NET.B2ContactSolvers.html": {
    "href": "api/Box2D.NET.B2ContactSolvers.html",
    "title": "Class B2ContactSolvers | Box2D API",
    "keywords": "Class B2ContactSolvers Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2ContactSolvers Inheritance object B2ContactSolvers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2AddW(B2FloatW, B2FloatW) public static B2FloatW b2AddW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2AddW(Vector<float>, Vector<float>) public static Vector<float> b2AddW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2AllZeroW(B2FloatW) public static bool b2AllZeroW(B2FloatW a) Parameters a B2FloatW Returns bool b2AllZeroW(Vector<float>) public static bool b2AllZeroW(Vector<float> a) Parameters a Vector<float> Returns bool b2ApplyOverflowRestitution(B2StepContext) public static void b2ApplyOverflowRestitution(B2StepContext context) Parameters context B2StepContext b2ApplyRestitutionTask(int, int, B2StepContext, int) public static void b2ApplyRestitutionTask(int startIndex, int endIndex, B2StepContext context, int colorIndex) Parameters startIndex int endIndex int context B2StepContext colorIndex int b2BlendW(B2FloatW, B2FloatW, B2FloatW) public static B2FloatW b2BlendW(B2FloatW a, B2FloatW b, B2FloatW mask) Parameters a B2FloatW b B2FloatW mask B2FloatW Returns B2FloatW b2BlendW(Vector<float>, Vector<float>, Vector<float>) public static Vector<float> b2BlendW(Vector<float> a, Vector<float> b, Vector<float> mask) Parameters a Vector<float> b Vector<float> mask Vector<float> Returns Vector<float> b2CrossW(B2Vec2W, B2Vec2W) public static B2FloatW b2CrossW(B2Vec2W a, B2Vec2W b) Parameters a B2Vec2W b B2Vec2W Returns B2FloatW b2DotW(B2Vec2W, B2Vec2W) public static B2FloatW b2DotW(B2Vec2W a, B2Vec2W b) Parameters a B2Vec2W b B2Vec2W Returns B2FloatW b2EqualsW(B2FloatW, B2FloatW) public static B2FloatW b2EqualsW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2EqualsW(Vector<float>, Vector<float>) public static Vector<float> b2EqualsW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2GatherBodies(B2BodyState[], ReadOnlySpan<int>) This is a load and transpose public static B2BodyStateW b2GatherBodies(B2BodyState[] states, ReadOnlySpan<int> indices) Parameters states B2BodyState[] indices ReadOnlySpan<int> Returns B2BodyStateW b2GetContactConstraintSIMDByteCount() public static int b2GetContactConstraintSIMDByteCount() Returns int b2GreaterThanW(B2FloatW, B2FloatW) public static B2FloatW b2GreaterThanW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2GreaterThanW(Vector<float>, Vector<float>) public static Vector<float> b2GreaterThanW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2MaxW(B2FloatW, B2FloatW) public static B2FloatW b2MaxW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2MaxW(Vector<float>, Vector<float>) public static Vector<float> b2MaxW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2MinW(B2FloatW, B2FloatW) public static B2FloatW b2MinW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2MinW(Vector<float>, Vector<float>) public static Vector<float> b2MinW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2MulAddW(B2FloatW, B2FloatW, B2FloatW) public static B2FloatW b2MulAddW(B2FloatW a, B2FloatW b, B2FloatW c) Parameters a B2FloatW b B2FloatW c B2FloatW Returns B2FloatW b2MulAddW(Vector<float>, Vector<float>, Vector<float>) public static Vector<float> b2MulAddW(Vector<float> a, Vector<float> b, Vector<float> c) Parameters a Vector<float> b Vector<float> c Vector<float> Returns Vector<float> b2MulSubW(B2FloatW, B2FloatW, B2FloatW) public static B2FloatW b2MulSubW(B2FloatW a, B2FloatW b, B2FloatW c) Parameters a B2FloatW b B2FloatW c B2FloatW Returns B2FloatW b2MulSubW(Vector<float>, Vector<float>, Vector<float>) public static Vector<float> b2MulSubW(Vector<float> a, Vector<float> b, Vector<float> c) Parameters a Vector<float> b Vector<float> c Vector<float> Returns Vector<float> b2MulW(B2FloatW, B2FloatW) public static B2FloatW b2MulW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2MulW(Vector<float>, Vector<float>) public static Vector<float> b2MulW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2OrW(B2FloatW, B2FloatW) public static B2FloatW b2OrW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2OrW(Vector<float>, Vector<float>) public static Vector<float> b2OrW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2PrepareContactsTask(int, int, B2StepContext) Contacts that live within the constraint graph coloring public static void b2PrepareContactsTask(int startIndex, int endIndex, B2StepContext context) Parameters startIndex int endIndex int context B2StepContext b2PrepareOverflowContacts(B2StepContext) Overflow contacts don't fit into the constraint graph coloring contact separation for sub-stepping s = s0 + dot(cB + rB - cA - rA, normal) normal is held constant body positions c can translation and anchors r can rotate s(t) = s0 + dot(cB(t) + rB(t) - cA(t) - rA(t), normal) s(t) = s0 + dot(cB0 + dpB + rot(dqB, rB0) - cA0 - dpA - rot(dqA, rA0), normal) s(t) = s0 + dot(cB0 - cA0, normal) + dot(dpB - dpA + rot(dqB, rB0) - rot(dqA, rA0), normal) s_base = s0 + dot(cB0 - cA0, normal) public static void b2PrepareOverflowContacts(B2StepContext context) Parameters context B2StepContext b2RotateVectorW(B2RotW, B2Vec2W) public static B2Vec2W b2RotateVectorW(B2RotW q, B2Vec2W v) Parameters q B2RotW v B2Vec2W Returns B2Vec2W b2ScatterBodies(B2BodyState[], ReadOnlySpan<int>, ref B2BodyStateW) This writes only the velocities back to the solver bodies public static void b2ScatterBodies(B2BodyState[] states, ReadOnlySpan<int> indices, ref B2BodyStateW simdBody) Parameters states B2BodyState[] indices ReadOnlySpan<int> simdBody B2BodyStateW b2SolveContactsTask(int, int, B2StepContext, int, bool) public static void b2SolveContactsTask(int startIndex, int endIndex, B2StepContext context, int colorIndex, bool useBias) Parameters startIndex int endIndex int context B2StepContext colorIndex int useBias bool b2SolveOverflowContacts(B2StepContext, bool) public static void b2SolveOverflowContacts(B2StepContext context, bool useBias) Parameters context B2StepContext useBias bool b2SplatW(float) public static B2FloatW b2SplatW(float scalar) Parameters scalar float Returns B2FloatW b2StoreImpulsesTask(int, int, B2StepContext) public static void b2StoreImpulsesTask(int startIndex, int endIndex, B2StepContext context) Parameters startIndex int endIndex int context B2StepContext b2StoreOverflowImpulses(B2StepContext) public static void b2StoreOverflowImpulses(B2StepContext context) Parameters context B2StepContext b2SubW(B2FloatW, B2FloatW) public static B2FloatW b2SubW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2SubW(Vector<float>, Vector<float>) public static Vector<float> b2SubW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2SymClampW(B2FloatW, B2FloatW) public static B2FloatW b2SymClampW(B2FloatW a, B2FloatW b) Parameters a B2FloatW b B2FloatW Returns B2FloatW b2SymClampW(Vector<float>, Vector<float>) public static Vector<float> b2SymClampW(Vector<float> a, Vector<float> b) Parameters a Vector<float> b Vector<float> Returns Vector<float> b2WarmStartContactsTask(int, int, B2StepContext, int) public static void b2WarmStartContactsTask(int startIndex, int endIndex, B2StepContext context, int colorIndex) Parameters startIndex int endIndex int context B2StepContext colorIndex int b2WarmStartOverflowContacts(B2StepContext) public static void b2WarmStartOverflowContacts(B2StepContext context) Parameters context B2StepContext b2ZeroW() public static B2FloatW b2ZeroW() Returns B2FloatW"
  },
  "api/Box2D.NET.B2Contacts.html": {
    "href": "api/Box2D.NET.B2Contacts.html",
    "title": "Class B2Contacts | Box2D API",
    "keywords": "Class B2Contacts Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Contacts Inheritance object B2Contacts Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2AddType(b2ManifoldFcn, B2ShapeType, B2ShapeType) public static void b2AddType(b2ManifoldFcn fcn, B2ShapeType type1, B2ShapeType type2) Parameters fcn b2ManifoldFcn type1 B2ShapeType type2 B2ShapeType b2CapsuleAndCircleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2CapsuleAndCircleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2CapsuleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2CapsuleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2ChainSegmentAndCapsuleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2ChainSegmentAndCapsuleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2ChainSegmentAndCircleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2ChainSegmentAndCircleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2ChainSegmentAndPolygonManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2ChainSegmentAndPolygonManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2CircleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2CircleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2ComputeManifold(B2Shape, B2Transform, B2Shape, B2Transform) public static B2Manifold b2ComputeManifold(B2Shape shapeA, B2Transform transformA, B2Shape shapeB, B2Transform transformB) Parameters shapeA B2Shape transformA B2Transform shapeB B2Shape transformB B2Transform Returns B2Manifold b2CreateContact(B2World, B2Shape, B2Shape) public static void b2CreateContact(B2World world, B2Shape shapeA, B2Shape shapeB) Parameters world B2World shapeA B2Shape shapeB B2Shape b2DestroyContact(B2World, B2Contact, bool) A contact is destroyed when: broad-phase proxies stop overlapping a body is destroyed a body is disabled a body changes type from dynamic to kinematic or static a shape is destroyed contact filtering is modified public static void b2DestroyContact(B2World world, B2Contact contact, bool wakeBodies) Parameters world B2World contact B2Contact wakeBodies bool b2GetContactSim(B2World, B2Contact) public static B2ContactSim b2GetContactSim(B2World world, B2Contact contact) Parameters world B2World contact B2Contact Returns B2ContactSim b2InitializeContactRegisters() public static void b2InitializeContactRegisters() b2PolygonAndCapsuleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2PolygonAndCapsuleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2PolygonAndCircleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2PolygonAndCircleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2PolygonManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2PolygonManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2SegmentAndCapsuleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2SegmentAndCapsuleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2SegmentAndCircleManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2SegmentAndCircleManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2SegmentAndPolygonManifold(B2Shape, B2Transform, B2Shape, B2Transform, ref B2SimplexCache) public static B2Manifold b2SegmentAndPolygonManifold(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape xfA B2Transform shapeB B2Shape xfB B2Transform cache B2SimplexCache Returns B2Manifold b2UpdateContact(B2World, B2ContactSim, B2Shape, B2Transform, B2Vec2, B2Shape, B2Transform, B2Vec2) Update the contact manifold and touching status. Note: do not assume the shape AABBs are overlapping or are valid. public static bool b2UpdateContact(B2World world, B2ContactSim contactSim, B2Shape shapeA, B2Transform transformA, B2Vec2 centerOffsetA, B2Shape shapeB, B2Transform transformB, B2Vec2 centerOffsetB) Parameters world B2World contactSim B2ContactSim shapeA B2Shape transformA B2Transform centerOffsetA B2Vec2 shapeB B2Shape transformB B2Transform centerOffsetB B2Vec2 Returns bool"
  },
  "api/Box2D.NET.B2ContinuousContext.html": {
    "href": "api/Box2D.NET.B2ContinuousContext.html",
    "title": "Struct B2ContinuousContext | Box2D API",
    "keywords": "Struct B2ContinuousContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ContinuousContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields centroid1 public B2Vec2 centroid1 Field Value B2Vec2 centroid2 public B2Vec2 centroid2 Field Value B2Vec2 fastBodySim public B2BodySim fastBodySim Field Value B2BodySim fastShape public B2Shape fastShape Field Value B2Shape fraction public float fraction Field Value float sweep public B2Sweep sweep Field Value B2Sweep world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2Cores.html": {
    "href": "api/Box2D.NET.B2Cores.html",
    "title": "Class B2Cores | Box2D API",
    "keywords": "Class B2Cores Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Cores Inheritance object B2Cores Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields B2_SIMD_WIDTH note: I tried width of 1 and got no performance change public const int B2_SIMD_WIDTH = 4 Field Value int b2_lengthUnitsPerMeter This allows the user to change the length units at runtime public static float b2_lengthUnitsPerMeter Field Value float Methods B2_CHECK_DEF(ref B2BodyDef) public static void B2_CHECK_DEF(ref B2BodyDef def) Parameters def B2BodyDef B2_CHECK_DEF(ref B2ChainDef) public static void B2_CHECK_DEF(ref B2ChainDef def) Parameters def B2ChainDef B2_CHECK_DEF(ref B2DistanceJointDef) public static void B2_CHECK_DEF(ref B2DistanceJointDef def) Parameters def B2DistanceJointDef B2_CHECK_DEF(ref B2MotorJointDef) public static void B2_CHECK_DEF(ref B2MotorJointDef def) Parameters def B2MotorJointDef B2_CHECK_DEF(ref B2MouseJointDef) public static void B2_CHECK_DEF(ref B2MouseJointDef def) Parameters def B2MouseJointDef B2_CHECK_DEF(ref B2PrismaticJointDef) public static void B2_CHECK_DEF(ref B2PrismaticJointDef def) Parameters def B2PrismaticJointDef B2_CHECK_DEF(ref B2RevoluteJointDef) public static void B2_CHECK_DEF(ref B2RevoluteJointDef def) Parameters def B2RevoluteJointDef B2_CHECK_DEF(ref B2ShapeDef) public static void B2_CHECK_DEF(ref B2ShapeDef def) Parameters def B2ShapeDef B2_CHECK_DEF(ref B2WeldJointDef) public static void B2_CHECK_DEF(ref B2WeldJointDef def) Parameters def B2WeldJointDef B2_CHECK_DEF(ref B2WheelJointDef) public static void B2_CHECK_DEF(ref B2WheelJointDef def) Parameters def B2WheelJointDef B2_CHECK_DEF(ref B2WorldDef) public static void B2_CHECK_DEF(ref B2WorldDef def) Parameters def B2WorldDef B2_CHECK_DEF(ref b2FilterJointDef) public static void B2_CHECK_DEF(ref b2FilterJointDef def) Parameters def b2FilterJointDef b2GetLengthUnitsPerMeter() public static float b2GetLengthUnitsPerMeter() Returns float b2GetVersion() Get the current version of Box2D public static B2Version b2GetVersion() Returns B2Version b2SetLengthUnitsPerMeter(float) public static void b2SetLengthUnitsPerMeter(float lengthUnits) Parameters lengthUnits float"
  },
  "api/Box2D.NET.B2CosSin.html": {
    "href": "api/Box2D.NET.B2CosSin.html",
    "title": "Struct B2CosSin | Box2D API",
    "keywords": "Struct B2CosSin Namespace Box2D.NET Assembly Box2D.NET.dll Cosine and sine pair This uses a custom implementation designed for cross-platform determinism public struct B2CosSin Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields cosine cosine and sine public float cosine Field Value float sine public float sine Field Value float"
  },
  "api/Box2D.NET.B2Counters.html": {
    "href": "api/Box2D.NET.B2Counters.html",
    "title": "Struct B2Counters | Box2D API",
    "keywords": "Struct B2Counters Namespace Box2D.NET Assembly Box2D.NET.dll Counters that give details of the simulation size. public struct B2Counters Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyCount public int bodyCount Field Value int byteCount public int byteCount Field Value int colorCounts public B2FixedArray12<int> colorCounts Field Value B2FixedArray12<int> contactCount public int contactCount Field Value int islandCount public int islandCount Field Value int jointCount public int jointCount Field Value int shapeCount public int shapeCount Field Value int stackUsed public int stackUsed Field Value int staticTreeHeight public int staticTreeHeight Field Value int taskCount public int taskCount Field Value int treeHeight public int treeHeight Field Value int"
  },
  "api/Box2D.NET.B2DebugDraw.html": {
    "href": "api/Box2D.NET.B2DebugDraw.html",
    "title": "Class B2DebugDraw | Box2D API",
    "keywords": "Class B2DebugDraw Namespace Box2D.NET Assembly Box2D.NET.dll This struct holds callbacks you can implement to draw a Box2D world. This structure should be zero initialized. @ingroup world public class B2DebugDraw Inheritance object B2DebugDraw Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DrawCircleFcn public DrawCircleFcn DrawCircleFcn Field Value DrawCircleFcn DrawPointFcn public DrawPointFcn DrawPointFcn Field Value DrawPointFcn DrawPolygonFcn public DrawPolygonFcn DrawPolygonFcn Field Value DrawPolygonFcn DrawSegmentFcn public DrawSegmentFcn DrawSegmentFcn Field Value DrawSegmentFcn DrawSolidCapsuleFcn public DrawSolidCapsuleFcn DrawSolidCapsuleFcn Field Value DrawSolidCapsuleFcn DrawSolidCircleFcn public DrawSolidCircleFcn DrawSolidCircleFcn Field Value DrawSolidCircleFcn DrawSolidPolygonFcn public DrawSolidPolygonFcn DrawSolidPolygonFcn Field Value DrawSolidPolygonFcn DrawStringFcn public DrawStringFcn DrawStringFcn Field Value DrawStringFcn DrawTransformFcn public DrawTransformFcn DrawTransformFcn Field Value DrawTransformFcn context User context that is passed as an argument to drawing callback functions public object context Field Value object drawBodyNames Option to draw body names public bool drawBodyNames Field Value bool drawBounds Option to draw the bounding boxes for shapes public bool drawBounds Field Value bool drawContactFeatures Option to draw contact feature ids public bool drawContactFeatures Field Value bool drawContactImpulses Option to draw contact normal impulses public bool drawContactImpulses Field Value bool drawContactNormals Option to draw contact normals public bool drawContactNormals Field Value bool drawContacts Option to draw contact points public bool drawContacts Field Value bool drawFrictionImpulses Option to draw contact friction impulses public bool drawFrictionImpulses Field Value bool drawGraphColors Option to visualize the graph coloring used for contacts and joints public bool drawGraphColors Field Value bool drawIslands Option to draw islands as bounding boxes public bool drawIslands Field Value bool drawJointExtras Option to draw additional information for joints public bool drawJointExtras Field Value bool drawJoints Option to draw joints public bool drawJoints Field Value bool drawMass Option to draw the mass and center of mass of dynamic bodies public bool drawMass Field Value bool drawShapes Option to draw shapes public bool drawShapes Field Value bool drawingBounds Bounds to use if restricting drawing to a rectangular region public B2AABB drawingBounds Field Value B2AABB useDrawingBounds Option to restrict drawing to a rectangular region. May suffer from unstable depth sorting. public bool useDrawingBounds Field Value bool"
  },
  "api/Box2D.NET.B2Diagnostics.html": {
    "href": "api/Box2D.NET.B2Diagnostics.html",
    "title": "Class B2Diagnostics | Box2D API",
    "keywords": "Class B2Diagnostics Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Diagnostics Inheritance object B2Diagnostics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods B2_ASSERT(bool, string, string, int, string) [Conditional(\"DEBUG\")] public static void B2_ASSERT(bool condition, string message = \"\", string fileName = \"\", int lineNumber = 0, string memberName = \"\") Parameters condition bool message string fileName string lineNumber int memberName string B2_UNUSED<T1>(T1) [Conditional(\"DEBUG\")] public static void B2_UNUSED<T1>(T1 a) Parameters a T1 Type Parameters T1 B2_UNUSED<T1, T2>(T1, T2) [Conditional(\"DEBUG\")] public static void B2_UNUSED<T1, T2>(T1 a, T2 b) Parameters a T1 b T2 Type Parameters T1 T2 B2_UNUSED<T1, T2, T3>(T1, T2, T3) [Conditional(\"DEBUG\")] public static void B2_UNUSED<T1, T2, T3>(T1 a, T2 b, T3 c) Parameters a T1 b T2 c T3 Type Parameters T1 T2 T3 B2_UNUSED<T1, T2, T3, T4>(T1, T2, T3, T4) [Conditional(\"DEBUG\")] public static void B2_UNUSED<T1, T2, T3, T4>(T1 a, T2 b, T3 c, T4 d) Parameters a T1 b T2 c T3 d T4 Type Parameters T1 T2 T3 T4 B2_UNUSED<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5) [Conditional(\"DEBUG\")] public static void B2_UNUSED<T1, T2, T3, T4, T5>(T1 a, T2 b, T3 c, T4 d, T5 e) Parameters a T1 b T2 c T3 d T4 e T5 Type Parameters T1 T2 T3 T4 T5 B2_UNUSED<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6) [Conditional(\"DEBUG\")] public static void B2_UNUSED<T1, T2, T3, T4, T5, T6>(T1 a, T2 b, T3 c, T4 d, T5 e, T6 f) Parameters a T1 b T2 c T3 d T4 e T5 f T6 Type Parameters T1 T2 T3 T4 T5 T6 b2DefaultAssertFcn(string, string, int) public static int b2DefaultAssertFcn(string condition, string fileName, int lineNumber) Parameters condition string fileName string lineNumber int Returns int b2InternalAssertFcn(string, string, int) public static int b2InternalAssertFcn(string condition, string fileName, int lineNumber) Parameters condition string fileName string lineNumber int Returns int b2SetAssertFcn(b2AssertFcn) Override the default assert callback @param assertFcn a non-null assert callback public static void b2SetAssertFcn(b2AssertFcn assertFcn) Parameters assertFcn b2AssertFcn"
  },
  "api/Box2D.NET.B2DistanceInput.html": {
    "href": "api/Box2D.NET.B2DistanceInput.html",
    "title": "Struct B2DistanceInput | Box2D API",
    "keywords": "Struct B2DistanceInput Namespace Box2D.NET Assembly Box2D.NET.dll Input for b2ShapeDistance public struct B2DistanceInput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields proxyA The proxy for shape A public B2ShapeProxy proxyA Field Value B2ShapeProxy proxyB The proxy for shape B public B2ShapeProxy proxyB Field Value B2ShapeProxy transformA The world transform for shape A public B2Transform transformA Field Value B2Transform transformB The world transform for shape B public B2Transform transformB Field Value B2Transform useRadii Should the proxy radius be considered? public bool useRadii Field Value bool"
  },
  "api/Box2D.NET.B2DistanceJoint.html": {
    "href": "api/Box2D.NET.B2DistanceJoint.html",
    "title": "Struct B2DistanceJoint | Box2D API",
    "keywords": "Struct B2DistanceJoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2DistanceJoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA public B2Vec2 anchorA Field Value B2Vec2 anchorB public B2Vec2 anchorB Field Value B2Vec2 axialMass public float axialMass Field Value float dampingRatio public float dampingRatio Field Value float deltaCenter public B2Vec2 deltaCenter Field Value B2Vec2 distanceSoftness public B2Softness distanceSoftness Field Value B2Softness enableLimit public bool enableLimit Field Value bool enableMotor public bool enableMotor Field Value bool enableSpring public bool enableSpring Field Value bool hertz public float hertz Field Value float impulse public float impulse Field Value float indexA public int indexA Field Value int indexB public int indexB Field Value int length public float length Field Value float lowerImpulse public float lowerImpulse Field Value float maxLength public float maxLength Field Value float maxMotorForce public float maxMotorForce Field Value float minLength public float minLength Field Value float motorImpulse public float motorImpulse Field Value float motorSpeed public float motorSpeed Field Value float upperImpulse public float upperImpulse Field Value float"
  },
  "api/Box2D.NET.B2DistanceJointDef.html": {
    "href": "api/Box2D.NET.B2DistanceJointDef.html",
    "title": "Struct B2DistanceJointDef | Box2D API",
    "keywords": "Struct B2DistanceJointDef Namespace Box2D.NET Assembly Box2D.NET.dll Distance joint definition This requires defining an anchor point on both bodies and the non-zero distance of the distance joint. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. This helps when saving and loading a game. @ingroup distance_joint public struct B2DistanceJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyIdA The first attached body public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body public B2BodyId bodyIdB Field Value B2BodyId collideConnected Set this flag to true if the attached bodies should collide public bool collideConnected Field Value bool dampingRatio The spring linear damping ratio, non-dimensional public float dampingRatio Field Value float enableLimit Enable/disable the joint limit public bool enableLimit Field Value bool enableMotor Enable/disable the joint motor public bool enableMotor Field Value bool enableSpring Enable the distance constraint to behave like a spring. If false then the distance joint will be rigid, overriding the limit and motor. public bool enableSpring Field Value bool hertz The spring linear stiffness Hertz, cycles per second public float hertz Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int length The rest length of this joint. Clamped to a stable minimum value. public float length Field Value float localAnchorA The local anchor point relative to bodyA's origin public B2Vec2 localAnchorA Field Value B2Vec2 localAnchorB The local anchor point relative to bodyB's origin public B2Vec2 localAnchorB Field Value B2Vec2 maxLength Maximum length. Must be greater than or equal to the minimum length. public float maxLength Field Value float maxMotorForce The maximum motor force, usually in newtons public float maxMotorForce Field Value float minLength Minimum length. Clamped to a stable minimum value. public float minLength Field Value float motorSpeed The desired motor speed, usually in meters per second public float motorSpeed Field Value float userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.B2DistanceJoints.html": {
    "href": "api/Box2D.NET.B2DistanceJoints.html",
    "title": "Class B2DistanceJoints | Box2D API",
    "keywords": "Class B2DistanceJoints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2DistanceJoints Inheritance object B2DistanceJoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2DistanceJoint_EnableLimit(B2JointId, bool) public static void b2DistanceJoint_EnableLimit(B2JointId jointId, bool enableLimit) Parameters jointId B2JointId enableLimit bool b2DistanceJoint_EnableMotor(B2JointId, bool) public static void b2DistanceJoint_EnableMotor(B2JointId jointId, bool enableMotor) Parameters jointId B2JointId enableMotor bool b2DistanceJoint_EnableSpring(B2JointId, bool) public static void b2DistanceJoint_EnableSpring(B2JointId jointId, bool enableSpring) Parameters jointId B2JointId enableSpring bool b2DistanceJoint_GetCurrentLength(B2JointId) public static float b2DistanceJoint_GetCurrentLength(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetLength(B2JointId) public static float b2DistanceJoint_GetLength(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetMaxLength(B2JointId) public static float b2DistanceJoint_GetMaxLength(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetMaxMotorForce(B2JointId) public static float b2DistanceJoint_GetMaxMotorForce(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetMinLength(B2JointId) public static float b2DistanceJoint_GetMinLength(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetMotorForce(B2JointId) public static float b2DistanceJoint_GetMotorForce(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetMotorSpeed(B2JointId) public static float b2DistanceJoint_GetMotorSpeed(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetSpringDampingRatio(B2JointId) public static float b2DistanceJoint_GetSpringDampingRatio(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_GetSpringHertz(B2JointId) public static float b2DistanceJoint_GetSpringHertz(B2JointId jointId) Parameters jointId B2JointId Returns float b2DistanceJoint_IsLimitEnabled(B2JointId) public static bool b2DistanceJoint_IsLimitEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2DistanceJoint_IsMotorEnabled(B2JointId) public static bool b2DistanceJoint_IsMotorEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2DistanceJoint_IsSpringEnabled(B2JointId) public static bool b2DistanceJoint_IsSpringEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2DistanceJoint_SetLength(B2JointId, float) public static void b2DistanceJoint_SetLength(B2JointId jointId, float length) Parameters jointId B2JointId length float b2DistanceJoint_SetLengthRange(B2JointId, float, float) public static void b2DistanceJoint_SetLengthRange(B2JointId jointId, float minLength, float maxLength) Parameters jointId B2JointId minLength float maxLength float b2DistanceJoint_SetMaxMotorForce(B2JointId, float) public static void b2DistanceJoint_SetMaxMotorForce(B2JointId jointId, float force) Parameters jointId B2JointId force float b2DistanceJoint_SetMotorSpeed(B2JointId, float) public static void b2DistanceJoint_SetMotorSpeed(B2JointId jointId, float motorSpeed) Parameters jointId B2JointId motorSpeed float b2DistanceJoint_SetSpringDampingRatio(B2JointId, float) public static void b2DistanceJoint_SetSpringDampingRatio(B2JointId jointId, float dampingRatio) Parameters jointId B2JointId dampingRatio float b2DistanceJoint_SetSpringHertz(B2JointId, float) public static void b2DistanceJoint_SetSpringHertz(B2JointId jointId, float hertz) Parameters jointId B2JointId hertz float b2DrawDistanceJoint(B2DebugDraw, B2JointSim, B2Transform, B2Transform) public static void b2DrawDistanceJoint(B2DebugDraw draw, B2JointSim @base, B2Transform transformA, B2Transform transformB) Parameters draw B2DebugDraw base B2JointSim transformA B2Transform transformB B2Transform b2GetDistanceJointForce(B2World, B2JointSim) public static B2Vec2 b2GetDistanceJointForce(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns B2Vec2 b2PrepareDistanceJoint(B2JointSim, B2StepContext) public static void b2PrepareDistanceJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2SolveDistanceJoint(B2JointSim, B2StepContext, bool) public static void b2SolveDistanceJoint(B2JointSim @base, B2StepContext context, bool useBias) Parameters base B2JointSim context B2StepContext useBias bool b2WarmStartDistanceJoint(B2JointSim, B2StepContext) public static void b2WarmStartDistanceJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext"
  },
  "api/Box2D.NET.B2DistanceOutput.html": {
    "href": "api/Box2D.NET.B2DistanceOutput.html",
    "title": "Struct B2DistanceOutput | Box2D API",
    "keywords": "Struct B2DistanceOutput Namespace Box2D.NET Assembly Box2D.NET.dll Output for b2ShapeDistance public struct B2DistanceOutput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields distance public float distance Field Value float iterations public int iterations Field Value int normal public B2Vec2 normal Field Value B2Vec2 pointA public B2Vec2 pointA Field Value B2Vec2 pointB public B2Vec2 pointB Field Value B2Vec2 simplexCount public int simplexCount Field Value int"
  },
  "api/Box2D.NET.B2Distances.html": {
    "href": "api/Box2D.NET.B2Distances.html",
    "title": "Class B2Distances | Box2D API",
    "keywords": "Class B2Distances Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Distances Inheritance object B2Distances Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2ComputeSimplexWitnessPoints(ref B2Vec2, ref B2Vec2, ref B2Simplex) public static void b2ComputeSimplexWitnessPoints(ref B2Vec2 a, ref B2Vec2 b, ref B2Simplex s) Parameters a B2Vec2 b B2Vec2 s B2Simplex b2FindMinSeparation(ref B2SeparationFunction, ref int, ref int, float) public static float b2FindMinSeparation(ref B2SeparationFunction f, ref int indexA, ref int indexB, float t) Parameters f B2SeparationFunction indexA int indexB int t float Returns float b2FindSupport(ref B2ShapeProxy, B2Vec2) public static int b2FindSupport(ref B2ShapeProxy proxy, B2Vec2 direction) Parameters proxy B2ShapeProxy direction B2Vec2 Returns int b2GetSweepTransform(ref B2Sweep, float) Evaluate the transform sweep at a specific time. public static B2Transform b2GetSweepTransform(ref B2Sweep sweep, float time) Parameters sweep B2Sweep time float Returns B2Transform b2MakeOffsetProxy(ReadOnlySpan<B2Vec2>, int, float, B2Vec2, B2Rot) Make a proxy with a transform. This is a deep copy of the points. public static B2ShapeProxy b2MakeOffsetProxy(ReadOnlySpan<B2Vec2> points, int count, float radius, B2Vec2 position, B2Rot rotation) Parameters points ReadOnlySpan<B2Vec2> count int radius float position B2Vec2 rotation B2Rot Returns B2ShapeProxy b2MakeProxy(B2Vec2, B2Vec2, int, float) public static B2ShapeProxy b2MakeProxy(B2Vec2 v1, B2Vec2 v2, int count, float radius) Parameters v1 B2Vec2 v2 B2Vec2 count int radius float Returns B2ShapeProxy b2MakeProxy(B2Vec2, int, float) for single public static B2ShapeProxy b2MakeProxy(B2Vec2 v1, int count, float radius) Parameters v1 B2Vec2 count int radius float Returns B2ShapeProxy b2MakeProxy(ReadOnlySpan<B2Vec2>, int, float) Make a proxy for use in overlap, shape cast, and related functions. This is a deep copy of the points. Make a proxy for use in GJK and related functions. GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates. todo try not copying public static B2ShapeProxy b2MakeProxy(ReadOnlySpan<B2Vec2> points, int count, float radius) Parameters points ReadOnlySpan<B2Vec2> count int radius float Returns B2ShapeProxy b2MakeSeparationFunction(ref B2SimplexCache, ref B2ShapeProxy, ref B2Sweep, ref B2ShapeProxy, ref B2Sweep, float) public static B2SeparationFunction b2MakeSeparationFunction(ref B2SimplexCache cache, ref B2ShapeProxy proxyA, ref B2Sweep sweepA, ref B2ShapeProxy proxyB, ref B2Sweep sweepB, float t1) Parameters cache B2SimplexCache proxyA B2ShapeProxy sweepA B2Sweep proxyB B2ShapeProxy sweepB B2Sweep t1 float Returns B2SeparationFunction b2MakeSimplexCache(ref B2SimplexCache, ref B2Simplex) public static void b2MakeSimplexCache(ref B2SimplexCache cache, ref B2Simplex simplex) Parameters cache B2SimplexCache simplex B2Simplex b2MakeSimplexFromCache(ref B2SimplexCache, ref B2ShapeProxy, ref B2ShapeProxy) public static B2Simplex b2MakeSimplexFromCache(ref B2SimplexCache cache, ref B2ShapeProxy proxyA, ref B2ShapeProxy proxyB) Parameters cache B2SimplexCache proxyA B2ShapeProxy proxyB B2ShapeProxy Returns B2Simplex b2SegmentDistance(B2Vec2, B2Vec2, B2Vec2, B2Vec2) Compute the distance between two line segments, clamping at the end points if needed. Follows Ericson 5.1.9 Closest Points of Two Line Segments public static B2SegmentDistanceResult b2SegmentDistance(B2Vec2 p1, B2Vec2 q1, B2Vec2 p2, B2Vec2 q2) Parameters p1 B2Vec2 q1 B2Vec2 p2 B2Vec2 q2 B2Vec2 Returns B2SegmentDistanceResult b2ShapeCast(ref B2ShapeCastPairInput) Perform a linear shape cast of shape B moving and shape A fixed. Determines the hit point, normal, and translation fraction. Initially touching shapes are treated as a miss. Shape cast using conservative advancement public static B2CastOutput b2ShapeCast(ref B2ShapeCastPairInput input) Parameters input B2ShapeCastPairInput Returns B2CastOutput b2ShapeDistance(ref B2DistanceInput, ref B2SimplexCache, B2Simplex[], int) Compute the closest points between two shapes represented as point clouds. b2SimplexCache cache is input/output. On the first call set b2SimplexCache.count to zero. The underlying GJK algorithm may be debugged by passing in debug simplexes and capacity. You may pass in NULL and 0 for these. Uses GJK for computing the distance between convex shapes. https://box2d.org/files/ErinCatto_GJK_GDC2010.pdf I spent time optimizing this and could find no further significant gains 3/30/2025 public static B2DistanceOutput b2ShapeDistance(ref B2DistanceInput input, ref B2SimplexCache cache, B2Simplex[] simplexes, int simplexCapacity) Parameters input B2DistanceInput cache B2SimplexCache simplexes B2Simplex[] simplexCapacity int Returns B2DistanceOutput b2SolveSimplex2(ref B2Simplex) returns a vector that points towards the origin public static B2Vec2 b2SolveSimplex2(ref B2Simplex s) Parameters s B2Simplex Returns B2Vec2 b2SolveSimplex3(ref B2Simplex) public static B2Vec2 b2SolveSimplex3(ref B2Simplex s) Parameters s B2Simplex Returns B2Vec2 b2TimeOfImpact(ref B2TOIInput) Compute the upper bound on time before two shapes penetrate. Time is represented as a fraction between [0,tMax]. This uses a swept separating axis and may miss some intermediate, non-tunneling collisions. If you change the time interval, you should call this function again. CCD via the local separating axis method. This seeks progression by computing the largest time at which separation is maintained. public static B2TOIOutput b2TimeOfImpact(ref B2TOIInput input) Parameters input B2TOIInput Returns B2TOIOutput b2Weight2(float, B2Vec2, float, B2Vec2) public static B2Vec2 b2Weight2(float a1, B2Vec2 w1, float a2, B2Vec2 w2) Parameters a1 float w1 B2Vec2 a2 float w2 B2Vec2 Returns B2Vec2 b2Weight3(float, B2Vec2, float, B2Vec2, float, B2Vec2) public static B2Vec2 b2Weight3(float a1, B2Vec2 w1, float a2, B2Vec2 w2, float a3, B2Vec2 w3) Parameters a1 float w1 B2Vec2 a2 float w2 B2Vec2 a3 float w3 B2Vec2 Returns B2Vec2"
  },
  "api/Box2D.NET.B2DrawContext.html": {
    "href": "api/Box2D.NET.B2DrawContext.html",
    "title": "Struct B2DrawContext | Box2D API",
    "keywords": "Struct B2DrawContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2DrawContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields draw public B2DebugDraw draw Field Value B2DebugDraw world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2DynamicTree.html": {
    "href": "api/Box2D.NET.B2DynamicTree.html",
    "title": "Class B2DynamicTree | Box2D API",
    "keywords": "Class B2DynamicTree Namespace Box2D.NET Assembly Box2D.NET.dll The dynamic tree structure. This should be considered private data. It is placed here for performance reasons. public class B2DynamicTree Inheritance object B2DynamicTree Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields binIndices Bins for sorting during rebuild public int[] binIndices Field Value int[] freeList Node free list public int freeList Field Value int leafBoxes Leaf bounding boxes for rebuild public B2AABB[] leafBoxes Field Value B2AABB[] leafCenters Leaf bounding box centers for rebuild public B2Vec2[] leafCenters Field Value B2Vec2[] leafIndices Leaf indices for rebuild public int[] leafIndices Field Value int[] nodeCapacity The allocated node space public int nodeCapacity Field Value int nodeCount The number of nodes public int nodeCount Field Value int nodes The tree nodes public B2TreeNode[] nodes Field Value B2TreeNode[] proxyCount Number of proxies created public int proxyCount Field Value int rebuildCapacity Allocated space for rebuilding public int rebuildCapacity Field Value int root The root index public int root Field Value int Methods Clear() public void Clear()"
  },
  "api/Box2D.NET.B2DynamicTrees.html": {
    "href": "api/Box2D.NET.B2DynamicTrees.html",
    "title": "Class B2DynamicTrees | Box2D API",
    "keywords": "Class B2DynamicTrees Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2DynamicTrees Inheritance object B2DynamicTrees Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields B2_BIN_COUNT public const int B2_BIN_COUNT = 8 Field Value int B2_TREE_STACK_SIZE public const int B2_TREE_STACK_SIZE = 1024 Field Value int b2_defaultTreeNode public static readonly B2TreeNode b2_defaultTreeNode Field Value B2TreeNode Methods b2AllocateNode(B2DynamicTree) Allocate a node from the pool. Grow the pool if necessary. public static int b2AllocateNode(B2DynamicTree tree) Parameters tree B2DynamicTree Returns int b2BuildTree(B2DynamicTree, int) Returns root node index public static int b2BuildTree(B2DynamicTree tree, int leafCount) Parameters tree B2DynamicTree leafCount int Returns int b2DynamicTree_Create() Constructing the tree initializes the node pool. public static B2DynamicTree b2DynamicTree_Create() Returns B2DynamicTree b2DynamicTree_CreateProxy(B2DynamicTree, B2AABB, ulong, ulong) Create a proxy. Provide an AABB and a userData value. Create a proxy in the tree as a leaf node. We return the index of the node instead of a pointer so that we can grow the node pool. public static int b2DynamicTree_CreateProxy(B2DynamicTree tree, B2AABB aabb, ulong categoryBits, ulong userData) Parameters tree B2DynamicTree aabb B2AABB categoryBits ulong userData ulong Returns int b2DynamicTree_Destroy(B2DynamicTree) Destroy the tree, freeing the node pool. public static void b2DynamicTree_Destroy(B2DynamicTree tree) Parameters tree B2DynamicTree b2DynamicTree_DestroyProxy(B2DynamicTree, int) Destroy a proxy. This asserts if the id is invalid. public static void b2DynamicTree_DestroyProxy(B2DynamicTree tree, int proxyId) Parameters tree B2DynamicTree proxyId int b2DynamicTree_EnlargeProxy(B2DynamicTree, int, B2AABB) Enlarge a proxy and enlarge ancestors as necessary. public static void b2DynamicTree_EnlargeProxy(B2DynamicTree tree, int proxyId, B2AABB aabb) Parameters tree B2DynamicTree proxyId int aabb B2AABB b2DynamicTree_GetAABB(B2DynamicTree, int) public static B2AABB b2DynamicTree_GetAABB(B2DynamicTree tree, int proxyId) Parameters tree B2DynamicTree proxyId int Returns B2AABB b2DynamicTree_GetAreaRatio(B2DynamicTree) Get the ratio of the sum of the node areas to the root area. public static float b2DynamicTree_GetAreaRatio(B2DynamicTree tree) Parameters tree B2DynamicTree Returns float b2DynamicTree_GetByteCount(B2DynamicTree) public static int b2DynamicTree_GetByteCount(B2DynamicTree tree) Parameters tree B2DynamicTree Returns int b2DynamicTree_GetCategoryBits(B2DynamicTree, int) Get the category bits on a proxy. public static ulong b2DynamicTree_GetCategoryBits(B2DynamicTree tree, int proxyId) Parameters tree B2DynamicTree proxyId int Returns ulong b2DynamicTree_GetHeight(B2DynamicTree) Get the height of the binary tree. public static int b2DynamicTree_GetHeight(B2DynamicTree tree) Parameters tree B2DynamicTree Returns int b2DynamicTree_GetProxyCount(B2DynamicTree) public static int b2DynamicTree_GetProxyCount(B2DynamicTree tree) Parameters tree B2DynamicTree Returns int b2DynamicTree_GetRootBounds(B2DynamicTree) public static B2AABB b2DynamicTree_GetRootBounds(B2DynamicTree tree) Parameters tree B2DynamicTree Returns B2AABB b2DynamicTree_GetUserData(B2DynamicTree, int) public static ulong b2DynamicTree_GetUserData(B2DynamicTree tree, int proxyId) Parameters tree B2DynamicTree proxyId int Returns ulong b2DynamicTree_MoveProxy(B2DynamicTree, int, B2AABB) Move a proxy to a new AABB by removing and reinserting into the tree. public static void b2DynamicTree_MoveProxy(B2DynamicTree tree, int proxyId, B2AABB aabb) Parameters tree B2DynamicTree proxyId int aabb B2AABB b2DynamicTree_Query<T>(B2DynamicTree, B2AABB, ulong, b2TreeQueryCallbackFcn<T>, ref T) Query an AABB for overlapping proxies. The callback class is called for each proxy that overlaps the supplied AABB. @return performance data public static B2TreeStats b2DynamicTree_Query<T>(B2DynamicTree tree, B2AABB aabb, ulong maskBits, b2TreeQueryCallbackFcn<T> callback, ref T context) where T : struct Parameters tree B2DynamicTree aabb B2AABB maskBits ulong callback b2TreeQueryCallbackFcn<T> context T Returns B2TreeStats Type Parameters T b2DynamicTree_RayCast<T>(B2DynamicTree, ref B2RayCastInput, ulong, b2TreeRayCastCallbackFcn<T>, ref T) public static B2TreeStats b2DynamicTree_RayCast<T>(B2DynamicTree tree, ref B2RayCastInput input, ulong maskBits, b2TreeRayCastCallbackFcn<T> callback, ref T context) where T : struct Parameters tree B2DynamicTree input B2RayCastInput maskBits ulong callback b2TreeRayCastCallbackFcn<T> context T Returns B2TreeStats Type Parameters T b2DynamicTree_Rebuild(B2DynamicTree, bool) Rebuild the tree while retaining subtrees that haven't changed. Returns the number of boxes sorted. Not safe to access tree during this operation because it may grow public static int b2DynamicTree_Rebuild(B2DynamicTree tree, bool fullBuild) Parameters tree B2DynamicTree fullBuild bool Returns int b2DynamicTree_SetCategoryBits(B2DynamicTree, int, ulong) Modify the category bits on a proxy. This is an expensive operation. public static void b2DynamicTree_SetCategoryBits(B2DynamicTree tree, int proxyId, ulong categoryBits) Parameters tree B2DynamicTree proxyId int categoryBits ulong b2DynamicTree_ShapeCast<T>(B2DynamicTree, ref B2ShapeCastInput, ulong, b2TreeShapeCastCallbackFcn<T>, ref T) public static B2TreeStats b2DynamicTree_ShapeCast<T>(B2DynamicTree tree, ref B2ShapeCastInput input, ulong maskBits, b2TreeShapeCastCallbackFcn<T> callback, ref T context) where T : struct Parameters tree B2DynamicTree input B2ShapeCastInput maskBits ulong callback b2TreeShapeCastCallbackFcn<T> context T Returns B2TreeStats Type Parameters T b2DynamicTree_Validate(B2DynamicTree) Validate this tree. For testing. public static void b2DynamicTree_Validate(B2DynamicTree tree) Parameters tree B2DynamicTree b2DynamicTree_ValidateNoEnlarged(B2DynamicTree) Validate this tree has no enlarged AABBs. For testing. public static void b2DynamicTree_ValidateNoEnlarged(B2DynamicTree tree) Parameters tree B2DynamicTree b2FindBestSibling(B2DynamicTree, B2AABB) Suppose B (or C) is an internal node, then the lowest cost would be one of two cases: case1: D becomes a sibling of B case2: D becomes a descendant of B along with a new internal node of area(D). public static int b2FindBestSibling(B2DynamicTree tree, B2AABB boxD) Parameters tree B2DynamicTree boxD B2AABB Returns int b2FreeNode(B2DynamicTree, int) Return a node to the pool. public static void b2FreeNode(B2DynamicTree tree, int nodeId) Parameters tree B2DynamicTree nodeId int b2InsertLeaf(B2DynamicTree, int, bool) public static void b2InsertLeaf(B2DynamicTree tree, int leaf, bool shouldRotate) Parameters tree B2DynamicTree leaf int shouldRotate bool b2IsAllocated(ref B2TreeNode) public static bool b2IsAllocated(ref B2TreeNode node) Parameters node B2TreeNode Returns bool b2IsLeaf(ref B2TreeNode) public static bool b2IsLeaf(ref B2TreeNode node) Parameters node B2TreeNode Returns bool b2MaxUInt16(ushort, ushort) public static ushort b2MaxUInt16(ushort a, ushort b) Parameters a ushort b ushort Returns ushort b2PartitionMid(Span<int>, Span<B2Vec2>, int) Median split heuristic public static int b2PartitionMid(Span<int> indices, Span<B2Vec2> centers, int count) Parameters indices Span<int> centers Span<B2Vec2> count int Returns int b2PartitionSAH(int[], int[], B2AABB[], int) \"On Fast Construction of SAH-based Bounding Volume Hierarchies\" by Ingo Wald Returns the left child count public static int b2PartitionSAH(int[] indices, int[] binIndices, B2AABB[] boxes, int count) Parameters indices int[] binIndices int[] boxes B2AABB[] count int Returns int b2RemoveLeaf(B2DynamicTree, int) public static void b2RemoveLeaf(B2DynamicTree tree, int leaf) Parameters tree B2DynamicTree leaf int b2RotateNodes(B2DynamicTree, int) Perform a left or right rotation if node A is imbalanced. Returns the new root index. public static void b2RotateNodes(B2DynamicTree tree, int iA) Parameters tree B2DynamicTree iA int"
  },
  "api/Box2D.NET.B2ExplosionContext.html": {
    "href": "api/Box2D.NET.B2ExplosionContext.html",
    "title": "Struct B2ExplosionContext | Box2D API",
    "keywords": "Struct B2ExplosionContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ExplosionContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2ExplosionContext(B2World, B2Vec2, float, float, float) public B2ExplosionContext(B2World world, B2Vec2 position, float radius, float falloff, float impulsePerLength) Parameters world B2World position B2Vec2 radius float falloff float impulsePerLength float Fields falloff public float falloff Field Value float impulsePerLength public float impulsePerLength Field Value float position public B2Vec2 position Field Value B2Vec2 radius public float radius Field Value float world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2ExplosionDef.html": {
    "href": "api/Box2D.NET.B2ExplosionDef.html",
    "title": "Struct B2ExplosionDef | Box2D API",
    "keywords": "Struct B2ExplosionDef Namespace Box2D.NET Assembly Box2D.NET.dll The explosion definition is used to configure options for explosions. Explosions consider shape geometry when computing the impulse. @ingroup world public struct B2ExplosionDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields falloff The falloff distance beyond the radius. Impulse is reduced to zero at this distance. public float falloff Field Value float impulsePerLength Impulse per unit length. This applies an impulse according to the shape perimeter that is facing the explosion. Explosions only apply to circles, capsules, and polygons. This may be negative for implosions. public float impulsePerLength Field Value float maskBits Mask bits to filter shapes public ulong maskBits Field Value ulong position The center of the explosion in world space public B2Vec2 position Field Value B2Vec2 radius The radius of the explosion public float radius Field Value float"
  },
  "api/Box2D.NET.B2Filter.html": {
    "href": "api/Box2D.NET.B2Filter.html",
    "title": "Struct B2Filter | Box2D API",
    "keywords": "Struct B2Filter Namespace Box2D.NET Assembly Box2D.NET.dll This is used to filter collision on shapes. It affects shape-vs-shape collision and shape-versus-query collision (such as b2World_CastRay). @ingroup shape public struct B2Filter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Filter(ulong, ulong, int) public B2Filter(ulong categoryBits, ulong maskBits, int groupIndex) Parameters categoryBits ulong maskBits ulong groupIndex int Fields categoryBits The collision category bits. Normally you would just set one bit. The category bits should represent your application object types. For example: @code{.cpp} enum MyCategories { Static = 0x00000001, Dynamic = 0x00000002, Debris = 0x00000004, Player = 0x00000008, // etc }; @endcode public ulong categoryBits Field Value ulong groupIndex Collision groups allow a certain group of objects to never collide (negative) or always collide (positive). A group index of zero has no effect. Non-zero group filtering always wins against the mask bits. For example, you may want ragdolls to collide with other ragdolls but you don't want ragdoll self-collision. In this case you would give each ragdoll a unique negative group index and apply that group index to all shapes on the ragdoll. public int groupIndex Field Value int maskBits The collision mask bits. This states the categories that this shape would accept for collision. For example, you may want your player to only collide with static objects and other players. @code{.c} maskBits = Static | Player; @endcode public ulong maskBits Field Value ulong"
  },
  "api/Box2D.NET.B2FixedArray1-1.html": {
    "href": "api/Box2D.NET.B2FixedArray1-1.html",
    "title": "Struct B2FixedArray1<T> | Box2D API",
    "keywords": "Struct B2FixedArray1<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray1<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 1 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray1024-1.html": {
    "href": "api/Box2D.NET.B2FixedArray1024-1.html",
    "title": "Struct B2FixedArray1024<T> | Box2D API",
    "keywords": "Struct B2FixedArray1024<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray1024<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 1024 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray11-1.html": {
    "href": "api/Box2D.NET.B2FixedArray11-1.html",
    "title": "Struct B2FixedArray11<T> | Box2D API",
    "keywords": "Struct B2FixedArray11<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray11<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 11 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray12-1.html": {
    "href": "api/Box2D.NET.B2FixedArray12-1.html",
    "title": "Struct B2FixedArray12<T> | Box2D API",
    "keywords": "Struct B2FixedArray12<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray12<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 12 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray16-1.html": {
    "href": "api/Box2D.NET.B2FixedArray16-1.html",
    "title": "Struct B2FixedArray16<T> | Box2D API",
    "keywords": "Struct B2FixedArray16<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray16<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 16 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray2-1.html": {
    "href": "api/Box2D.NET.B2FixedArray2-1.html",
    "title": "Struct B2FixedArray2<T> | Box2D API",
    "keywords": "Struct B2FixedArray2<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray2<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2FixedArray2(T, T) public B2FixedArray2(T v0000, T v0001) Parameters v0000 T v0001 T Fields Size public const int Size = 2 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray3-1.html": {
    "href": "api/Box2D.NET.B2FixedArray3-1.html",
    "title": "Struct B2FixedArray3<T> | Box2D API",
    "keywords": "Struct B2FixedArray3<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray3<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 3 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray4-1.html": {
    "href": "api/Box2D.NET.B2FixedArray4-1.html",
    "title": "Struct B2FixedArray4<T> | Box2D API",
    "keywords": "Struct B2FixedArray4<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray4<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 4 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray64-1.html": {
    "href": "api/Box2D.NET.B2FixedArray64-1.html",
    "title": "Struct B2FixedArray64<T> | Box2D API",
    "keywords": "Struct B2FixedArray64<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray64<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 64 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray7-1.html": {
    "href": "api/Box2D.NET.B2FixedArray7-1.html",
    "title": "Struct B2FixedArray7<T> | Box2D API",
    "keywords": "Struct B2FixedArray7<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray7<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 7 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FixedArray8-1.html": {
    "href": "api/Box2D.NET.B2FixedArray8-1.html",
    "title": "Struct B2FixedArray8<T> | Box2D API",
    "keywords": "Struct B2FixedArray8<T> Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FixedArray8<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Size public const int Size = 8 Field Value int Properties this[int] public ref T this[int index] { get; } Parameters index int Property Value T Length public int Length { get; } Property Value int Methods AsSpan() public Span<T> AsSpan() Returns Span<T>"
  },
  "api/Box2D.NET.B2FloatW.html": {
    "href": "api/Box2D.NET.B2FloatW.html",
    "title": "Struct B2FloatW | Box2D API",
    "keywords": "Struct B2FloatW Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2FloatW Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2FloatW(float, float, float, float) public B2FloatW(float x, float y, float z, float w) Parameters x float y float z float w float Fields W public float W Field Value float X public float X Field Value float Y public float Y Field Value float Z public float Z Field Value float Properties this[int] public ref float this[int index] { get; } Parameters index int Property Value float Methods AsSpan() public Span<float> AsSpan() Returns Span<float>"
  },
  "api/Box2D.NET.B2Geometries.html": {
    "href": "api/Box2D.NET.B2Geometries.html",
    "title": "Class B2Geometries | Box2D API",
    "keywords": "Class B2Geometries Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Geometries Inheritance object B2Geometries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2CollideMoverAndCapsule(ref B2Capsule, ref B2Capsule) public static B2PlaneResult b2CollideMoverAndCapsule(ref B2Capsule shape, ref B2Capsule mover) Parameters shape B2Capsule mover B2Capsule Returns B2PlaneResult b2CollideMoverAndCircle(ref B2Circle, ref B2Capsule) public static B2PlaneResult b2CollideMoverAndCircle(ref B2Circle shape, ref B2Capsule mover) Parameters shape B2Circle mover B2Capsule Returns B2PlaneResult b2CollideMoverAndPolygon(ref B2Polygon, ref B2Capsule) public static B2PlaneResult b2CollideMoverAndPolygon(ref B2Polygon shape, ref B2Capsule mover) Parameters shape B2Polygon mover B2Capsule Returns B2PlaneResult b2CollideMoverAndSegment(ref B2Segment, ref B2Capsule) public static B2PlaneResult b2CollideMoverAndSegment(ref B2Segment shape, ref B2Capsule mover) Parameters shape B2Segment mover B2Capsule Returns B2PlaneResult b2ComputeCapsuleAABB(ref B2Capsule, B2Transform) Compute the bounding box of a transformed capsule public static B2AABB b2ComputeCapsuleAABB(ref B2Capsule shape, B2Transform xf) Parameters shape B2Capsule xf B2Transform Returns B2AABB b2ComputeCapsuleMass(ref B2Capsule, float) Compute mass properties of a capsule public static B2MassData b2ComputeCapsuleMass(ref B2Capsule shape, float density) Parameters shape B2Capsule density float Returns B2MassData b2ComputeCircleAABB(ref B2Circle, B2Transform) Compute the bounding box of a transformed circle public static B2AABB b2ComputeCircleAABB(ref B2Circle shape, B2Transform xf) Parameters shape B2Circle xf B2Transform Returns B2AABB b2ComputeCircleMass(ref B2Circle, float) Compute mass properties of a circle public static B2MassData b2ComputeCircleMass(ref B2Circle shape, float density) Parameters shape B2Circle density float Returns B2MassData b2ComputePolygonAABB(ref B2Polygon, B2Transform) Compute the bounding box of a transformed polygon public static B2AABB b2ComputePolygonAABB(ref B2Polygon shape, B2Transform xf) Parameters shape B2Polygon xf B2Transform Returns B2AABB b2ComputePolygonCentroid(ReadOnlySpan<B2Vec2>, int) public static B2Vec2 b2ComputePolygonCentroid(ReadOnlySpan<B2Vec2> vertices, int count) Parameters vertices ReadOnlySpan<B2Vec2> count int Returns B2Vec2 b2ComputePolygonMass(ref B2Polygon, float) Compute mass properties of a polygon public static B2MassData b2ComputePolygonMass(ref B2Polygon shape, float density) Parameters shape B2Polygon density float Returns B2MassData b2ComputeSegmentAABB(ref B2Segment, B2Transform) Compute the bounding box of a transformed line segment public static B2AABB b2ComputeSegmentAABB(ref B2Segment shape, B2Transform xf) Parameters shape B2Segment xf B2Transform Returns B2AABB b2IsValidRay(ref B2RayCastInput) Validate ray cast input data (NaN, etc) public static bool b2IsValidRay(ref B2RayCastInput input) Parameters input B2RayCastInput Returns bool b2MakeBox(float, float) Make a box (rectangle) polygon, bypassing the need for a convex hull. @param halfWidth the half-width (x-axis) @param halfHeight the half-height (y-axis) public static B2Polygon b2MakeBox(float halfWidth, float halfHeight) Parameters halfWidth float halfHeight float Returns B2Polygon b2MakeOffsetBox(float, float, B2Vec2, B2Rot) Make an offset box, bypassing the need for a convex hull. @param halfWidth the half-width (x-axis) @param halfHeight the half-height (y-axis) @param center the local center of the box @param rotation the local rotation of the box public static B2Polygon b2MakeOffsetBox(float halfWidth, float halfHeight, B2Vec2 center, B2Rot rotation) Parameters halfWidth float halfHeight float center B2Vec2 rotation B2Rot Returns B2Polygon b2MakeOffsetPolygon(ref B2Hull, B2Vec2, B2Rot) Make an offset convex polygon from a convex hull. This will assert if the hull is not valid. @warning Do not manually fill in the hull data, it must come directly from b2ComputeHull public static B2Polygon b2MakeOffsetPolygon(ref B2Hull hull, B2Vec2 position, B2Rot rotation) Parameters hull B2Hull position B2Vec2 rotation B2Rot Returns B2Polygon b2MakeOffsetRoundedBox(float, float, B2Vec2, B2Rot, float) Make an offset rounded box, bypassing the need for a convex hull. @param halfWidth the half-width (x-axis) @param halfHeight the half-height (y-axis) @param center the local center of the box @param rotation the local rotation of the box @param radius the radius of the rounded extension public static B2Polygon b2MakeOffsetRoundedBox(float halfWidth, float halfHeight, B2Vec2 center, B2Rot rotation, float radius) Parameters halfWidth float halfHeight float center B2Vec2 rotation B2Rot radius float Returns B2Polygon b2MakeOffsetRoundedPolygon(ref B2Hull, B2Vec2, B2Rot, float) Make an offset convex polygon from a convex hull. This will assert if the hull is not valid. @warning Do not manually fill in the hull data, it must come directly from b2ComputeHull public static B2Polygon b2MakeOffsetRoundedPolygon(ref B2Hull hull, B2Vec2 position, B2Rot rotation, float radius) Parameters hull B2Hull position B2Vec2 rotation B2Rot radius float Returns B2Polygon b2MakePolygon(ref B2Hull, float) Make a convex polygon from a convex hull. This will assert if the hull is not valid. @warning Do not manually fill in the hull data, it must come directly from b2ComputeHull public static B2Polygon b2MakePolygon(ref B2Hull hull, float radius) Parameters hull B2Hull radius float Returns B2Polygon b2MakeRoundedBox(float, float, float) Make a rounded box, bypassing the need for a convex hull. @param halfWidth the half-width (x-axis) @param halfHeight the half-height (y-axis) @param radius the radius of the rounded extension public static B2Polygon b2MakeRoundedBox(float halfWidth, float halfHeight, float radius) Parameters halfWidth float halfHeight float radius float Returns B2Polygon b2MakeSquare(float) Make a square polygon, bypassing the need for a convex hull. @param halfWidth the half-width public static B2Polygon b2MakeSquare(float halfWidth) Parameters halfWidth float Returns B2Polygon b2PointInCapsule(B2Vec2, ref B2Capsule) Test a point for overlap with a capsule in local space public static bool b2PointInCapsule(B2Vec2 point, ref B2Capsule shape) Parameters point B2Vec2 shape B2Capsule Returns bool b2PointInCircle(B2Vec2, ref B2Circle) Test a point for overlap with a circle in local space public static bool b2PointInCircle(B2Vec2 point, ref B2Circle shape) Parameters point B2Vec2 shape B2Circle Returns bool b2PointInPolygon(B2Vec2, ref B2Polygon) Test a point for overlap with a convex polygon in local space public static bool b2PointInPolygon(B2Vec2 point, ref B2Polygon shape) Parameters point B2Vec2 shape B2Polygon Returns bool b2RayCastCapsule(ref B2RayCastInput, ref B2Capsule) Ray cast versus capsule shape in local space. Initial overlap is treated as a miss. public static B2CastOutput b2RayCastCapsule(ref B2RayCastInput input, ref B2Capsule shape) Parameters input B2RayCastInput shape B2Capsule Returns B2CastOutput b2RayCastCircle(ref B2RayCastInput, ref B2Circle) Ray cast versus circle shape in local space. Initial overlap is treated as a miss. Precision Improvements for Ray / Sphere Intersection - Ray Tracing Gems 2019 http://www.codercorner.com/blog/?p=321 public static B2CastOutput b2RayCastCircle(ref B2RayCastInput input, ref B2Circle shape) Parameters input B2RayCastInput shape B2Circle Returns B2CastOutput b2RayCastPolygon(ref B2RayCastInput, ref B2Polygon) Ray cast versus polygon shape in local space. Initial overlap is treated as a miss. public static B2CastOutput b2RayCastPolygon(ref B2RayCastInput input, ref B2Polygon shape) Parameters input B2RayCastInput shape B2Polygon Returns B2CastOutput b2RayCastSegment(ref B2RayCastInput, ref B2Segment, bool) Ray cast versus segment shape in local space. Optionally treat the segment as one-sided with hits from the left side being treated as a miss. Ray vs line segment public static B2CastOutput b2RayCastSegment(ref B2RayCastInput input, ref B2Segment shape, bool oneSided) Parameters input B2RayCastInput shape B2Segment oneSided bool Returns B2CastOutput b2ShapeCastCapsule(ref B2ShapeCastInput, ref B2Capsule) Shape cast versus a capsule. Initial overlap is treated as a miss. public static B2CastOutput b2ShapeCastCapsule(ref B2ShapeCastInput input, ref B2Capsule shape) Parameters input B2ShapeCastInput shape B2Capsule Returns B2CastOutput b2ShapeCastCircle(ref B2ShapeCastInput, ref B2Circle) Shape cast versus a circle. Initial overlap is treated as a miss. public static B2CastOutput b2ShapeCastCircle(ref B2ShapeCastInput input, ref B2Circle shape) Parameters input B2ShapeCastInput shape B2Circle Returns B2CastOutput b2ShapeCastPolygon(ref B2ShapeCastInput, ref B2Polygon) Shape cast versus a convex polygon. Initial overlap is treated as a miss. public static B2CastOutput b2ShapeCastPolygon(ref B2ShapeCastInput input, ref B2Polygon shape) Parameters input B2ShapeCastInput shape B2Polygon Returns B2CastOutput b2ShapeCastSegment(ref B2ShapeCastInput, ref B2Segment) Shape cast versus a line segment. Initial overlap is treated as a miss. public static B2CastOutput b2ShapeCastSegment(ref B2ShapeCastInput input, ref B2Segment shape) Parameters input B2ShapeCastInput shape B2Segment Returns B2CastOutput b2TransformPolygon(B2Transform, ref B2Polygon) Transform a polygon. This is useful for transferring a shape from one body to another. public static B2Polygon b2TransformPolygon(B2Transform transform, ref B2Polygon polygon) Parameters transform B2Transform polygon B2Polygon Returns B2Polygon"
  },
  "api/Box2D.NET.B2GraphColor.html": {
    "href": "api/Box2D.NET.B2GraphColor.html",
    "title": "Struct B2GraphColor | Box2D API",
    "keywords": "Struct B2GraphColor Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2GraphColor Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodySet This bitset is indexed by bodyId so this is over-sized to encompass static bodies however I never traverse these bits or use the bit count for anything This bitset is unused on the overflow color. todo consider having a uint_16 per body that tracks the graph color membership public B2BitSet bodySet Field Value B2BitSet contactSims cache friendly arrays public B2Array<B2ContactSim> contactSims Field Value B2Array<B2ContactSim> jointSims public B2Array<B2JointSim> jointSims Field Value B2Array<B2JointSim> overflowConstraints public ArraySegment<B2ContactConstraint> overflowConstraints Field Value ArraySegment<B2ContactConstraint> simdConstraints public ArraySegment<B2ContactConstraintSIMD> simdConstraints Field Value ArraySegment<B2ContactConstraintSIMD>"
  },
  "api/Box2D.NET.B2HashSet.html": {
    "href": "api/Box2D.NET.B2HashSet.html",
    "title": "Struct B2HashSet | Box2D API",
    "keywords": "Struct B2HashSet Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2HashSet Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields capacity public int capacity Field Value int count public uint count Field Value uint items public B2SetItem[] items Field Value B2SetItem[]"
  },
  "api/Box2D.NET.B2HexColor.html": {
    "href": "api/Box2D.NET.B2HexColor.html",
    "title": "Enum B2HexColor | Box2D API",
    "keywords": "Enum B2HexColor Namespace Box2D.NET Assembly Box2D.NET.dll These colors are used for debug draw and mostly match the named SVG colors. See https://www.rapidtables.com/web/color/index.html https://johndecember.com/html/spec/colorsvg.html https://upload.wikimedia.org/wikipedia/commons/2/2b/SVG_Recognized_color_keyword_names.svg public enum B2HexColor Fields b2_colorAliceBlue = 15792383 b2_colorAntiqueWhite = 16444375 b2_colorAqua = 65535 b2_colorAquamarine = 8388564 b2_colorAzure = 15794175 b2_colorBeige = 16119260 b2_colorBisque = 16770244 b2_colorBlack = 0 b2_colorBlanchedAlmond = 16772045 b2_colorBlue = 255 b2_colorBlueViolet = 9055202 b2_colorBox2DBlue = 3190463 b2_colorBox2DGreen = 9226532 b2_colorBox2DRed = 14430514 b2_colorBox2DYellow = 16772748 b2_colorBrown = 10824234 b2_colorBurlywood = 14596231 b2_colorCadetBlue = 6266528 b2_colorChartreuse = 8388352 b2_colorChocolate = 13789470 b2_colorCoral = 16744272 b2_colorCornflowerBlue = 6591981 b2_colorCornsilk = 16775388 b2_colorCrimson = 14423100 b2_colorCyan = 65535 b2_colorDarkBlue = 139 b2_colorDarkCyan = 35723 b2_colorDarkGoldenRod = 12092939 b2_colorDarkGray = 11119017 b2_colorDarkGreen = 25600 b2_colorDarkKhaki = 12433259 b2_colorDarkMagenta = 9109643 b2_colorDarkOliveGreen = 5597999 b2_colorDarkOrange = 16747520 b2_colorDarkOrchid = 10040012 b2_colorDarkRed = 9109504 b2_colorDarkSalmon = 15308410 b2_colorDarkSeaGreen = 9419919 b2_colorDarkSlateBlue = 4734347 b2_colorDarkSlateGray = 3100495 b2_colorDarkTurquoise = 52945 b2_colorDarkViolet = 9699539 b2_colorDeepPink = 16716947 b2_colorDeepSkyBlue = 49151 b2_colorDimGray = 6908265 b2_colorDodgerBlue = 2003199 b2_colorFireBrick = 11674146 b2_colorFloralWhite = 16775920 b2_colorForestGreen = 2263842 b2_colorFuchsia = 16711935 b2_colorGainsboro = 14474460 b2_colorGhostWhite = 16316671 b2_colorGold = 16766720 b2_colorGoldenRod = 14329120 b2_colorGray = 8421504 b2_colorGreen = 32768 b2_colorGreenYellow = 11403055 b2_colorHoneyDew = 15794160 b2_colorHotPink = 16738740 b2_colorIndianRed = 13458524 b2_colorIndigo = 4915330 b2_colorIvory = 16777200 b2_colorKhaki = 15787660 b2_colorLavender = 15132410 b2_colorLavenderBlush = 16773365 b2_colorLawnGreen = 8190976 b2_colorLemonChiffon = 16775885 b2_colorLightBlue = 11393254 b2_colorLightCoral = 15761536 b2_colorLightCyan = 14745599 b2_colorLightGoldenRodYellow = 16448210 b2_colorLightGray = 13882323 b2_colorLightGreen = 9498256 b2_colorLightPink = 16758465 b2_colorLightSalmon = 16752762 b2_colorLightSeaGreen = 2142890 b2_colorLightSkyBlue = 8900346 b2_colorLightSlateGray = 7833753 b2_colorLightSteelBlue = 11584734 b2_colorLightYellow = 16777184 b2_colorLime = 65280 b2_colorLimeGreen = 3329330 b2_colorLinen = 16445670 b2_colorMagenta = 16711935 b2_colorMaroon = 8388608 b2_colorMediumAquaMarine = 6737322 b2_colorMediumBlue = 205 b2_colorMediumOrchid = 12211667 b2_colorMediumPurple = 9662683 b2_colorMediumSeaGreen = 3978097 b2_colorMediumSlateBlue = 8087790 b2_colorMediumSpringGreen = 64154 b2_colorMediumTurquoise = 4772300 b2_colorMediumVioletRed = 13047173 b2_colorMidnightBlue = 1644912 b2_colorMintCream = 16121850 b2_colorMistyRose = 16770273 b2_colorMoccasin = 16770229 b2_colorNavajoWhite = 16768685 b2_colorNavy = 128 b2_colorOldLace = 16643558 b2_colorOlive = 8421376 b2_colorOliveDrab = 7048739 b2_colorOrange = 16753920 b2_colorOrangeRed = 16729344 b2_colorOrchid = 14315734 b2_colorPaleGoldenRod = 15657130 b2_colorPaleGreen = 10025880 b2_colorPaleTurquoise = 11529966 b2_colorPaleVioletRed = 14381203 b2_colorPapayaWhip = 16773077 b2_colorPeachPuff = 16767673 b2_colorPeru = 13468991 b2_colorPink = 16761035 b2_colorPlum = 14524637 b2_colorPowderBlue = 11591910 b2_colorPurple = 8388736 b2_colorRebeccaPurple = 6697881 b2_colorRed = 16711680 b2_colorRosyBrown = 12357519 b2_colorRoyalBlue = 4286945 b2_colorSaddleBrown = 9127187 b2_colorSalmon = 16416882 b2_colorSandyBrown = 16032864 b2_colorSeaGreen = 3050327 b2_colorSeaShell = 16774638 b2_colorSienna = 10506797 b2_colorSilver = 12632256 b2_colorSkyBlue = 8900331 b2_colorSlateBlue = 6970061 b2_colorSlateGray = 7372944 b2_colorSnow = 16775930 b2_colorSpringGreen = 65407 b2_colorSteelBlue = 4620980 b2_colorTan = 13808780 b2_colorTeal = 32896 b2_colorThistle = 14204888 b2_colorTomato = 16737095 b2_colorTurquoise = 4251856 b2_colorViolet = 15631086 b2_colorWheat = 16113331 b2_colorWhite = 16777215 b2_colorWhiteSmoke = 16119285 b2_colorYellow = 16776960 b2_colorYellowGreen = 10145074"
  },
  "api/Box2D.NET.B2Hull.html": {
    "href": "api/Box2D.NET.B2Hull.html",
    "title": "Struct B2Hull | Box2D API",
    "keywords": "Struct B2Hull Namespace Box2D.NET Assembly Box2D.NET.dll A convex hull. Used to create convex polygons. @warning Do not modify these values directly, instead use b2ComputeHull() public struct B2Hull Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields count The number of points public int count Field Value int points The final points of the hull public B2FixedArray8<B2Vec2> points Field Value B2FixedArray8<B2Vec2>"
  },
  "api/Box2D.NET.B2Hulls.html": {
    "href": "api/Box2D.NET.B2Hulls.html",
    "title": "Class B2Hulls | Box2D API",
    "keywords": "Class B2Hulls Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Hulls Inheritance object B2Hulls Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2ComputeHull(ReadOnlySpan<B2Vec2>, int) Compute the convex hull of a set of points. Returns an empty hull if it fails. Some failure cases: all points very close together all points on a line less than 3 points more than B2_MAX_POLYGON_VERTICES points This welds close points and removes collinear points. @warning Do not modify a hull once it has been computed quickhull algorithm merges vertices based on B2_LINEAR_SLOP removes collinear points using B2_LINEAR_SLOP returns an empty hull if it fails public static B2Hull b2ComputeHull(ReadOnlySpan<B2Vec2> points, int count) Parameters points ReadOnlySpan<B2Vec2> count int Returns B2Hull b2RecurseHull(B2Vec2, B2Vec2, Span<B2Vec2>, int) quickhull recursion public static B2Hull b2RecurseHull(B2Vec2 p1, B2Vec2 p2, Span<B2Vec2> ps, int count) Parameters p1 B2Vec2 p2 B2Vec2 ps Span<B2Vec2> count int Returns B2Hull b2ValidateHull(ref B2Hull) This determines if a hull is valid. Checks for: convexity collinear points This is expensive and should not be called at runtime. public static bool b2ValidateHull(ref B2Hull hull) Parameters hull B2Hull Returns bool"
  },
  "api/Box2D.NET.B2IdPool.html": {
    "href": "api/Box2D.NET.B2IdPool.html",
    "title": "Class B2IdPool | Box2D API",
    "keywords": "Class B2IdPool Namespace Box2D.NET Assembly Box2D.NET.dll public class B2IdPool Inheritance object B2IdPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields freeArray public B2Array<int> freeArray Field Value B2Array<int> nextIndex public int nextIndex Field Value int Methods Clear() public void Clear()"
  },
  "api/Box2D.NET.B2IdPools.html": {
    "href": "api/Box2D.NET.B2IdPools.html",
    "title": "Class B2IdPools | Box2D API",
    "keywords": "Class B2IdPools Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2IdPools Inheritance object B2IdPools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2AllocId(B2IdPool) public static int b2AllocId(B2IdPool pool) Parameters pool B2IdPool Returns int b2CreateIdPool() public static B2IdPool b2CreateIdPool() Returns B2IdPool b2DestroyIdPool(ref B2IdPool) public static void b2DestroyIdPool(ref B2IdPool pool) Parameters pool B2IdPool b2FreeId(B2IdPool, int) public static void b2FreeId(B2IdPool pool, int id) Parameters pool B2IdPool id int b2GetIdBytes(B2IdPool) public static int b2GetIdBytes(B2IdPool pool) Parameters pool B2IdPool Returns int b2GetIdCapacity(B2IdPool) public static int b2GetIdCapacity(B2IdPool pool) Parameters pool B2IdPool Returns int b2GetIdCount(B2IdPool) public static int b2GetIdCount(B2IdPool pool) Parameters pool B2IdPool Returns int b2ValidateFreeId(B2IdPool, int) public static void b2ValidateFreeId(B2IdPool pool, int id) Parameters pool B2IdPool id int b2ValidateUsedId(B2IdPool, int) public static void b2ValidateUsedId(B2IdPool pool, int id) Parameters pool B2IdPool id int"
  },
  "api/Box2D.NET.B2Ids.html": {
    "href": "api/Box2D.NET.B2Ids.html",
    "title": "Class B2Ids | Box2D API",
    "keywords": "Class B2Ids Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Ids Inheritance object B2Ids Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields b2_nullBodyId public static readonly B2BodyId b2_nullBodyId Field Value B2BodyId b2_nullChainId public static readonly B2ChainId b2_nullChainId Field Value B2ChainId b2_nullJointId public static readonly B2JointId b2_nullJointId Field Value B2JointId b2_nullShapeId public static readonly B2ShapeId b2_nullShapeId Field Value B2ShapeId b2_nullWorldId Use these to make your identifiers null. You may also use zero initialization to get null. public static readonly B2WorldId b2_nullWorldId Field Value B2WorldId Methods B2_ID_EQUALS(B2BodyId, B2BodyId) public static bool B2_ID_EQUALS(B2BodyId id1, B2BodyId id2) Parameters id1 B2BodyId id2 B2BodyId Returns bool B2_ID_EQUALS(B2ShapeId, B2ShapeId) public static bool B2_ID_EQUALS(B2ShapeId id1, B2ShapeId id2) Parameters id1 B2ShapeId id2 B2ShapeId Returns bool B2_IS_NON_NULL(B2BodyId) public static bool B2_IS_NON_NULL(B2BodyId id) Parameters id B2BodyId Returns bool B2_IS_NON_NULL(B2ChainId) public static bool B2_IS_NON_NULL(B2ChainId id) Parameters id B2ChainId Returns bool B2_IS_NON_NULL(B2JointId) public static bool B2_IS_NON_NULL(B2JointId id) Parameters id B2JointId Returns bool B2_IS_NON_NULL(B2ShapeId) public static bool B2_IS_NON_NULL(B2ShapeId id) Parameters id B2ShapeId Returns bool B2_IS_NON_NULL(B2WorldId) public static bool B2_IS_NON_NULL(B2WorldId id) Parameters id B2WorldId Returns bool B2_IS_NULL(B2BodyId) public static bool B2_IS_NULL(B2BodyId id) Parameters id B2BodyId Returns bool B2_IS_NULL(B2ChainId) public static bool B2_IS_NULL(B2ChainId id) Parameters id B2ChainId Returns bool B2_IS_NULL(B2JointId) public static bool B2_IS_NULL(B2JointId id) Parameters id B2JointId Returns bool B2_IS_NULL(B2ShapeId) public static bool B2_IS_NULL(B2ShapeId id) Parameters id B2ShapeId Returns bool B2_IS_NULL(B2WorldId) public static bool B2_IS_NULL(B2WorldId id) Parameters id B2WorldId Returns bool b2LoadBodyId(ulong) public static B2BodyId b2LoadBodyId(ulong x) Parameters x ulong Returns B2BodyId b2LoadChainId(ulong) public static B2ChainId b2LoadChainId(ulong x) Parameters x ulong Returns B2ChainId b2LoadJointId(ulong) public static B2JointId b2LoadJointId(ulong x) Parameters x ulong Returns B2JointId b2LoadShapeId(ulong) public static B2ShapeId b2LoadShapeId(ulong x) Parameters x ulong Returns B2ShapeId b2StoreBodyId(B2BodyId) public static ulong b2StoreBodyId(B2BodyId id) Parameters id B2BodyId Returns ulong b2StoreChainId(B2ChainId) public static ulong b2StoreChainId(B2ChainId id) Parameters id B2ChainId Returns ulong b2StoreJointId(B2JointId) public static ulong b2StoreJointId(B2JointId id) Parameters id B2JointId Returns ulong b2StoreShapeId(B2ShapeId) public static ulong b2StoreShapeId(B2ShapeId id) Parameters id B2ShapeId Returns ulong"
  },
  "api/Box2D.NET.B2Island.html": {
    "href": "api/Box2D.NET.B2Island.html",
    "title": "Class B2Island | Box2D API",
    "keywords": "Class B2Island Namespace Box2D.NET Assembly Box2D.NET.dll Persistent island for awake bodies, joints, and contacts https://en.wikipedia.org/wiki/Component_(graph_theory) https://en.wikipedia.org/wiki/Dynamic_connectivity map from int to solver set and index public class B2Island Inheritance object B2Island Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields bodyCount public int bodyCount Field Value int constraintRemoveCount Keeps track of how many contacts have been removed from this island. This is used to determine if an island is a candidate for splitting. public int constraintRemoveCount Field Value int contactCount public int contactCount Field Value int headBody public int headBody Field Value int headContact public int headContact Field Value int headJoint public int headJoint Field Value int islandId public int islandId Field Value int jointCount public int jointCount Field Value int localIndex island index within set may be B2_NULL_INDEX public int localIndex Field Value int parentIsland Union find todo this could go away if islands are merged immediately with b2LinkJoint and b2LinkContact public int parentIsland Field Value int setIndex index of solver set stored in b2World may be B2_NULL_INDEX public int setIndex Field Value int tailBody public int tailBody Field Value int tailContact public int tailContact Field Value int tailJoint public int tailJoint Field Value int"
  },
  "api/Box2D.NET.B2IslandSim.html": {
    "href": "api/Box2D.NET.B2IslandSim.html",
    "title": "Class B2IslandSim | Box2D API",
    "keywords": "Class B2IslandSim Namespace Box2D.NET Assembly Box2D.NET.dll This is used to move islands across solver sets public class B2IslandSim Inheritance object B2IslandSim Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields islandId public int islandId Field Value int Methods CopyFrom(B2IslandSim) public void CopyFrom(B2IslandSim other) Parameters other B2IslandSim"
  },
  "api/Box2D.NET.B2Islands.html": {
    "href": "api/Box2D.NET.B2Islands.html",
    "title": "Class B2Islands | Box2D API",
    "keywords": "Class B2Islands Namespace Box2D.NET Assembly Box2D.NET.dll Collide all awake contacts Use bit array to emit start/stop touching events in defined order, per thread. Try using contact index, assuming contacts are created in a deterministic order. bit-wise OR together bit arrays and issue changes: start touching: merge islands - temporary linked list - mark root island dirty - wake all - largest island is root stop touching: increment constraintRemoveCount public static class B2Islands Inheritance object B2Islands Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields B2_CONTACT_REMOVE_THRESHOLD public const int B2_CONTACT_REMOVE_THRESHOLD = 1 Field Value int Methods b2AddContactToIsland(B2World, int, B2Contact) public static void b2AddContactToIsland(B2World world, int islandId, B2Contact contact) Parameters world B2World islandId int contact B2Contact b2AddJointToIsland(B2World, int, B2Joint) public static void b2AddJointToIsland(B2World world, int islandId, B2Joint joint) Parameters world B2World islandId int joint B2Joint b2CreateIsland(B2World, int) public static B2Island b2CreateIsland(B2World world, int setIndex) Parameters world B2World setIndex int Returns B2Island b2DestroyIsland(B2World, int) public static void b2DestroyIsland(B2World world, int islandId) Parameters world B2World islandId int b2LinkContact(B2World, B2Contact) Link contacts into the island graph when it starts having contact points Link a contact into an island. This performs union-find and path compression to join islands. https://en.wikipedia.org/wiki/Disjoint-set_data_structure public static void b2LinkContact(B2World world, B2Contact contact) Parameters world B2World contact B2Contact b2LinkJoint(B2World, B2Joint, bool) Link a joint into the island graph when it is created public static void b2LinkJoint(B2World world, B2Joint joint, bool mergeIslands) Parameters world B2World joint B2Joint mergeIslands bool b2MergeAwakeIslands(B2World) Iterate over all awake islands and merge any that need merging Islands that get merged into a root island will be removed from the awake island array and returned to the pool. todo this might be faster if b2IslandSim held the connectivity data public static void b2MergeAwakeIslands(B2World world) Parameters world B2World b2MergeIsland(B2World, B2Island) Merge an island into its root island. todo we can assume all islands are awake here public static void b2MergeIsland(B2World world, B2Island island) Parameters world B2World island B2Island b2SplitIsland(B2World, int) public static void b2SplitIsland(B2World world, int baseId) Parameters world B2World baseId int b2SplitIslandTask(int, int, uint, object) Split an island because some contacts and/or joints have been removed. This is called during the constraint solve while islands are not being touched. This uses DFS and touches a lot of memory, so it can be quite slow. Note: contacts/joints connected to static bodies must belong to an island but don't affect island connectivity Note: static bodies are never in an island Note: this task interacts with some allocators without locks under the assumption that no other tasks are interacting with these data structures. public static void b2SplitIslandTask(int startIndex, int endIndex, uint threadIndex, object context) Parameters startIndex int endIndex int threadIndex uint context object b2UnlinkContact(B2World, B2Contact) Unlink contact from the island graph when it stops having contact points This is called when a contact no longer has contact points or when a contact is destroyed. public static void b2UnlinkContact(B2World world, B2Contact contact) Parameters world B2World contact B2Contact b2UnlinkJoint(B2World, B2Joint) Unlink a joint from the island graph when it is destroyed public static void b2UnlinkJoint(B2World world, B2Joint joint) Parameters world B2World joint B2Joint b2ValidateIsland(B2World, int) public static void b2ValidateIsland(B2World world, int islandId) Parameters world B2World islandId int"
  },
  "api/Box2D.NET.B2Joint.html": {
    "href": "api/Box2D.NET.B2Joint.html",
    "title": "Class B2Joint | Box2D API",
    "keywords": "Class B2Joint Namespace Box2D.NET Assembly Box2D.NET.dll Map from b2JointId to b2Joint in the solver sets public class B2Joint Inheritance object B2Joint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields collideConnected public bool collideConnected Field Value bool colorIndex index into the constraint graph color array, may be B2_NULL_INDEX for sleeping/disabled joints B2_NULL_INDEX when slot is free public int colorIndex Field Value int drawSize public float drawSize Field Value float edges public B2FixedArray2<B2JointEdge> edges Field Value B2FixedArray2<B2JointEdge> generation This is monotonically advanced when a body is allocated in this slot Used to check for invalid b2JointId public ushort generation Field Value ushort isMarked public bool isMarked Field Value bool islandId public int islandId Field Value int islandNext public int islandNext Field Value int islandPrev public int islandPrev Field Value int jointId public int jointId Field Value int localIndex joint index within set or graph color B2_NULL_INDEX when slot is free public int localIndex Field Value int setIndex index of simulation set stored in b2World B2_NULL_INDEX when slot is free public int setIndex Field Value int type public B2JointType type Field Value B2JointType userData public object userData Field Value object"
  },
  "api/Box2D.NET.B2JointEdge.html": {
    "href": "api/Box2D.NET.B2JointEdge.html",
    "title": "Struct B2JointEdge | Box2D API",
    "keywords": "Struct B2JointEdge Namespace Box2D.NET Assembly Box2D.NET.dll A joint edge is used to connect bodies and joints together in a joint graph where each body is a node and each joint is an edge. A joint edge belongs to a doubly linked list maintained in each attached body. Each joint has two joint nodes, one for each attached body. public struct B2JointEdge Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyId public int bodyId Field Value int nextKey public int nextKey Field Value int prevKey public int prevKey Field Value int"
  },
  "api/Box2D.NET.B2JointId.html": {
    "href": "api/Box2D.NET.B2JointId.html",
    "title": "Struct B2JointId | Box2D API",
    "keywords": "Struct B2JointId Namespace Box2D.NET Assembly Box2D.NET.dll Joint id references a joint instance. This should be treated as an opaque handle. public readonly struct B2JointId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2JointId(int, ushort, ushort) public B2JointId(int index1, ushort world0, ushort generation) Parameters index1 int world0 ushort generation ushort Fields generation public readonly ushort generation Field Value ushort index1 public readonly int index1 Field Value int world0 public readonly ushort world0 Field Value ushort"
  },
  "api/Box2D.NET.B2JointPair.html": {
    "href": "api/Box2D.NET.B2JointPair.html",
    "title": "Struct B2JointPair | Box2D API",
    "keywords": "Struct B2JointPair Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2JointPair Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2JointPair(B2Joint, B2JointSim) public B2JointPair(B2Joint joint, B2JointSim jointSim) Parameters joint B2Joint jointSim B2JointSim Fields joint public B2Joint joint Field Value B2Joint jointSim public B2JointSim jointSim Field Value B2JointSim"
  },
  "api/Box2D.NET.B2JointSim.html": {
    "href": "api/Box2D.NET.B2JointSim.html",
    "title": "Class B2JointSim | Box2D API",
    "keywords": "Class B2JointSim Namespace Box2D.NET Assembly Box2D.NET.dll The @base joint class. Joints are used to constraint two bodies together in various fashions. Some joints also feature limits and motors. public class B2JointSim Inheritance object B2JointSim Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields bodyIdA public int bodyIdA Field Value int bodyIdB public int bodyIdB Field Value int invIA public float invIA Field Value float invIB public float invIB Field Value float invMassA public float invMassA Field Value float invMassB public float invMassB Field Value float jointId public int jointId Field Value int localOriginAnchorA Anchors relative to body origin public B2Vec2 localOriginAnchorA Field Value B2Vec2 localOriginAnchorB public B2Vec2 localOriginAnchorB Field Value B2Vec2 type public B2JointType type Field Value B2JointType uj TODO: @ikpil, check union public B2JointUnion uj Field Value B2JointUnion Methods Clear() public void Clear() CopyFrom(B2JointSim) public void CopyFrom(B2JointSim other) Parameters other B2JointSim"
  },
  "api/Box2D.NET.B2JointType.html": {
    "href": "api/Box2D.NET.B2JointType.html",
    "title": "Enum B2JointType | Box2D API",
    "keywords": "Enum B2JointType Namespace Box2D.NET Assembly Box2D.NET.dll Joint type enumeration This is useful because all joint types use b2JointId and sometimes you want to get the type of a joint. @ingroup joint public enum B2JointType Fields b2_distanceJoint = 0 b2_filterJoint = 1 b2_motorJoint = 2 b2_mouseJoint = 3 b2_prismaticJoint = 4 b2_revoluteJoint = 5 b2_weldJoint = 6 b2_wheelJoint = 7"
  },
  "api/Box2D.NET.B2JointUnion.html": {
    "href": "api/Box2D.NET.B2JointUnion.html",
    "title": "Struct B2JointUnion | Box2D API",
    "keywords": "Struct B2JointUnion Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2JointUnion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields distanceJoint public B2DistanceJoint distanceJoint Field Value B2DistanceJoint motorJoint public B2MotorJoint motorJoint Field Value B2MotorJoint mouseJoint public B2MouseJoint mouseJoint Field Value B2MouseJoint prismaticJoint public B2PrismaticJoint prismaticJoint Field Value B2PrismaticJoint revoluteJoint public B2RevoluteJoint revoluteJoint Field Value B2RevoluteJoint weldJoint public B2WeldJoint weldJoint Field Value B2WeldJoint wheelJoint public B2WheelJoint wheelJoint Field Value B2WheelJoint"
  },
  "api/Box2D.NET.B2Joints.html": {
    "href": "api/Box2D.NET.B2Joints.html",
    "title": "Class B2Joints | Box2D API",
    "keywords": "Class B2Joints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Joints Inheritance object B2Joints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2CreateDistanceJoint(B2WorldId, ref B2DistanceJointDef) public static B2JointId b2CreateDistanceJoint(B2WorldId worldId, ref B2DistanceJointDef def) Parameters worldId B2WorldId def B2DistanceJointDef Returns B2JointId b2CreateFilterJoint(B2WorldId, ref b2FilterJointDef) Create a filter joint. @see b2FilterJointDef for details public static B2JointId b2CreateFilterJoint(B2WorldId worldId, ref b2FilterJointDef def) Parameters worldId B2WorldId def b2FilterJointDef Returns B2JointId b2CreateJoint(B2World, B2Body, B2Body, object, float, B2JointType, bool) public static B2JointPair b2CreateJoint(B2World world, B2Body bodyA, B2Body bodyB, object userData, float drawSize, B2JointType type, bool collideConnected) Parameters world B2World bodyA B2Body bodyB B2Body userData object drawSize float type B2JointType collideConnected bool Returns B2JointPair b2CreateMotorJoint(B2WorldId, ref B2MotorJointDef) Create a motor joint @see b2MotorJointDef for details public static B2JointId b2CreateMotorJoint(B2WorldId worldId, ref B2MotorJointDef def) Parameters worldId B2WorldId def B2MotorJointDef Returns B2JointId b2CreateMouseJoint(B2WorldId, ref B2MouseJointDef) public static B2JointId b2CreateMouseJoint(B2WorldId worldId, ref B2MouseJointDef def) Parameters worldId B2WorldId def B2MouseJointDef Returns B2JointId b2CreatePrismaticJoint(B2WorldId, B2PrismaticJointDef) public static B2JointId b2CreatePrismaticJoint(B2WorldId worldId, B2PrismaticJointDef def) Parameters worldId B2WorldId def B2PrismaticJointDef Returns B2JointId b2CreateRevoluteJoint(B2WorldId, ref B2RevoluteJointDef) public static B2JointId b2CreateRevoluteJoint(B2WorldId worldId, ref B2RevoluteJointDef def) Parameters worldId B2WorldId def B2RevoluteJointDef Returns B2JointId b2CreateWeldJoint(B2WorldId, ref B2WeldJointDef) public static B2JointId b2CreateWeldJoint(B2WorldId worldId, ref B2WeldJointDef def) Parameters worldId B2WorldId def B2WeldJointDef Returns B2JointId b2CreateWheelJoint(B2WorldId, ref B2WheelJointDef) public static B2JointId b2CreateWheelJoint(B2WorldId worldId, ref B2WheelJointDef def) Parameters worldId B2WorldId def B2WheelJointDef Returns B2JointId b2DefaultDistanceJointDef() Use this to initialize your joint definition @ingroup distance_joint public static B2DistanceJointDef b2DefaultDistanceJointDef() Returns B2DistanceJointDef b2DefaultExplosionDef() public static B2ExplosionDef b2DefaultExplosionDef() Returns B2ExplosionDef b2DefaultFilterJointDef() Use this to initialize your joint definition @ingroup filter_joint public static b2FilterJointDef b2DefaultFilterJointDef() Returns b2FilterJointDef b2DefaultMotorJointDef() public static B2MotorJointDef b2DefaultMotorJointDef() Returns B2MotorJointDef b2DefaultMouseJointDef() public static B2MouseJointDef b2DefaultMouseJointDef() Returns B2MouseJointDef b2DefaultPrismaticJointDef() public static B2PrismaticJointDef b2DefaultPrismaticJointDef() Returns B2PrismaticJointDef b2DefaultRevoluteJointDef() public static B2RevoluteJointDef b2DefaultRevoluteJointDef() Returns B2RevoluteJointDef b2DefaultWeldJointDef() public static B2WeldJointDef b2DefaultWeldJointDef() Returns B2WeldJointDef b2DefaultWheelJointDef() public static B2WheelJointDef b2DefaultWheelJointDef() Returns B2WheelJointDef b2DestroyContactsBetweenBodies(B2World, B2Body, B2Body) public static void b2DestroyContactsBetweenBodies(B2World world, B2Body bodyA, B2Body bodyB) Parameters world B2World bodyA B2Body bodyB B2Body b2DestroyJoint(B2JointId) public static void b2DestroyJoint(B2JointId jointId) Parameters jointId B2JointId b2DestroyJointInternal(B2World, B2Joint, bool) public static void b2DestroyJointInternal(B2World world, B2Joint joint, bool wakeBodies) Parameters world B2World joint B2Joint wakeBodies bool b2DrawJoint(B2DebugDraw, B2World, B2Joint) public static void b2DrawJoint(B2DebugDraw draw, B2World world, B2Joint joint) Parameters draw B2DebugDraw world B2World joint B2Joint b2GetJointFullId(B2World, B2JointId) public static B2Joint b2GetJointFullId(B2World world, B2JointId jointId) Parameters world B2World jointId B2JointId Returns B2Joint b2GetJointSim(B2World, B2Joint) public static B2JointSim b2GetJointSim(B2World world, B2Joint joint) Parameters world B2World joint B2Joint Returns B2JointSim b2GetJointSimCheckType(B2JointId, B2JointType) public static B2JointSim b2GetJointSimCheckType(B2JointId jointId, B2JointType type) Parameters jointId B2JointId type B2JointType Returns B2JointSim b2Joint_GetAngularSeparation(B2JointId) Get the current angular separation error for this joint. Does not consider admissible movement. Usually in meters. public static float b2Joint_GetAngularSeparation(B2JointId jointId) Parameters jointId B2JointId Returns float b2Joint_GetBodyA(B2JointId) public static B2BodyId b2Joint_GetBodyA(B2JointId jointId) Parameters jointId B2JointId Returns B2BodyId b2Joint_GetBodyB(B2JointId) public static B2BodyId b2Joint_GetBodyB(B2JointId jointId) Parameters jointId B2JointId Returns B2BodyId b2Joint_GetCollideConnected(B2JointId) public static bool b2Joint_GetCollideConnected(B2JointId jointId) Parameters jointId B2JointId Returns bool b2Joint_GetConstraintForce(B2JointId) public static B2Vec2 b2Joint_GetConstraintForce(B2JointId jointId) Parameters jointId B2JointId Returns B2Vec2 b2Joint_GetConstraintTorque(B2JointId) Get the current constraint torque for this joint. Usually in Newton * meters. public static float b2Joint_GetConstraintTorque(B2JointId jointId) Parameters jointId B2JointId Returns float b2Joint_GetLinearSeparation(B2JointId) Get the current linear separation error for this joint. Does not consider admissible movement. Usually in meters. public static float b2Joint_GetLinearSeparation(B2JointId jointId) Parameters jointId B2JointId Returns float b2Joint_GetLocalAnchorA(B2JointId) public static B2Vec2 b2Joint_GetLocalAnchorA(B2JointId jointId) Parameters jointId B2JointId Returns B2Vec2 b2Joint_GetLocalAnchorB(B2JointId) public static B2Vec2 b2Joint_GetLocalAnchorB(B2JointId jointId) Parameters jointId B2JointId Returns B2Vec2 b2Joint_GetType(B2JointId) public static B2JointType b2Joint_GetType(B2JointId jointId) Parameters jointId B2JointId Returns B2JointType b2Joint_GetUserData(B2JointId) public static object b2Joint_GetUserData(B2JointId jointId) Parameters jointId B2JointId Returns object b2Joint_GetWorld(B2JointId) Get the world that owns this joint public static B2WorldId b2Joint_GetWorld(B2JointId jointId) Parameters jointId B2JointId Returns B2WorldId b2Joint_SetCollideConnected(B2JointId, bool) public static void b2Joint_SetCollideConnected(B2JointId jointId, bool shouldCollide) Parameters jointId B2JointId shouldCollide bool b2Joint_SetLocalAnchorA(B2JointId, B2Vec2) Set the local anchor on bodyA public static void b2Joint_SetLocalAnchorA(B2JointId jointId, B2Vec2 localAnchor) Parameters jointId B2JointId localAnchor B2Vec2 b2Joint_SetLocalAnchorB(B2JointId, B2Vec2) Set the local anchor on bodyB public static void b2Joint_SetLocalAnchorB(B2JointId jointId, B2Vec2 localAnchor) Parameters jointId B2JointId localAnchor B2Vec2 b2Joint_SetUserData(B2JointId, object) public static void b2Joint_SetUserData(B2JointId jointId, object userData) Parameters jointId B2JointId userData object b2Joint_WakeBodies(B2JointId) public static void b2Joint_WakeBodies(B2JointId jointId) Parameters jointId B2JointId b2PrepareJoint(B2JointSim, B2StepContext) public static void b2PrepareJoint(B2JointSim joint, B2StepContext context) Parameters joint B2JointSim context B2StepContext b2PrepareOverflowJoints(B2StepContext) public static void b2PrepareOverflowJoints(B2StepContext context) Parameters context B2StepContext b2SolveJoint(B2JointSim, B2StepContext, bool) public static void b2SolveJoint(B2JointSim joint, B2StepContext context, bool useBias) Parameters joint B2JointSim context B2StepContext useBias bool b2SolveOverflowJoints(B2StepContext, bool) public static void b2SolveOverflowJoints(B2StepContext context, bool useBias) Parameters context B2StepContext useBias bool b2WarmStartJoint(B2JointSim, B2StepContext) public static void b2WarmStartJoint(B2JointSim joint, B2StepContext context) Parameters joint B2JointSim context B2StepContext b2WarmStartOverflowJoints(B2StepContext) public static void b2WarmStartOverflowJoints(B2StepContext context) Parameters context B2StepContext"
  },
  "api/Box2D.NET.B2Manifold.html": {
    "href": "api/Box2D.NET.B2Manifold.html",
    "title": "Struct B2Manifold | Box2D API",
    "keywords": "Struct B2Manifold Namespace Box2D.NET Assembly Box2D.NET.dll A contact manifold describes the contact points between colliding shapes. @note Box2D uses speculative collision so some contact points may be separated. public struct B2Manifold Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields normal The unit normal vector in world space, points from shape A to bodyB public B2Vec2 normal Field Value B2Vec2 pointCount The number of contacts points, will be 0, 1, or 2 public int pointCount Field Value int points The manifold points, up to two are possible in 2D public B2FixedArray2<B2ManifoldPoint> points Field Value B2FixedArray2<B2ManifoldPoint> rollingImpulse Angular impulse applied for rolling resistance. N * m * s = kg * m^2 / s public float rollingImpulse Field Value float"
  },
  "api/Box2D.NET.B2ManifoldPoint.html": {
    "href": "api/Box2D.NET.B2ManifoldPoint.html",
    "title": "Struct B2ManifoldPoint | Box2D API",
    "keywords": "Struct B2ManifoldPoint Namespace Box2D.NET Assembly Box2D.NET.dll A manifold point is a contact point belonging to a contact manifold. It holds details related to the geometry and dynamics of the contact points. Box2D uses speculative collision so some contact points may be separated. You may use the totalNormalImpulse to determine if there was an interaction during the time step. public struct B2ManifoldPoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA Location of the contact point relative to shapeA's origin in world space @note When used internally to the Box2D solver, this is relative to the body center of mass. public B2Vec2 anchorA Field Value B2Vec2 anchorB Location of the contact point relative to shapeB's origin in world space @note When used internally to the Box2D solver, this is relative to the body center of mass. public B2Vec2 anchorB Field Value B2Vec2 id Uniquely identifies a contact point between two shapes public ushort id Field Value ushort normalImpulse The impulse along the manifold normal vector. public float normalImpulse Field Value float normalVelocity Relative normal velocity pre-solve. Used for hit events. If the normal impulse is zero then there was no hit. Negative means shapes are approaching. public float normalVelocity Field Value float persisted Did this contact point exist the previous step? public bool persisted Field Value bool point Location of the contact point in world space. Subject to precision loss at large coordinates. @note Should only be used for debugging. public B2Vec2 point Field Value B2Vec2 separation The separation of the contact point, negative if penetrating public float separation Field Value float tangentImpulse The friction impulse public float tangentImpulse Field Value float totalNormalImpulse The total normal impulse applied across sub-stepping and restitution. This is important to identify speculative contact points that had an interaction in the time step. public float totalNormalImpulse Field Value float"
  },
  "api/Box2D.NET.B2Manifolds.html": {
    "href": "api/Box2D.NET.B2Manifolds.html",
    "title": "Class B2Manifolds | Box2D API",
    "keywords": "Class B2Manifolds Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Manifolds Inheritance object B2Manifolds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods B2_MAKE_ID(int, int) public static ushort B2_MAKE_ID(int A, int B) Parameters A int B int Returns ushort b2ClassifyNormal(B2ChainSegmentParams, B2Vec2) Evaluate Gauss map See https://box2d.org/posts/2020/06/ghost-collisions/ public static B2NormalType b2ClassifyNormal(B2ChainSegmentParams param, B2Vec2 normal) Parameters param B2ChainSegmentParams normal B2Vec2 Returns B2NormalType b2ClipPolygons(ref B2Polygon, ref B2Polygon, int, int, bool) Polygon clipper used to compute contact points when there are potentially two contact points. public static B2Manifold b2ClipPolygons(ref B2Polygon polyA, ref B2Polygon polyB, int edgeA, int edgeB, bool flip) Parameters polyA B2Polygon polyB B2Polygon edgeA int edgeB int flip bool Returns B2Manifold b2ClipSegments(B2Vec2, B2Vec2, B2Vec2, B2Vec2, B2Vec2, float, float, ushort, ushort) public static B2Manifold b2ClipSegments(B2Vec2 a1, B2Vec2 a2, B2Vec2 b1, B2Vec2 b2, B2Vec2 normal, float ra, float rb, ushort id1, ushort id2) Parameters a1 B2Vec2 a2 B2Vec2 b1 B2Vec2 b2 B2Vec2 normal B2Vec2 ra float rb float id1 ushort id2 ushort Returns B2Manifold b2CollideCapsuleAndCircle(ref B2Capsule, B2Transform, ref B2Circle, B2Transform) Compute the contact manifold between a capsule and circle Compute the collision manifold between a capsule and circle public static B2Manifold b2CollideCapsuleAndCircle(ref B2Capsule capsuleA, B2Transform xfA, ref B2Circle circleB, B2Transform xfB) Parameters capsuleA B2Capsule xfA B2Transform circleB B2Circle xfB B2Transform Returns B2Manifold b2CollideCapsules(ref B2Capsule, B2Transform, ref B2Capsule, B2Transform) Compute the contact manifold between a capsule and circle Follows Ericson 5.1.9 Closest Points of Two Line Segments Adds some logic to support clipping to get two contact points public static B2Manifold b2CollideCapsules(ref B2Capsule capsuleA, B2Transform xfA, ref B2Capsule capsuleB, B2Transform xfB) Parameters capsuleA B2Capsule xfA B2Transform capsuleB B2Capsule xfB B2Transform Returns B2Manifold b2CollideChainSegmentAndCapsule(ref B2ChainSegment, B2Transform, ref B2Capsule, B2Transform, ref B2SimplexCache) Compute the contact manifold between a chain segment and a capsule public static B2Manifold b2CollideChainSegmentAndCapsule(ref B2ChainSegment segmentA, B2Transform xfA, ref B2Capsule capsuleB, B2Transform xfB, ref B2SimplexCache cache) Parameters segmentA B2ChainSegment xfA B2Transform capsuleB B2Capsule xfB B2Transform cache B2SimplexCache Returns B2Manifold b2CollideChainSegmentAndCircle(ref B2ChainSegment, B2Transform, ref B2Circle, B2Transform) Compute the contact manifold between a chain segment and a circle public static B2Manifold b2CollideChainSegmentAndCircle(ref B2ChainSegment segmentA, B2Transform xfA, ref B2Circle circleB, B2Transform xfB) Parameters segmentA B2ChainSegment xfA B2Transform circleB B2Circle xfB B2Transform Returns B2Manifold b2CollideChainSegmentAndPolygon(ref B2ChainSegment, B2Transform, ref B2Polygon, B2Transform, ref B2SimplexCache) Compute the contact manifold between a chain segment and a rounded polygon public static B2Manifold b2CollideChainSegmentAndPolygon(ref B2ChainSegment segmentA, B2Transform xfA, ref B2Polygon polygonB, B2Transform xfB, ref B2SimplexCache cache) Parameters segmentA B2ChainSegment xfA B2Transform polygonB B2Polygon xfB B2Transform cache B2SimplexCache Returns B2Manifold b2CollideCircles(ref B2Circle, B2Transform, ref B2Circle, B2Transform) Compute the contact manifold between two circles point = qA * localAnchorA + pA localAnchorB = qBc * (point - pB) anchorB = point - pB = qA * localAnchorA + pA - pB = anchorA + (pA - pB) public static B2Manifold b2CollideCircles(ref B2Circle circleA, B2Transform xfA, ref B2Circle circleB, B2Transform xfB) Parameters circleA B2Circle xfA B2Transform circleB B2Circle xfB B2Transform Returns B2Manifold b2CollidePolygonAndCapsule(ref B2Polygon, B2Transform, ref B2Capsule, B2Transform) Compute the contact manifold between a polygon and capsule public static B2Manifold b2CollidePolygonAndCapsule(ref B2Polygon polygonA, B2Transform xfA, ref B2Capsule capsuleB, B2Transform xfB) Parameters polygonA B2Polygon xfA B2Transform capsuleB B2Capsule xfB B2Transform Returns B2Manifold b2CollidePolygonAndCircle(ref B2Polygon, B2Transform, ref B2Circle, B2Transform) Compute the contact manifold between a polygon and a circle public static B2Manifold b2CollidePolygonAndCircle(ref B2Polygon polygonA, B2Transform xfA, ref B2Circle circleB, B2Transform xfB) Parameters polygonA B2Polygon xfA B2Transform circleB B2Circle xfB B2Transform Returns B2Manifold b2CollidePolygons(ref B2Polygon, B2Transform, ref B2Polygon, B2Transform) compute edge separation using the separating axis test (SAT) if (separation > speculation_distance) return find reference and incident edge if separation >= 0.1f * B2_LINEAR_SLOP compute closest points between reference and incident edge if vertices are closest single vertex-vertex contact else clip edges end else clip edges end public static B2Manifold b2CollidePolygons(ref B2Polygon polygonA, B2Transform xfA, ref B2Polygon polygonB, B2Transform xfB) Parameters polygonA B2Polygon xfA B2Transform polygonB B2Polygon xfB B2Transform Returns B2Manifold b2CollideSegmentAndCapsule(ref B2Segment, B2Transform, ref B2Capsule, B2Transform) Compute the contact manifold between an segment and a capsule public static B2Manifold b2CollideSegmentAndCapsule(ref B2Segment segmentA, B2Transform xfA, ref B2Capsule capsuleB, B2Transform xfB) Parameters segmentA B2Segment xfA B2Transform capsuleB B2Capsule xfB B2Transform Returns B2Manifold b2CollideSegmentAndCircle(ref B2Segment, B2Transform, ref B2Circle, B2Transform) Compute the contact manifold between an segment and a circle public static B2Manifold b2CollideSegmentAndCircle(ref B2Segment segmentA, B2Transform xfA, ref B2Circle circleB, B2Transform xfB) Parameters segmentA B2Segment xfA B2Transform circleB B2Circle xfB B2Transform Returns B2Manifold b2CollideSegmentAndPolygon(ref B2Segment, B2Transform, ref B2Polygon, B2Transform) Compute the contact manifold between an segment and a polygon public static B2Manifold b2CollideSegmentAndPolygon(ref B2Segment segmentA, B2Transform xfA, ref B2Polygon polygonB, B2Transform xfB) Parameters segmentA B2Segment xfA B2Transform polygonB B2Polygon xfB B2Transform Returns B2Manifold b2FindMaxSeparation(ref int, ref B2Polygon, B2Polygon) Find the max separation between poly1 and poly2 using edge normals from poly1. public static float b2FindMaxSeparation(ref int edgeIndex, ref B2Polygon poly1, B2Polygon poly2) Parameters edgeIndex int poly1 B2Polygon poly2 B2Polygon Returns float b2MakeCapsule(B2Vec2, B2Vec2, float) public static B2Polygon b2MakeCapsule(B2Vec2 p1, B2Vec2 p2, float radius) Parameters p1 B2Vec2 p2 B2Vec2 radius float Returns B2Polygon"
  },
  "api/Box2D.NET.B2MassData.html": {
    "href": "api/Box2D.NET.B2MassData.html",
    "title": "Struct B2MassData | Box2D API",
    "keywords": "Struct B2MassData Namespace Box2D.NET Assembly Box2D.NET.dll This holds the mass data computed for a shape. public struct B2MassData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2MassData(float, B2Vec2, float) public B2MassData(float mass, B2Vec2 center, float rotationalInertia) Parameters mass float center B2Vec2 rotationalInertia float Fields center The position of the shape's centroid relative to the shape's origin. public B2Vec2 center Field Value B2Vec2 mass The mass of the shape, usually in kilograms. public float mass Field Value float rotationalInertia The rotational inertia of the shape about the local origin. public float rotationalInertia Field Value float"
  },
  "api/Box2D.NET.B2Mat22.html": {
    "href": "api/Box2D.NET.B2Mat22.html",
    "title": "Struct B2Mat22 | Box2D API",
    "keywords": "Struct B2Mat22 Namespace Box2D.NET Assembly Box2D.NET.dll A 2-by-2 Matrix public struct B2Mat22 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Mat22(B2Vec2, B2Vec2) public B2Mat22(B2Vec2 cx, B2Vec2 cy) Parameters cx B2Vec2 cy B2Vec2 Fields cx columns public B2Vec2 cx Field Value B2Vec2 cy columns public B2Vec2 cy Field Value B2Vec2"
  },
  "api/Box2D.NET.B2MathFunction.html": {
    "href": "api/Box2D.NET.B2MathFunction.html",
    "title": "Class B2MathFunction | Box2D API",
    "keywords": "Class B2MathFunction Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2MathFunction Inheritance object B2MathFunction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields B2_PI https://en.wikipedia.org/wiki/Pi public const float B2_PI = 3.1415927 Field Value float FLT_EPSILON public const float FLT_EPSILON = 1.1920929E-07 Field Value float b2Mat22_zero public static readonly B2Mat22 b2Mat22_zero Field Value B2Mat22 b2Rot_identity public static readonly B2Rot b2Rot_identity Field Value B2Rot b2Transform_identity public static readonly B2Transform b2Transform_identity Field Value B2Transform b2Vec2_zero public static readonly B2Vec2 b2Vec2_zero Field Value B2Vec2 Methods b2AABB_Center(B2AABB) public static B2Vec2 b2AABB_Center(B2AABB a) Parameters a B2AABB Returns B2Vec2 b2AABB_Contains(B2AABB, B2AABB) public static bool b2AABB_Contains(B2AABB a, B2AABB b) Parameters a B2AABB b B2AABB Returns bool b2AABB_Extents(B2AABB) public static B2Vec2 b2AABB_Extents(B2AABB a) Parameters a B2AABB Returns B2Vec2 b2AABB_Overlaps(B2AABB, B2AABB) public static bool b2AABB_Overlaps(B2AABB a, B2AABB b) Parameters a B2AABB b B2AABB Returns bool b2AABB_Union(B2AABB, B2AABB) public static B2AABB b2AABB_Union(B2AABB a, B2AABB b) Parameters a B2AABB b B2AABB Returns B2AABB b2Abs(B2Vec2) public static B2Vec2 b2Abs(B2Vec2 a) Parameters a B2Vec2 Returns B2Vec2 b2AbsFloat(float) public static float b2AbsFloat(float a) Parameters a float Returns float b2AbsInt(int) public static int b2AbsInt(int a) Parameters a int Returns int b2Add(B2Vec2, B2Vec2) public static B2Vec2 b2Add(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns B2Vec2 b2Atan2(float, float) Compute an approximate arctangent in the range [-pi, pi] This is hand coded for cross-platform determinism. The MathF.Atan2 function in the standard library is not cross-platform deterministic. Accurate to around 0.0023 degrees https://stackoverflow.com/questions/46210708/atan2-approximation-with-11bits-in-mantissa-on-x86with-sse2-and-armwith-vfpv4 public static float b2Atan2(float y, float x) Parameters y float x float Returns float b2Clamp(B2Vec2, B2Vec2, B2Vec2) public static B2Vec2 b2Clamp(B2Vec2 v, B2Vec2 a, B2Vec2 b) Parameters v B2Vec2 a B2Vec2 b B2Vec2 Returns B2Vec2 b2ClampFloat(float, float, float) public static float b2ClampFloat(float a, float lower, float upper) Parameters a float lower float upper float Returns float b2ClampInt(int, int, int) public static int b2ClampInt(int a, int lower, int upper) Parameters a int lower int upper int Returns int b2ComputeAngularVelocity(B2Rot, B2Rot, float) public static float b2ComputeAngularVelocity(B2Rot q1, B2Rot q2, float inv_h) Parameters q1 B2Rot q2 B2Rot inv_h float Returns float b2ComputeCosSin(float) Compute the cosine and sine of an angle in radians. Implemented for cross-platform determinism. Approximate cosine and sine for determinism. In my testing MathF.Cos and MathF.Sin produced the same results on x64 and ARM using MSVC, GCC, and Clang. However, I don't trust this result. https://en.wikipedia.org/wiki/Bh%C4%81skara_I%27s_sine_approximation_formula public static B2CosSin b2ComputeCosSin(float radians) Parameters radians float Returns B2CosSin b2ComputeRotationBetweenUnitVectors(B2Vec2, B2Vec2) public static B2Rot b2ComputeRotationBetweenUnitVectors(B2Vec2 v1, B2Vec2 v2) Parameters v1 B2Vec2 v2 B2Vec2 Returns B2Rot b2Cross(B2Vec2, B2Vec2) public static float b2Cross(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns float b2CrossSV(float, B2Vec2) public static B2Vec2 b2CrossSV(float s, B2Vec2 v) Parameters s float v B2Vec2 Returns B2Vec2 b2CrossVS(B2Vec2, float) public static B2Vec2 b2CrossVS(B2Vec2 v, float s) Parameters v B2Vec2 s float Returns B2Vec2 b2Distance(B2Vec2, B2Vec2) public static float b2Distance(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns float b2DistanceSquared(B2Vec2, B2Vec2) public static float b2DistanceSquared(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns float b2Dot(B2Vec2, B2Vec2) public static float b2Dot(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns float b2GetInverse22(B2Mat22) public static B2Mat22 b2GetInverse22(B2Mat22 A) Parameters A B2Mat22 Returns B2Mat22 b2GetLengthAndNormalize(ref float, B2Vec2) public static B2Vec2 b2GetLengthAndNormalize(ref float length, B2Vec2 v) Parameters length float v B2Vec2 Returns B2Vec2 b2IntegrateRotation(B2Rot, float) public static B2Rot b2IntegrateRotation(B2Rot q1, float deltaAngle) Parameters q1 B2Rot deltaAngle float Returns B2Rot b2InvMulRot(B2Rot, B2Rot) public static B2Rot b2InvMulRot(B2Rot q, B2Rot r) Parameters q B2Rot r B2Rot Returns B2Rot b2InvMulTransforms(B2Transform, B2Transform) public static B2Transform b2InvMulTransforms(B2Transform A, B2Transform B) Parameters A B2Transform B B2Transform Returns B2Transform b2InvRotateVector(B2Rot, B2Vec2) public static B2Vec2 b2InvRotateVector(B2Rot q, B2Vec2 v) Parameters q B2Rot v B2Vec2 Returns B2Vec2 b2InvTransformPoint(B2Transform, B2Vec2) public static B2Vec2 b2InvTransformPoint(B2Transform t, B2Vec2 p) Parameters t B2Transform p B2Vec2 Returns B2Vec2 b2IsNormalized(B2Vec2) public static bool b2IsNormalized(B2Vec2 a) Parameters a B2Vec2 Returns bool b2IsNormalizedRot(B2Rot) public static bool b2IsNormalizedRot(B2Rot q) Parameters q B2Rot Returns bool b2IsValidAABB(B2AABB) public static bool b2IsValidAABB(B2AABB a) Parameters a B2AABB Returns bool b2IsValidFloat(float) public static bool b2IsValidFloat(float a) Parameters a float Returns bool b2IsValidPlane(B2Plane) public static bool b2IsValidPlane(B2Plane a) Parameters a B2Plane Returns bool b2IsValidRotation(B2Rot) public static bool b2IsValidRotation(B2Rot q) Parameters q B2Rot Returns bool b2IsValidVec2(B2Vec2) public static bool b2IsValidVec2(B2Vec2 v) Parameters v B2Vec2 Returns bool b2LeftPerp(B2Vec2) public static B2Vec2 b2LeftPerp(B2Vec2 v) Parameters v B2Vec2 Returns B2Vec2 b2Length(B2Vec2) public static float b2Length(B2Vec2 v) Parameters v B2Vec2 Returns float b2LengthSquared(B2Vec2) public static float b2LengthSquared(B2Vec2 v) Parameters v B2Vec2 Returns float b2Lerp(B2Vec2, B2Vec2, float) public static B2Vec2 b2Lerp(B2Vec2 a, B2Vec2 b, float t) Parameters a B2Vec2 b B2Vec2 t float Returns B2Vec2 b2MakeAABB(ReadOnlySpan<B2Vec2>, int, float) public static B2AABB b2MakeAABB(ReadOnlySpan<B2Vec2> points, int count, float radius) Parameters points ReadOnlySpan<B2Vec2> count int radius float Returns B2AABB b2MakeRot(float) public static B2Rot b2MakeRot(float radians) Parameters radians float Returns B2Rot b2Max(B2Vec2, B2Vec2) public static B2Vec2 b2Max(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns B2Vec2 b2MaxFloat(float, float) public static float b2MaxFloat(float a, float b) Parameters a float b float Returns float b2MaxInt(int, int) public static int b2MaxInt(int a, int b) Parameters a int b int Returns int b2Min(B2Vec2, B2Vec2) public static B2Vec2 b2Min(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns B2Vec2 b2MinFloat(float, float) public static float b2MinFloat(float a, float b) Parameters a float b float Returns float b2MinInt(int, int) public static int b2MinInt(int a, int b) Parameters a int b int Returns int b2Mul(B2Vec2, B2Vec2) public static B2Vec2 b2Mul(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns B2Vec2 b2MulAdd(B2Vec2, float, B2Vec2) public static B2Vec2 b2MulAdd(B2Vec2 a, float s, B2Vec2 b) Parameters a B2Vec2 s float b B2Vec2 Returns B2Vec2 b2MulMV(B2Mat22, B2Vec2) public static B2Vec2 b2MulMV(B2Mat22 A, B2Vec2 v) Parameters A B2Mat22 v B2Vec2 Returns B2Vec2 b2MulRot(B2Rot, B2Rot) public static B2Rot b2MulRot(B2Rot q, B2Rot r) Parameters q B2Rot r B2Rot Returns B2Rot b2MulSV(float, B2Vec2) public static B2Vec2 b2MulSV(float s, B2Vec2 v) Parameters s float v B2Vec2 Returns B2Vec2 b2MulSub(B2Vec2, float, B2Vec2) public static B2Vec2 b2MulSub(B2Vec2 a, float s, B2Vec2 b) Parameters a B2Vec2 s float b B2Vec2 Returns B2Vec2 b2MulTransforms(B2Transform, B2Transform) public static B2Transform b2MulTransforms(B2Transform A, B2Transform B) Parameters A B2Transform B B2Transform Returns B2Transform b2NLerp(B2Rot, B2Rot, float) public static B2Rot b2NLerp(B2Rot q1, B2Rot q2, float t) Parameters q1 B2Rot q2 B2Rot t float Returns B2Rot b2Neg(B2Vec2) public static B2Vec2 b2Neg(B2Vec2 a) Parameters a B2Vec2 Returns B2Vec2 b2Normalize(B2Vec2) public static B2Vec2 b2Normalize(B2Vec2 v) Parameters v B2Vec2 Returns B2Vec2 b2NormalizeRot(B2Rot) public static B2Rot b2NormalizeRot(B2Rot q) Parameters q B2Rot Returns B2Rot b2PlaneSeparation(B2Plane, B2Vec2) public static float b2PlaneSeparation(B2Plane plane, B2Vec2 point) Parameters plane B2Plane point B2Vec2 Returns float b2RelativeAngle(B2Rot, B2Rot) public static float b2RelativeAngle(B2Rot b, B2Rot a) Parameters b B2Rot a B2Rot Returns float b2RightPerp(B2Vec2) public static B2Vec2 b2RightPerp(B2Vec2 v) Parameters v B2Vec2 Returns B2Vec2 b2Rot_GetAngle(B2Rot) public static float b2Rot_GetAngle(B2Rot q) Parameters q B2Rot Returns float b2Rot_GetXAxis(B2Rot) public static B2Vec2 b2Rot_GetXAxis(B2Rot q) Parameters q B2Rot Returns B2Vec2 b2Rot_GetYAxis(B2Rot) public static B2Vec2 b2Rot_GetYAxis(B2Rot q) Parameters q B2Rot Returns B2Vec2 b2RotateVector(B2Rot, B2Vec2) public static B2Vec2 b2RotateVector(B2Rot q, B2Vec2 v) Parameters q B2Rot v B2Vec2 Returns B2Vec2 b2Solve22(B2Mat22, B2Vec2) public static B2Vec2 b2Solve22(B2Mat22 A, B2Vec2 b) Parameters A B2Mat22 b B2Vec2 Returns B2Vec2 b2Sub(B2Vec2, B2Vec2) public static B2Vec2 b2Sub(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns B2Vec2 b2TransformPoint(ref B2Transform, B2Vec2) public static B2Vec2 b2TransformPoint(ref B2Transform t, B2Vec2 p) Parameters t B2Transform p B2Vec2 Returns B2Vec2 b2UnwindAngle(float) public static float b2UnwindAngle(float radians) Parameters radians float Returns float"
  },
  "api/Box2D.NET.B2MotorJoint.html": {
    "href": "api/Box2D.NET.B2MotorJoint.html",
    "title": "Struct B2MotorJoint | Box2D API",
    "keywords": "Struct B2MotorJoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2MotorJoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA public B2Vec2 anchorA Field Value B2Vec2 anchorB public B2Vec2 anchorB Field Value B2Vec2 angularImpulse public float angularImpulse Field Value float angularMass public float angularMass Field Value float angularOffset public float angularOffset Field Value float correctionFactor public float correctionFactor Field Value float deltaAngle public float deltaAngle Field Value float deltaCenter public B2Vec2 deltaCenter Field Value B2Vec2 indexA public int indexA Field Value int indexB public int indexB Field Value int linearImpulse public B2Vec2 linearImpulse Field Value B2Vec2 linearMass public B2Mat22 linearMass Field Value B2Mat22 linearOffset public B2Vec2 linearOffset Field Value B2Vec2 maxForce public float maxForce Field Value float maxTorque public float maxTorque Field Value float"
  },
  "api/Box2D.NET.B2MotorJointDef.html": {
    "href": "api/Box2D.NET.B2MotorJointDef.html",
    "title": "Struct B2MotorJointDef | Box2D API",
    "keywords": "Struct B2MotorJointDef Namespace Box2D.NET Assembly Box2D.NET.dll A motor joint is used to control the relative motion between two bodies A typical usage is to control the movement of a dynamic body with respect to the ground. @ingroup motor_joint public struct B2MotorJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields angularOffset The bodyB angle minus bodyA angle in radians public float angularOffset Field Value float bodyIdA The first attached body public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body public B2BodyId bodyIdB Field Value B2BodyId collideConnected Set this flag to true if the attached bodies should collide public bool collideConnected Field Value bool correctionFactor Position correction factor in the range [0,1] public float correctionFactor Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int linearOffset Position of bodyB minus the position of bodyA, in bodyA's frame public B2Vec2 linearOffset Field Value B2Vec2 maxForce The maximum motor force in newtons public float maxForce Field Value float maxTorque The maximum motor torque in newton-meters public float maxTorque Field Value float userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.B2MotorJoints.html": {
    "href": "api/Box2D.NET.B2MotorJoints.html",
    "title": "Class B2MotorJoints | Box2D API",
    "keywords": "Class B2MotorJoints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2MotorJoints Inheritance object B2MotorJoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2GetMotorJointForce(B2World, B2JointSim) public static B2Vec2 b2GetMotorJointForce(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns B2Vec2 b2GetMotorJointTorque(B2World, B2JointSim) public static float b2GetMotorJointTorque(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns float b2MotorJoint_GetAngularOffset(B2JointId) public static float b2MotorJoint_GetAngularOffset(B2JointId jointId) Parameters jointId B2JointId Returns float b2MotorJoint_GetCorrectionFactor(B2JointId) public static float b2MotorJoint_GetCorrectionFactor(B2JointId jointId) Parameters jointId B2JointId Returns float b2MotorJoint_GetLinearOffset(B2JointId) Get the motor joint linear offset target public static B2Vec2 b2MotorJoint_GetLinearOffset(B2JointId jointId) Parameters jointId B2JointId Returns B2Vec2 b2MotorJoint_GetMaxForce(B2JointId) public static float b2MotorJoint_GetMaxForce(B2JointId jointId) Parameters jointId B2JointId Returns float b2MotorJoint_GetMaxTorque(B2JointId) public static float b2MotorJoint_GetMaxTorque(B2JointId jointId) Parameters jointId B2JointId Returns float b2MotorJoint_SetAngularOffset(B2JointId, float) Set the motor joint angular offset target in radians. This angle will be unwound so the motor will drive along the shortest arc. public static void b2MotorJoint_SetAngularOffset(B2JointId jointId, float angularOffset) Parameters jointId B2JointId angularOffset float b2MotorJoint_SetCorrectionFactor(B2JointId, float) public static void b2MotorJoint_SetCorrectionFactor(B2JointId jointId, float correctionFactor) Parameters jointId B2JointId correctionFactor float b2MotorJoint_SetLinearOffset(B2JointId, B2Vec2) Set the motor joint linear offset target public static void b2MotorJoint_SetLinearOffset(B2JointId jointId, B2Vec2 linearOffset) Parameters jointId B2JointId linearOffset B2Vec2 b2MotorJoint_SetMaxForce(B2JointId, float) public static void b2MotorJoint_SetMaxForce(B2JointId jointId, float maxForce) Parameters jointId B2JointId maxForce float b2MotorJoint_SetMaxTorque(B2JointId, float) public static void b2MotorJoint_SetMaxTorque(B2JointId jointId, float maxTorque) Parameters jointId B2JointId maxTorque float b2PrepareMotorJoint(B2JointSim, B2StepContext) public static void b2PrepareMotorJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2SolveMotorJoint(B2JointSim, B2StepContext, bool) public static void b2SolveMotorJoint(B2JointSim @base, B2StepContext context, bool useBias) Parameters base B2JointSim context B2StepContext useBias bool b2WarmStartMotorJoint(B2JointSim, B2StepContext) public static void b2WarmStartMotorJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext"
  },
  "api/Box2D.NET.B2MouseJoint.html": {
    "href": "api/Box2D.NET.B2MouseJoint.html",
    "title": "Struct B2MouseJoint | Box2D API",
    "keywords": "Struct B2MouseJoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2MouseJoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorB public B2Vec2 anchorB Field Value B2Vec2 angularImpulse public float angularImpulse Field Value float angularSoftness public B2Softness angularSoftness Field Value B2Softness dampingRatio public float dampingRatio Field Value float deltaCenter public B2Vec2 deltaCenter Field Value B2Vec2 hertz public float hertz Field Value float indexB public int indexB Field Value int linearImpulse public B2Vec2 linearImpulse Field Value B2Vec2 linearMass public B2Mat22 linearMass Field Value B2Mat22 linearSoftness public B2Softness linearSoftness Field Value B2Softness maxForce public float maxForce Field Value float targetA public B2Vec2 targetA Field Value B2Vec2"
  },
  "api/Box2D.NET.B2MouseJointDef.html": {
    "href": "api/Box2D.NET.B2MouseJointDef.html",
    "title": "Struct B2MouseJointDef | Box2D API",
    "keywords": "Struct B2MouseJointDef Namespace Box2D.NET Assembly Box2D.NET.dll A mouse joint is used to make a point on a body track a specified world point. This a soft constraint and allows the constraint to stretch without applying huge forces. This also applies rotation constraint heuristic to improve control. @ingroup mouse_joint public struct B2MouseJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyIdA The first attached body. This is assumed to be static. public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body. public B2BodyId bodyIdB Field Value B2BodyId collideConnected Set this flag to true if the attached bodies should collide. public bool collideConnected Field Value bool dampingRatio Damping ratio, non-dimensional public float dampingRatio Field Value float hertz Stiffness in hertz public float hertz Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int maxForce Maximum force, typically in newtons public float maxForce Field Value float target The initial target point in world space public B2Vec2 target Field Value B2Vec2 userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.B2MouseJoints.html": {
    "href": "api/Box2D.NET.B2MouseJoints.html",
    "title": "Class B2MouseJoints | Box2D API",
    "keywords": "Class B2MouseJoints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2MouseJoints Inheritance object B2MouseJoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2GetMouseJointForce(B2World, B2JointSim) public static B2Vec2 b2GetMouseJointForce(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns B2Vec2 b2GetMouseJointTorque(B2World, B2JointSim) public static float b2GetMouseJointTorque(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns float b2MouseJoint_GetMaxForce(B2JointId) public static float b2MouseJoint_GetMaxForce(B2JointId jointId) Parameters jointId B2JointId Returns float b2MouseJoint_GetSpringDampingRatio(B2JointId) public static float b2MouseJoint_GetSpringDampingRatio(B2JointId jointId) Parameters jointId B2JointId Returns float b2MouseJoint_GetSpringHertz(B2JointId) public static float b2MouseJoint_GetSpringHertz(B2JointId jointId) Parameters jointId B2JointId Returns float b2MouseJoint_GetTarget(B2JointId) public static B2Vec2 b2MouseJoint_GetTarget(B2JointId jointId) Parameters jointId B2JointId Returns B2Vec2 b2MouseJoint_SetMaxForce(B2JointId, float) public static void b2MouseJoint_SetMaxForce(B2JointId jointId, float maxForce) Parameters jointId B2JointId maxForce float b2MouseJoint_SetSpringDampingRatio(B2JointId, float) public static void b2MouseJoint_SetSpringDampingRatio(B2JointId jointId, float dampingRatio) Parameters jointId B2JointId dampingRatio float b2MouseJoint_SetSpringHertz(B2JointId, float) public static void b2MouseJoint_SetSpringHertz(B2JointId jointId, float hertz) Parameters jointId B2JointId hertz float b2MouseJoint_SetTarget(B2JointId, B2Vec2) public static void b2MouseJoint_SetTarget(B2JointId jointId, B2Vec2 target) Parameters jointId B2JointId target B2Vec2 b2PrepareMouseJoint(B2JointSim, B2StepContext) public static void b2PrepareMouseJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2SolveMouseJoint(B2JointSim, B2StepContext) public static void b2SolveMouseJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2WarmStartMouseJoint(B2JointSim, B2StepContext) public static void b2WarmStartMouseJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext"
  },
  "api/Box2D.NET.B2MovePair.html": {
    "href": "api/Box2D.NET.B2MovePair.html",
    "title": "Class B2MovePair | Box2D API",
    "keywords": "Class B2MovePair Namespace Box2D.NET Assembly Box2D.NET.dll public class B2MovePair Inheritance object B2MovePair Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields heap public bool heap Field Value bool next public B2MovePair next Field Value B2MovePair shapeIndexA public int shapeIndexA Field Value int shapeIndexB public int shapeIndexB Field Value int"
  },
  "api/Box2D.NET.B2MoveResult.html": {
    "href": "api/Box2D.NET.B2MoveResult.html",
    "title": "Class B2MoveResult | Box2D API",
    "keywords": "Class B2MoveResult Namespace Box2D.NET Assembly Box2D.NET.dll public class B2MoveResult Inheritance object B2MoveResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields pairList public B2MovePair pairList Field Value B2MovePair"
  },
  "api/Box2D.NET.B2MoverContext.html": {
    "href": "api/Box2D.NET.B2MoverContext.html",
    "title": "Struct B2MoverContext | Box2D API",
    "keywords": "Struct B2MoverContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2MoverContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields filter public B2QueryFilter filter Field Value B2QueryFilter proxy public B2ShapeProxy proxy Field Value B2ShapeProxy transform public B2Transform transform Field Value B2Transform userContext public object userContext Field Value object world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2Movers.html": {
    "href": "api/Box2D.NET.B2Movers.html",
    "title": "Class B2Movers | Box2D API",
    "keywords": "Class B2Movers Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Movers Inheritance object B2Movers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2ClipVector(B2Vec2, Span<B2CollisionPlane>, int) Clips the velocity against the given collision planes. Planes with zero push or clipVelocity set to false are skipped. public static B2Vec2 b2ClipVector(B2Vec2 vector, Span<B2CollisionPlane> planes, int count) Parameters vector B2Vec2 planes Span<B2CollisionPlane> count int Returns B2Vec2 b2SolvePlanes(B2Vec2, Span<B2CollisionPlane>, int) Solves the position of a mover that satisfies the given collision planes. @param position this must be the position used to generate the collision planes @param planes the collision planes @param count the number of collision planes public static B2PlaneSolverResult b2SolvePlanes(B2Vec2 position, Span<B2CollisionPlane> planes, int count) Parameters position B2Vec2 planes Span<B2CollisionPlane> count int Returns B2PlaneSolverResult"
  },
  "api/Box2D.NET.B2NormalType.html": {
    "href": "api/Box2D.NET.B2NormalType.html",
    "title": "Enum B2NormalType | Box2D API",
    "keywords": "Enum B2NormalType Namespace Box2D.NET Assembly Box2D.NET.dll public enum B2NormalType Fields b2_normalAdmit = 1 b2_normalSkip = 0 b2_normalSnap = 2"
  },
  "api/Box2D.NET.B2Plane.html": {
    "href": "api/Box2D.NET.B2Plane.html",
    "title": "Struct B2Plane | Box2D API",
    "keywords": "Struct B2Plane Namespace Box2D.NET Assembly Box2D.NET.dll separation = dot(normal, point) - offset public struct B2Plane Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Plane(B2Vec2, float) public B2Plane(B2Vec2 normal, float offset) Parameters normal B2Vec2 offset float Fields normal public B2Vec2 normal Field Value B2Vec2 offset public float offset Field Value float"
  },
  "api/Box2D.NET.B2PlaneResult.html": {
    "href": "api/Box2D.NET.B2PlaneResult.html",
    "title": "Struct B2PlaneResult | Box2D API",
    "keywords": "Struct B2PlaneResult Namespace Box2D.NET Assembly Box2D.NET.dll These are the collision planes returned from b2World_CollideMover public struct B2PlaneResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2PlaneResult(B2Plane, B2Vec2, bool) public B2PlaneResult(B2Plane plane, B2Vec2 point, bool hit) Parameters plane B2Plane point B2Vec2 hit bool Fields hit Did the collision register a hit? If not this plane should be ignored. public bool hit Field Value bool plane The collision plane between the mover and a convex shape public B2Plane plane Field Value B2Plane point The collision point on the shape. public B2Vec2 point Field Value B2Vec2"
  },
  "api/Box2D.NET.B2PlaneSolverResult.html": {
    "href": "api/Box2D.NET.B2PlaneSolverResult.html",
    "title": "Struct B2PlaneSolverResult | Box2D API",
    "keywords": "Struct B2PlaneSolverResult Namespace Box2D.NET Assembly Box2D.NET.dll Result returned by b2SolvePlane public struct B2PlaneSolverResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2PlaneSolverResult(B2Vec2, int) public B2PlaneSolverResult(B2Vec2 position, int iterationCount) Parameters position B2Vec2 iterationCount int Fields iterationCount The number of iterations used by the plane solver. For diagnostics. public int iterationCount Field Value int position The final position of the mover public B2Vec2 position Field Value B2Vec2"
  },
  "api/Box2D.NET.B2Polygon.html": {
    "href": "api/Box2D.NET.B2Polygon.html",
    "title": "Struct B2Polygon | Box2D API",
    "keywords": "Struct B2Polygon Namespace Box2D.NET Assembly Box2D.NET.dll A solid convex polygon. It is assumed that the interior of the polygon is to the left of each edge. Polygons have a maximum number of vertices equal to B2_MAX_POLYGON_VERTICES. In most cases you should not need many vertices for a convex polygon. @warning DO NOT fill this out manually, instead use a helper function like b2MakePolygon or b2MakeBox. public struct B2Polygon Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields centroid The centroid of the polygon public B2Vec2 centroid Field Value B2Vec2 count The number of polygon vertices public int count Field Value int normals The outward normal vectors of the polygon sides public B2FixedArray8<B2Vec2> normals Field Value B2FixedArray8<B2Vec2> radius The external radius for rounded polygons public float radius Field Value float vertices The polygon vertices public B2FixedArray8<B2Vec2> vertices Field Value B2FixedArray8<B2Vec2>"
  },
  "api/Box2D.NET.B2PrismaticJoint.html": {
    "href": "api/Box2D.NET.B2PrismaticJoint.html",
    "title": "Struct B2PrismaticJoint | Box2D API",
    "keywords": "Struct B2PrismaticJoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2PrismaticJoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA public B2Vec2 anchorA Field Value B2Vec2 anchorB public B2Vec2 anchorB Field Value B2Vec2 axialMass public float axialMass Field Value float axisA public B2Vec2 axisA Field Value B2Vec2 dampingRatio public float dampingRatio Field Value float deltaAngle public float deltaAngle Field Value float deltaCenter public B2Vec2 deltaCenter Field Value B2Vec2 enableLimit public bool enableLimit Field Value bool enableMotor public bool enableMotor Field Value bool enableSpring public bool enableSpring Field Value bool hertz public float hertz Field Value float impulse public B2Vec2 impulse Field Value B2Vec2 indexA public int indexA Field Value int indexB public int indexB Field Value int localAxisA public B2Vec2 localAxisA Field Value B2Vec2 lowerImpulse public float lowerImpulse Field Value float lowerTranslation public float lowerTranslation Field Value float maxMotorForce public float maxMotorForce Field Value float motorImpulse public float motorImpulse Field Value float motorSpeed public float motorSpeed Field Value float referenceAngle public float referenceAngle Field Value float springImpulse public float springImpulse Field Value float springSoftness public B2Softness springSoftness Field Value B2Softness targetTranslation public float targetTranslation Field Value float upperImpulse public float upperImpulse Field Value float upperTranslation public float upperTranslation Field Value float"
  },
  "api/Box2D.NET.B2PrismaticJointDef.html": {
    "href": "api/Box2D.NET.B2PrismaticJointDef.html",
    "title": "Struct B2PrismaticJointDef | Box2D API",
    "keywords": "Struct B2PrismaticJointDef Namespace Box2D.NET Assembly Box2D.NET.dll Prismatic joint definition This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. @ingroup prismatic_joint public struct B2PrismaticJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyIdA The first attached body public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body public B2BodyId bodyIdB Field Value B2BodyId collideConnected Set this flag to true if the attached bodies should collide public bool collideConnected Field Value bool dampingRatio The spring damping ratio, non-dimensional public float dampingRatio Field Value float enableLimit Enable/disable the joint limit public bool enableLimit Field Value bool enableMotor Enable/disable the joint motor public bool enableMotor Field Value bool enableSpring Enable a linear spring along the prismatic joint axis public bool enableSpring Field Value bool hertz The spring stiffness Hertz, cycles per second public float hertz Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int localAnchorA The local anchor point relative to bodyA's origin public B2Vec2 localAnchorA Field Value B2Vec2 localAnchorB The local anchor point relative to bodyB's origin public B2Vec2 localAnchorB Field Value B2Vec2 localAxisA The local translation unit axis in bodyA public B2Vec2 localAxisA Field Value B2Vec2 lowerTranslation The lower translation limit public float lowerTranslation Field Value float maxMotorForce The maximum motor force, typically in newtons public float maxMotorForce Field Value float motorSpeed The desired motor speed, typically in meters per second public float motorSpeed Field Value float referenceAngle The constrained angle between the bodies: bodyB_angle - bodyA_angle public float referenceAngle Field Value float targetTranslation The target translation for the joint in meters. The spring-damper will drive to this translation. public float targetTranslation Field Value float upperTranslation The upper translation limit public float upperTranslation Field Value float userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.B2PrismaticJoints.html": {
    "href": "api/Box2D.NET.B2PrismaticJoints.html",
    "title": "Class B2PrismaticJoints | Box2D API",
    "keywords": "Class B2PrismaticJoints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2PrismaticJoints Inheritance object B2PrismaticJoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2DrawPrismaticJoint(B2DebugDraw, B2JointSim, B2Transform, B2Transform) public static void b2DrawPrismaticJoint(B2DebugDraw draw, B2JointSim @base, B2Transform transformA, B2Transform transformB) Parameters draw B2DebugDraw base B2JointSim transformA B2Transform transformB B2Transform b2GetPrismaticJointForce(B2World, B2JointSim) public static B2Vec2 b2GetPrismaticJointForce(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns B2Vec2 b2GetPrismaticJointTorque(B2World, B2JointSim) public static float b2GetPrismaticJointTorque(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns float b2PreparePrismaticJoint(B2JointSim, B2StepContext) public static void b2PreparePrismaticJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2PrismaticJoint_EnableLimit(B2JointId, bool) public static void b2PrismaticJoint_EnableLimit(B2JointId jointId, bool enableLimit) Parameters jointId B2JointId enableLimit bool b2PrismaticJoint_EnableMotor(B2JointId, bool) public static void b2PrismaticJoint_EnableMotor(B2JointId jointId, bool enableMotor) Parameters jointId B2JointId enableMotor bool b2PrismaticJoint_EnableSpring(B2JointId, bool) public static void b2PrismaticJoint_EnableSpring(B2JointId jointId, bool enableSpring) Parameters jointId B2JointId enableSpring bool b2PrismaticJoint_GetLowerLimit(B2JointId) public static float b2PrismaticJoint_GetLowerLimit(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetMaxMotorForce(B2JointId) public static float b2PrismaticJoint_GetMaxMotorForce(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetMotorForce(B2JointId) public static float b2PrismaticJoint_GetMotorForce(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetMotorSpeed(B2JointId) public static float b2PrismaticJoint_GetMotorSpeed(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetSpeed(B2JointId) public static float b2PrismaticJoint_GetSpeed(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetSpringDampingRatio(B2JointId) public static float b2PrismaticJoint_GetSpringDampingRatio(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetSpringHertz(B2JointId) public static float b2PrismaticJoint_GetSpringHertz(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetTargetTranslation(B2JointId) Get the prismatic joint spring target translation, usually in meters public static float b2PrismaticJoint_GetTargetTranslation(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetTranslation(B2JointId) public static float b2PrismaticJoint_GetTranslation(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_GetUpperLimit(B2JointId) public static float b2PrismaticJoint_GetUpperLimit(B2JointId jointId) Parameters jointId B2JointId Returns float b2PrismaticJoint_IsLimitEnabled(B2JointId) public static bool b2PrismaticJoint_IsLimitEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2PrismaticJoint_IsMotorEnabled(B2JointId) public static bool b2PrismaticJoint_IsMotorEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2PrismaticJoint_IsSpringEnabled(B2JointId) public static bool b2PrismaticJoint_IsSpringEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2PrismaticJoint_SetLimits(B2JointId, float, float) public static void b2PrismaticJoint_SetLimits(B2JointId jointId, float lower, float upper) Parameters jointId B2JointId lower float upper float b2PrismaticJoint_SetMaxMotorForce(B2JointId, float) public static void b2PrismaticJoint_SetMaxMotorForce(B2JointId jointId, float force) Parameters jointId B2JointId force float b2PrismaticJoint_SetMotorSpeed(B2JointId, float) public static void b2PrismaticJoint_SetMotorSpeed(B2JointId jointId, float motorSpeed) Parameters jointId B2JointId motorSpeed float b2PrismaticJoint_SetSpringDampingRatio(B2JointId, float) public static void b2PrismaticJoint_SetSpringDampingRatio(B2JointId jointId, float dampingRatio) Parameters jointId B2JointId dampingRatio float b2PrismaticJoint_SetSpringHertz(B2JointId, float) public static void b2PrismaticJoint_SetSpringHertz(B2JointId jointId, float hertz) Parameters jointId B2JointId hertz float b2PrismaticJoint_SetTargetTranslation(B2JointId, float) Set the prismatic joint spring target angle, usually in meters public static void b2PrismaticJoint_SetTargetTranslation(B2JointId jointId, float translation) Parameters jointId B2JointId translation float b2SolvePrismaticJoint(B2JointSim, B2StepContext, bool) public static void b2SolvePrismaticJoint(B2JointSim @base, B2StepContext context, bool useBias) Parameters base B2JointSim context B2StepContext useBias bool b2WarmStartPrismaticJoint(B2JointSim, B2StepContext) public static void b2WarmStartPrismaticJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext"
  },
  "api/Box2D.NET.B2Profile.html": {
    "href": "api/Box2D.NET.B2Profile.html",
    "title": "Struct B2Profile | Box2D API",
    "keywords": "Struct B2Profile Namespace Box2D.NET Assembly Box2D.NET.dll Profiling data. Times are in milliseconds. public struct B2Profile Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields applyRestitution public float applyRestitution Field Value float bullets public float bullets Field Value float collide public float collide Field Value float hitEvents public float hitEvents Field Value float integratePositions public float integratePositions Field Value float integrateVelocities public float integrateVelocities Field Value float mergeIslands public float mergeIslands Field Value float pairs public float pairs Field Value float prepareConstraints public float prepareConstraints Field Value float prepareStages public float prepareStages Field Value float refit public float refit Field Value float relaxImpulses public float relaxImpulses Field Value float sensors public float sensors Field Value float sleepIslands public float sleepIslands Field Value float solve public float solve Field Value float solveConstraints public float solveConstraints Field Value float solveImpulses public float solveImpulses Field Value float splitIslands public float splitIslands Field Value float step public float step Field Value float storeImpulses public float storeImpulses Field Value float transforms public float transforms Field Value float warmStart public float warmStart Field Value float"
  },
  "api/Box2D.NET.B2Profiling.html": {
    "href": "api/Box2D.NET.B2Profiling.html",
    "title": "Class B2Profiling | Box2D API",
    "keywords": "Class B2Profiling Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Profiling Inheritance object B2Profiling Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TracyCFrameMark() [Conditional(\"DEBUG\")] public static void TracyCFrameMark() b2TracyCAlloc<T>(T[], int) public static void b2TracyCAlloc<T>(T[] ptr, int size) Parameters ptr T[] size int Type Parameters T b2TracyCFree<T>(T) public static void b2TracyCFree<T>(T ptr) Parameters ptr T Type Parameters T b2TracyCFree<T>(T[]) public static void b2TracyCFree<T>(T[] ptr) Parameters ptr T[] Type Parameters T b2TracyCZoneC(B2TracyCZone, B2HexColor, bool) [Conditional(\"DEBUG\")] public static void b2TracyCZoneC(B2TracyCZone ctx, B2HexColor color, bool active) Parameters ctx B2TracyCZone color B2HexColor active bool b2TracyCZoneEnd(B2TracyCZone) [Conditional(\"DEBUG\")] public static void b2TracyCZoneEnd(B2TracyCZone ctx) Parameters ctx B2TracyCZone b2TracyCZoneNC(B2TracyCZone, string, B2HexColor, bool) [Conditional(\"DEBUG\")] public static void b2TracyCZoneNC(B2TracyCZone ctx, string name, B2HexColor color, bool active) Parameters ctx B2TracyCZone name string color B2HexColor active bool"
  },
  "api/Box2D.NET.B2QueryFilter.html": {
    "href": "api/Box2D.NET.B2QueryFilter.html",
    "title": "Struct B2QueryFilter | Box2D API",
    "keywords": "Struct B2QueryFilter Namespace Box2D.NET Assembly Box2D.NET.dll The query filter is used to filter collisions between queries and shapes. For example, you may want a ray-cast representing a projectile to hit players and the static environment but not debris. @ingroup shape public struct B2QueryFilter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2QueryFilter(ulong, ulong) public B2QueryFilter(ulong categoryBits, ulong maskBits) Parameters categoryBits ulong maskBits ulong Fields categoryBits The collision category bits of this query. Normally you would just set one bit. public ulong categoryBits Field Value ulong maskBits The collision mask bits. This states the shape categories that this query would accept for collision. public ulong maskBits Field Value ulong"
  },
  "api/Box2D.NET.B2QueryPairContext.html": {
    "href": "api/Box2D.NET.B2QueryPairContext.html",
    "title": "Struct B2QueryPairContext | Box2D API",
    "keywords": "Struct B2QueryPairContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2QueryPairContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields moveResult public B2MoveResult moveResult Field Value B2MoveResult queryProxyKey public int queryProxyKey Field Value int queryShapeIndex public int queryShapeIndex Field Value int queryTreeType public B2BodyType queryTreeType Field Value B2BodyType world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2RayCastInput.html": {
    "href": "api/Box2D.NET.B2RayCastInput.html",
    "title": "Struct B2RayCastInput | Box2D API",
    "keywords": "Struct B2RayCastInput Namespace Box2D.NET Assembly Box2D.NET.dll Low level ray cast input data public struct B2RayCastInput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2RayCastInput(B2Vec2, B2Vec2, float) public B2RayCastInput(B2Vec2 origin, B2Vec2 translation, float maxFraction) Parameters origin B2Vec2 translation B2Vec2 maxFraction float Fields maxFraction The maximum fraction of the translation to consider, typically 1 public float maxFraction Field Value float origin Start point of the ray cast public B2Vec2 origin Field Value B2Vec2 translation Translation of the ray cast public B2Vec2 translation Field Value B2Vec2"
  },
  "api/Box2D.NET.B2RayResult.html": {
    "href": "api/Box2D.NET.B2RayResult.html",
    "title": "Class B2RayResult | Box2D API",
    "keywords": "Class B2RayResult Namespace Box2D.NET Assembly Box2D.NET.dll Result from b2World_RayCastClosest If there is initial overlap the fraction and normal will be zero while the point is an arbitrary point in the overlap region. @ingroup world public class B2RayResult Inheritance object B2RayResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields fraction public float fraction Field Value float hit public bool hit Field Value bool leafVisits public int leafVisits Field Value int nodeVisits public int nodeVisits Field Value int normal public B2Vec2 normal Field Value B2Vec2 point public B2Vec2 point Field Value B2Vec2 shapeId public B2ShapeId shapeId Field Value B2ShapeId"
  },
  "api/Box2D.NET.B2RebuildItem.html": {
    "href": "api/Box2D.NET.B2RebuildItem.html",
    "title": "Struct B2RebuildItem | Box2D API",
    "keywords": "Struct B2RebuildItem Namespace Box2D.NET Assembly Box2D.NET.dll Temporary data used to track the rebuild of a tree node public struct B2RebuildItem Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields childCount public int childCount Field Value int endIndex public int endIndex Field Value int nodeIndex public int nodeIndex Field Value int splitIndex public int splitIndex Field Value int startIndex Leaf indices public int startIndex Field Value int"
  },
  "api/Box2D.NET.B2RevoluteJoint.html": {
    "href": "api/Box2D.NET.B2RevoluteJoint.html",
    "title": "Struct B2RevoluteJoint | Box2D API",
    "keywords": "Struct B2RevoluteJoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2RevoluteJoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA public B2Vec2 anchorA Field Value B2Vec2 anchorB public B2Vec2 anchorB Field Value B2Vec2 axialMass public float axialMass Field Value float dampingRatio public float dampingRatio Field Value float deltaAngle public float deltaAngle Field Value float deltaCenter public B2Vec2 deltaCenter Field Value B2Vec2 enableLimit public bool enableLimit Field Value bool enableMotor public bool enableMotor Field Value bool enableSpring public bool enableSpring Field Value bool hertz public float hertz Field Value float indexA public int indexA Field Value int indexB public int indexB Field Value int linearImpulse public B2Vec2 linearImpulse Field Value B2Vec2 lowerAngle public float lowerAngle Field Value float lowerImpulse public float lowerImpulse Field Value float maxMotorTorque public float maxMotorTorque Field Value float motorImpulse public float motorImpulse Field Value float motorSpeed public float motorSpeed Field Value float referenceAngle public float referenceAngle Field Value float springImpulse public float springImpulse Field Value float springSoftness public B2Softness springSoftness Field Value B2Softness targetAngle public float targetAngle Field Value float upperAngle public float upperAngle Field Value float upperImpulse public float upperImpulse Field Value float"
  },
  "api/Box2D.NET.B2RevoluteJointDef.html": {
    "href": "api/Box2D.NET.B2RevoluteJointDef.html",
    "title": "Struct B2RevoluteJointDef | Box2D API",
    "keywords": "Struct B2RevoluteJointDef Namespace Box2D.NET Assembly Box2D.NET.dll Revolute joint definition This requires defining an anchor point where the bodies are joined. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. You also need to specify the initial relative angle for joint limits. This helps when saving and loading a game. The local anchor points are measured from the body's origin rather than the center of mass because: you might not know where the center of mass will be if you add/remove shapes from a body and recompute the mass, the joints will be broken @ingroup revolute_joint public struct B2RevoluteJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyIdA The first attached body public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body public B2BodyId bodyIdB Field Value B2BodyId collideConnected Set this flag to true if the attached bodies should collide public bool collideConnected Field Value bool dampingRatio The spring damping ratio, non-dimensional public float dampingRatio Field Value float drawSize Scale the debug draw public float drawSize Field Value float enableLimit A flag to enable joint limits public bool enableLimit Field Value bool enableMotor A flag to enable the joint motor public bool enableMotor Field Value bool enableSpring Enable a rotational spring on the revolute hinge axis public bool enableSpring Field Value bool hertz The spring stiffness Hertz, cycles per second public float hertz Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int localAnchorA The local anchor point relative to bodyA's origin public B2Vec2 localAnchorA Field Value B2Vec2 localAnchorB The local anchor point relative to bodyB's origin public B2Vec2 localAnchorB Field Value B2Vec2 lowerAngle The lower angle for the joint limit in radians. Minimum of -0.99*pi radians. public float lowerAngle Field Value float maxMotorTorque The maximum motor torque, typically in newton-meters public float maxMotorTorque Field Value float motorSpeed The desired motor speed in radians per second public float motorSpeed Field Value float referenceAngle The bodyB angle minus bodyA angle in the reference state (radians). This defines the zero angle for the joint limit. public float referenceAngle Field Value float targetAngle The target angle for the joint in radians. The spring-damper will drive to this angle. public float targetAngle Field Value float upperAngle The upper angle for the joint limit in radians. Maximum of 0.99*pi radians. public float upperAngle Field Value float userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.B2RevoluteJoints.html": {
    "href": "api/Box2D.NET.B2RevoluteJoints.html",
    "title": "Class B2RevoluteJoints | Box2D API",
    "keywords": "Class B2RevoluteJoints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2RevoluteJoints Inheritance object B2RevoluteJoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2DrawRevoluteJoint(B2DebugDraw, B2JointSim, B2Transform, B2Transform, float) public static void b2DrawRevoluteJoint(B2DebugDraw draw, B2JointSim @base, B2Transform transformA, B2Transform transformB, float drawSize) Parameters draw B2DebugDraw base B2JointSim transformA B2Transform transformB B2Transform drawSize float b2GetRevoluteJointForce(B2World, B2JointSim) public static B2Vec2 b2GetRevoluteJointForce(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns B2Vec2 b2GetRevoluteJointTorque(B2World, B2JointSim) public static float b2GetRevoluteJointTorque(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns float b2PrepareRevoluteJoint(B2JointSim, B2StepContext) public static void b2PrepareRevoluteJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2RevoluteJoint_EnableLimit(B2JointId, bool) public static void b2RevoluteJoint_EnableLimit(B2JointId jointId, bool enableLimit) Parameters jointId B2JointId enableLimit bool b2RevoluteJoint_EnableMotor(B2JointId, bool) public static void b2RevoluteJoint_EnableMotor(B2JointId jointId, bool enableMotor) Parameters jointId B2JointId enableMotor bool b2RevoluteJoint_EnableSpring(B2JointId, bool) public static void b2RevoluteJoint_EnableSpring(B2JointId jointId, bool enableSpring) Parameters jointId B2JointId enableSpring bool b2RevoluteJoint_GetAngle(B2JointId) public static float b2RevoluteJoint_GetAngle(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetLowerLimit(B2JointId) public static float b2RevoluteJoint_GetLowerLimit(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetMaxMotorTorque(B2JointId) public static float b2RevoluteJoint_GetMaxMotorTorque(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetMotorSpeed(B2JointId) public static float b2RevoluteJoint_GetMotorSpeed(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetMotorTorque(B2JointId) public static float b2RevoluteJoint_GetMotorTorque(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetSpringDampingRatio(B2JointId) public static float b2RevoluteJoint_GetSpringDampingRatio(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetSpringHertz(B2JointId) public static float b2RevoluteJoint_GetSpringHertz(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetTargetAngle(B2JointId) Get the revolute joint spring target angle, radians public static float b2RevoluteJoint_GetTargetAngle(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_GetUpperLimit(B2JointId) public static float b2RevoluteJoint_GetUpperLimit(B2JointId jointId) Parameters jointId B2JointId Returns float b2RevoluteJoint_IsLimitEnabled(B2JointId) public static bool b2RevoluteJoint_IsLimitEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2RevoluteJoint_IsMotorEnabled(B2JointId) public static bool b2RevoluteJoint_IsMotorEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2RevoluteJoint_IsSpringEnabled(B2JointId) public static bool b2RevoluteJoint_IsSpringEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2RevoluteJoint_SetLimits(B2JointId, float, float) public static void b2RevoluteJoint_SetLimits(B2JointId jointId, float lower, float upper) Parameters jointId B2JointId lower float upper float b2RevoluteJoint_SetMaxMotorTorque(B2JointId, float) public static void b2RevoluteJoint_SetMaxMotorTorque(B2JointId jointId, float torque) Parameters jointId B2JointId torque float b2RevoluteJoint_SetMotorSpeed(B2JointId, float) public static void b2RevoluteJoint_SetMotorSpeed(B2JointId jointId, float motorSpeed) Parameters jointId B2JointId motorSpeed float b2RevoluteJoint_SetSpringDampingRatio(B2JointId, float) public static void b2RevoluteJoint_SetSpringDampingRatio(B2JointId jointId, float dampingRatio) Parameters jointId B2JointId dampingRatio float b2RevoluteJoint_SetSpringHertz(B2JointId, float) public static void b2RevoluteJoint_SetSpringHertz(B2JointId jointId, float hertz) Parameters jointId B2JointId hertz float b2RevoluteJoint_SetTargetAngle(B2JointId, float) Set the revolute joint spring target angle, radians public static void b2RevoluteJoint_SetTargetAngle(B2JointId jointId, float angle) Parameters jointId B2JointId angle float b2SolveRevoluteJoint(B2JointSim, B2StepContext, bool) public static void b2SolveRevoluteJoint(B2JointSim @base, B2StepContext context, bool useBias) Parameters base B2JointSim context B2StepContext useBias bool b2WarmStartRevoluteJoint(B2JointSim, B2StepContext) public static void b2WarmStartRevoluteJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext"
  },
  "api/Box2D.NET.B2Rot.html": {
    "href": "api/Box2D.NET.B2Rot.html",
    "title": "Struct B2Rot | Box2D API",
    "keywords": "Struct B2Rot Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2Rot Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Rot(float, float) public B2Rot(float c, float s) Parameters c float s float Fields c cosine and sine public float c Field Value float s cosine and sine public float s Field Value float"
  },
  "api/Box2D.NET.B2RotW.html": {
    "href": "api/Box2D.NET.B2RotW.html",
    "title": "Struct B2RotW | Box2D API",
    "keywords": "Struct B2RotW Namespace Box2D.NET Assembly Box2D.NET.dll Wide rotation public struct B2RotW Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields C public B2FloatW C Field Value B2FloatW S public B2FloatW S Field Value B2FloatW"
  },
  "api/Box2D.NET.B2RotateType.html": {
    "href": "api/Box2D.NET.B2RotateType.html",
    "title": "Enum B2RotateType | Box2D API",
    "keywords": "Enum B2RotateType Namespace Box2D.NET Assembly Box2D.NET.dll public enum B2RotateType Fields b2_rotateBF = 1 b2_rotateBG = 2 b2_rotateCD = 3 b2_rotateCE = 4 b2_rotateNone = 0"
  },
  "api/Box2D.NET.B2RuntimeValidator.html": {
    "href": "api/Box2D.NET.B2RuntimeValidator.html",
    "title": "Class B2RuntimeValidator | Box2D API",
    "keywords": "Class B2RuntimeValidator Namespace Box2D.NET Assembly Box2D.NET.dll public class B2RuntimeValidator Inheritance object B2RuntimeValidator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Shared public static readonly B2RuntimeValidator Shared Field Value B2RuntimeValidator Methods ThrowIfSafeRuntimePlatform() public int ThrowIfSafeRuntimePlatform() Returns int"
  },
  "api/Box2D.NET.B2Segment.html": {
    "href": "api/Box2D.NET.B2Segment.html",
    "title": "Struct B2Segment | Box2D API",
    "keywords": "Struct B2Segment Namespace Box2D.NET Assembly Box2D.NET.dll A line segment with two-sided collision. public struct B2Segment Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Segment(B2Vec2, B2Vec2) public B2Segment(B2Vec2 point1, B2Vec2 point2) Parameters point1 B2Vec2 point2 B2Vec2 Fields point1 The first point public B2Vec2 point1 Field Value B2Vec2 point2 The second point public B2Vec2 point2 Field Value B2Vec2"
  },
  "api/Box2D.NET.B2SegmentDistanceResult.html": {
    "href": "api/Box2D.NET.B2SegmentDistanceResult.html",
    "title": "Struct B2SegmentDistanceResult | Box2D API",
    "keywords": "Struct B2SegmentDistanceResult Namespace Box2D.NET Assembly Box2D.NET.dll Result of computing the distance between two line segments public struct B2SegmentDistanceResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields closest1 The closest point on the first segment public B2Vec2 closest1 Field Value B2Vec2 closest2 The closest point on the second segment public B2Vec2 closest2 Field Value B2Vec2 distanceSquared The squared distance between the closest points public float distanceSquared Field Value float fraction1 The barycentric coordinate on the first segment public float fraction1 Field Value float fraction2 The barycentric coordinate on the second segment public float fraction2 Field Value float"
  },
  "api/Box2D.NET.B2Sensor.html": {
    "href": "api/Box2D.NET.B2Sensor.html",
    "title": "Class B2Sensor | Box2D API",
    "keywords": "Class B2Sensor Namespace Box2D.NET Assembly Box2D.NET.dll public class B2Sensor Inheritance object B2Sensor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields overlaps1 public B2Array<B2ShapeRef> overlaps1 Field Value B2Array<B2ShapeRef> overlaps2 public B2Array<B2ShapeRef> overlaps2 Field Value B2Array<B2ShapeRef> shapeId public int shapeId Field Value int"
  },
  "api/Box2D.NET.B2SensorBeginTouchEvent.html": {
    "href": "api/Box2D.NET.B2SensorBeginTouchEvent.html",
    "title": "Struct B2SensorBeginTouchEvent | Box2D API",
    "keywords": "Struct B2SensorBeginTouchEvent Namespace Box2D.NET Assembly Box2D.NET.dll A begin touch event is generated when a shape starts to overlap a sensor shape. public struct B2SensorBeginTouchEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2SensorBeginTouchEvent(B2ShapeId, B2ShapeId) public B2SensorBeginTouchEvent(B2ShapeId sensorShapeId, B2ShapeId visitorShapeId) Parameters sensorShapeId B2ShapeId visitorShapeId B2ShapeId Fields sensorShapeId The id of the sensor shape public B2ShapeId sensorShapeId Field Value B2ShapeId visitorShapeId The id of the dynamic shape that began touching the sensor shape public B2ShapeId visitorShapeId Field Value B2ShapeId"
  },
  "api/Box2D.NET.B2SensorEndTouchEvent.html": {
    "href": "api/Box2D.NET.B2SensorEndTouchEvent.html",
    "title": "Struct B2SensorEndTouchEvent | Box2D API",
    "keywords": "Struct B2SensorEndTouchEvent Namespace Box2D.NET Assembly Box2D.NET.dll An end touch event is generated when a shape stops overlapping a sensor shape. These include things like setting the transform, destroying a body or shape, or changing a filter. You will also get an end event if the sensor or visitor are destroyed. Therefore you should always confirm the shape id is valid using b2Shape_IsValid. public struct B2SensorEndTouchEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2SensorEndTouchEvent(B2ShapeId, B2ShapeId) public B2SensorEndTouchEvent(B2ShapeId sensorShapeId, B2ShapeId visitorShapeId) Parameters sensorShapeId B2ShapeId visitorShapeId B2ShapeId Fields sensorShapeId The id of the sensor shape @warning this shape may have been destroyed @see b2Shape_IsValid public B2ShapeId sensorShapeId Field Value B2ShapeId visitorShapeId The id of the dynamic shape that stopped touching the sensor shape @warning this shape may have been destroyed @see b2Shape_IsValid public B2ShapeId visitorShapeId Field Value B2ShapeId"
  },
  "api/Box2D.NET.B2SensorEvents.html": {
    "href": "api/Box2D.NET.B2SensorEvents.html",
    "title": "Struct B2SensorEvents | Box2D API",
    "keywords": "Struct B2SensorEvents Namespace Box2D.NET Assembly Box2D.NET.dll Sensor events are buffered in the Box2D world and are available as begin/end overlap event arrays after the time step is complete. Note: these may become invalid if bodies and/or shapes are destroyed public struct B2SensorEvents Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields beginCount The number of begin touch events public int beginCount Field Value int beginEvents Array of sensor begin touch events public B2SensorBeginTouchEvent[] beginEvents Field Value B2SensorBeginTouchEvent[] endCount The number of end touch events public int endCount Field Value int endEvents Array of sensor end touch events public B2SensorEndTouchEvent[] endEvents Field Value B2SensorEndTouchEvent[]"
  },
  "api/Box2D.NET.B2SensorOverlaps.html": {
    "href": "api/Box2D.NET.B2SensorOverlaps.html",
    "title": "Struct B2SensorOverlaps | Box2D API",
    "keywords": "Struct B2SensorOverlaps Namespace Box2D.NET Assembly Box2D.NET.dll Sensors are shapes that live in the broad-phase but never have contacts. At the end of the time step all sensors are queried for overlap with any other shapes. Sensors ignore body type and sleeping. Sensors generate events when there is a new overlap or and overlap disappears. The sensor overlaps don't get cleared until the next time step regardless of the overlapped shapes being destroyed. When a sensor is destroyed. public struct B2SensorOverlaps Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields overlaps public B2Array<int> overlaps Field Value B2Array<int>"
  },
  "api/Box2D.NET.B2SensorQueryContext.html": {
    "href": "api/Box2D.NET.B2SensorQueryContext.html",
    "title": "Struct B2SensorQueryContext | Box2D API",
    "keywords": "Struct B2SensorQueryContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2SensorQueryContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields sensor public B2Sensor sensor Field Value B2Sensor sensorShape public B2Shape sensorShape Field Value B2Shape taskContext public B2SensorTaskContext taskContext Field Value B2SensorTaskContext transform public B2Transform transform Field Value B2Transform world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2SensorTaskContext.html": {
    "href": "api/Box2D.NET.B2SensorTaskContext.html",
    "title": "Class B2SensorTaskContext | Box2D API",
    "keywords": "Class B2SensorTaskContext Namespace Box2D.NET Assembly Box2D.NET.dll public class B2SensorTaskContext Inheritance object B2SensorTaskContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields eventBits public B2BitSet eventBits Field Value B2BitSet"
  },
  "api/Box2D.NET.B2Sensors.html": {
    "href": "api/Box2D.NET.B2Sensors.html",
    "title": "Class B2Sensors | Box2D API",
    "keywords": "Class B2Sensors Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Sensors Inheritance object B2Sensors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2CompareShapeRefs(ref B2ShapeRef, ref B2ShapeRef) public static int b2CompareShapeRefs(ref B2ShapeRef a, ref B2ShapeRef b) Parameters a B2ShapeRef b B2ShapeRef Returns int b2DestroySensor(B2World, B2Shape) public static void b2DestroySensor(B2World world, B2Shape sensorShape) Parameters world B2World sensorShape B2Shape b2OverlapSensors(B2World) public static void b2OverlapSensors(B2World world) Parameters world B2World b2SensorQueryCallback(int, ulong, ref B2SensorQueryContext) public static bool b2SensorQueryCallback(int proxyId, ulong userData, ref B2SensorQueryContext context) Parameters proxyId int userData ulong context B2SensorQueryContext Returns bool b2SensorTask(int, int, uint, object) public static void b2SensorTask(int startIndex, int endIndex, uint threadIndex, object context) Parameters startIndex int endIndex int threadIndex uint context object"
  },
  "api/Box2D.NET.B2SeparationFunction.html": {
    "href": "api/Box2D.NET.B2SeparationFunction.html",
    "title": "Struct B2SeparationFunction | Box2D API",
    "keywords": "Struct B2SeparationFunction Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2SeparationFunction Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields axis public B2Vec2 axis Field Value B2Vec2 localPoint public B2Vec2 localPoint Field Value B2Vec2 proxyA public B2ShapeProxy proxyA Field Value B2ShapeProxy proxyB public B2ShapeProxy proxyB Field Value B2ShapeProxy sweepA public B2Sweep sweepA Field Value B2Sweep sweepB public B2Sweep sweepB Field Value B2Sweep type public B2SeparationType type Field Value B2SeparationType"
  },
  "api/Box2D.NET.B2SeparationType.html": {
    "href": "api/Box2D.NET.B2SeparationType.html",
    "title": "Enum B2SeparationType | Box2D API",
    "keywords": "Enum B2SeparationType Namespace Box2D.NET Assembly Box2D.NET.dll public enum B2SeparationType Fields b2_faceAType = 1 b2_faceBType = 2 b2_pointsType = 0"
  },
  "api/Box2D.NET.B2SetItem.html": {
    "href": "api/Box2D.NET.B2SetItem.html",
    "title": "Struct B2SetItem | Box2D API",
    "keywords": "Struct B2SetItem Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2SetItem Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields hash public uint hash Field Value uint key public ulong key Field Value ulong Methods Clear() public void Clear()"
  },
  "api/Box2D.NET.B2SetType.html": {
    "href": "api/Box2D.NET.B2SetType.html",
    "title": "Enum B2SetType | Box2D API",
    "keywords": "Enum B2SetType Namespace Box2D.NET Assembly Box2D.NET.dll public enum B2SetType Fields b2_awakeSet = 2 b2_disabledSet = 1 b2_firstSleepingSet = 3 b2_staticSet = 0"
  },
  "api/Box2D.NET.B2Shape.html": {
    "href": "api/Box2D.NET.B2Shape.html",
    "title": "Class B2Shape | Box2D API",
    "keywords": "Class B2Shape Namespace Box2D.NET Assembly Box2D.NET.dll public class B2Shape Inheritance object B2Shape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields aabb public B2AABB aabb Field Value B2AABB bodyId public int bodyId Field Value int customColor public uint customColor Field Value uint density public float density Field Value float enableContactEvents public bool enableContactEvents Field Value bool enableHitEvents public bool enableHitEvents Field Value bool enablePreSolveEvents public bool enablePreSolveEvents Field Value bool enableSensorEvents public bool enableSensorEvents Field Value bool enlargedAABB public bool enlargedAABB Field Value bool fatAABB public B2AABB fatAABB Field Value B2AABB filter public B2Filter filter Field Value B2Filter friction public float friction Field Value float generation public ushort generation Field Value ushort id public int id Field Value int localCentroid public B2Vec2 localCentroid Field Value B2Vec2 nextShapeId public int nextShapeId Field Value int prevShapeId public int prevShapeId Field Value int proxyKey public int proxyKey Field Value int restitution public float restitution Field Value float rollingResistance public float rollingResistance Field Value float sensorIndex public int sensorIndex Field Value int tangentSpeed public float tangentSpeed Field Value float type public B2ShapeType type Field Value B2ShapeType us TODO: @ikpil, check union public B2ShapeUnion us Field Value B2ShapeUnion userData public object userData Field Value object userMaterialId public int userMaterialId Field Value int"
  },
  "api/Box2D.NET.B2ShapeCastInput.html": {
    "href": "api/Box2D.NET.B2ShapeCastInput.html",
    "title": "Struct B2ShapeCastInput | Box2D API",
    "keywords": "Struct B2ShapeCastInput Namespace Box2D.NET Assembly Box2D.NET.dll Low level shape cast input in generic form. This allows casting an arbitrary point cloud wrap with a radius. For example, a circle is a single point with a non-zero radius. A capsule is two points with a non-zero radius. A box is four points with a zero radius. public struct B2ShapeCastInput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields canEncroach Allow shape cast to encroach when initially touching. This only works if the radius is greater than zero. public bool canEncroach Field Value bool maxFraction The maximum fraction of the translation to consider, typically 1 public float maxFraction Field Value float proxy A generic shape public B2ShapeProxy proxy Field Value B2ShapeProxy translation The translation of the shape cast public B2Vec2 translation Field Value B2Vec2"
  },
  "api/Box2D.NET.B2ShapeCastPairInput.html": {
    "href": "api/Box2D.NET.B2ShapeCastPairInput.html",
    "title": "Struct B2ShapeCastPairInput | Box2D API",
    "keywords": "Struct B2ShapeCastPairInput Namespace Box2D.NET Assembly Box2D.NET.dll Input parameters for b2ShapeCast public struct B2ShapeCastPairInput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields canEncroach public bool canEncroach Field Value bool maxFraction public float maxFraction Field Value float proxyA public B2ShapeProxy proxyA Field Value B2ShapeProxy proxyB public B2ShapeProxy proxyB Field Value B2ShapeProxy transformA public B2Transform transformA Field Value B2Transform transformB public B2Transform transformB Field Value B2Transform translationB public B2Vec2 translationB Field Value B2Vec2"
  },
  "api/Box2D.NET.B2ShapeDef.html": {
    "href": "api/Box2D.NET.B2ShapeDef.html",
    "title": "Struct B2ShapeDef | Box2D API",
    "keywords": "Struct B2ShapeDef Namespace Box2D.NET Assembly Box2D.NET.dll Used to create a shape. This is a temporary object used to bundle shape creation parameters. You may use the same shape definition to create multiple shapes. Must be initialized using b2DefaultShapeDef(). @ingroup shape public struct B2ShapeDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields density The density, usually in kg/m^2. This is not part of the surface material because this is for the interior, which may have other considerations, such as being hollow. For example a wood barrel may be hollow or full of water. public float density Field Value float enableContactEvents Enable contact events for this shape. Only applies to kinematic and dynamic bodies. Ignored for sensors. False by default. public bool enableContactEvents Field Value bool enableHitEvents Enable hit events for this shape. Only applies to kinematic and dynamic bodies. Ignored for sensors. False by default. public bool enableHitEvents Field Value bool enablePreSolveEvents Enable pre-solve contact events for this shape. Only applies to dynamic bodies. These are expensive and must be carefully handled due to threading. Ignored for sensors. public bool enablePreSolveEvents Field Value bool enableSensorEvents Enable sensor events for this shape. This applies to sensors and non-sensors. False by default, even for sensors. public bool enableSensorEvents Field Value bool filter Collision filtering data. public B2Filter filter Field Value B2Filter internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int invokeContactCreation When shapes are created they will scan the environment for collision the next time step. This can significantly slow down static body creation when there are many static shapes. This is flag is ignored for dynamic and kinematic shapes which always invoke contact creation. public bool invokeContactCreation Field Value bool isSensor A sensor shape generates overlap events but never generates a collision response. Sensors do not have continuous collision. Instead, use a ray or shape cast for those scenarios. Sensors still contribute to the body mass if they have non-zero density. @note Sensor events are disabled by default. @see enableSensorEvents public bool isSensor Field Value bool material The surface material for this shape. public B2SurfaceMaterial material Field Value B2SurfaceMaterial updateBodyMass Should the body update the mass properties when this shape is created. Default is true. public bool updateBodyMass Field Value bool userData Use this to store application specific shape data. public object userData Field Value object"
  },
  "api/Box2D.NET.B2ShapeExtent.html": {
    "href": "api/Box2D.NET.B2ShapeExtent.html",
    "title": "Struct B2ShapeExtent | Box2D API",
    "keywords": "Struct B2ShapeExtent Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ShapeExtent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields maxExtent public float maxExtent Field Value float minExtent public float minExtent Field Value float"
  },
  "api/Box2D.NET.B2ShapeId.html": {
    "href": "api/Box2D.NET.B2ShapeId.html",
    "title": "Struct B2ShapeId | Box2D API",
    "keywords": "Struct B2ShapeId Namespace Box2D.NET Assembly Box2D.NET.dll Shape id references a shape instance. This should be treated as an opaque handle. public readonly struct B2ShapeId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2ShapeId(int, ushort, ushort) public B2ShapeId(int index1, ushort world0, ushort generation) Parameters index1 int world0 ushort generation ushort Fields generation public readonly ushort generation Field Value ushort index1 public readonly int index1 Field Value int world0 public readonly ushort world0 Field Value ushort"
  },
  "api/Box2D.NET.B2ShapeProxy.html": {
    "href": "api/Box2D.NET.B2ShapeProxy.html",
    "title": "Struct B2ShapeProxy | Box2D API",
    "keywords": "Struct B2ShapeProxy Namespace Box2D.NET Assembly Box2D.NET.dll A distance proxy is used by the GJK algorithm. It encapsulates any shape. You can provide between 1 and B2_MAX_POLYGON_VERTICES and a radius. public struct B2ShapeProxy Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields count The number of points. Must be greater than 0. public int count Field Value int points The point cloud public B2FixedArray8<B2Vec2> points Field Value B2FixedArray8<B2Vec2> radius The external radius of the point cloud. May be zero. public float radius Field Value float"
  },
  "api/Box2D.NET.B2ShapeRef.html": {
    "href": "api/Box2D.NET.B2ShapeRef.html",
    "title": "Struct B2ShapeRef | Box2D API",
    "keywords": "Struct B2ShapeRef Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ShapeRef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields generation public ushort generation Field Value ushort shapeId public int shapeId Field Value int"
  },
  "api/Box2D.NET.B2ShapeRefComparer.html": {
    "href": "api/Box2D.NET.B2ShapeRefComparer.html",
    "title": "Class B2ShapeRefComparer | Box2D API",
    "keywords": "Class B2ShapeRefComparer Namespace Box2D.NET Assembly Box2D.NET.dll public class B2ShapeRefComparer : IComparer<B2ShapeRef> Inheritance object B2ShapeRefComparer Implements IComparer<B2ShapeRef> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Shared public static readonly B2ShapeRefComparer Shared Field Value B2ShapeRefComparer Methods Compare(B2ShapeRef, B2ShapeRef) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. public int Compare(B2ShapeRef a, B2ShapeRef b) Parameters a B2ShapeRef b B2ShapeRef Returns int A signed integer that indicates the relative values of x and y, as shown in the following table. Value Meaning Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y."
  },
  "api/Box2D.NET.B2ShapeType.html": {
    "href": "api/Box2D.NET.B2ShapeType.html",
    "title": "Enum B2ShapeType | Box2D API",
    "keywords": "Enum B2ShapeType Namespace Box2D.NET Assembly Box2D.NET.dll Shape type @ingroup shape public enum B2ShapeType Fields b2_capsuleShape = 1 b2_chainSegmentShape = 4 b2_circleShape = 0 b2_polygonShape = 3 b2_segmentShape = 2 b2_shapeTypeCount = 5"
  },
  "api/Box2D.NET.B2ShapeUnion.html": {
    "href": "api/Box2D.NET.B2ShapeUnion.html",
    "title": "Struct B2ShapeUnion | Box2D API",
    "keywords": "Struct B2ShapeUnion Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2ShapeUnion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields capsule public B2Capsule capsule Field Value B2Capsule chainSegment public B2ChainSegment chainSegment Field Value B2ChainSegment circle public B2Circle circle Field Value B2Circle polygon public B2Polygon polygon Field Value B2Polygon segment public B2Segment segment Field Value B2Segment"
  },
  "api/Box2D.NET.B2Shapes.html": {
    "href": "api/Box2D.NET.B2Shapes.html",
    "title": "Class B2Shapes | Box2D API",
    "keywords": "Class B2Shapes Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Shapes Inheritance object B2Shapes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2Chain_GetFriction(B2ChainId) public static float b2Chain_GetFriction(B2ChainId chainId) Parameters chainId B2ChainId Returns float b2Chain_GetMaterial(B2ChainId) public static int b2Chain_GetMaterial(B2ChainId chainId) Parameters chainId B2ChainId Returns int b2Chain_GetRestitution(B2ChainId) public static float b2Chain_GetRestitution(B2ChainId chainId) Parameters chainId B2ChainId Returns float b2Chain_GetSegmentCount(B2ChainId) public static int b2Chain_GetSegmentCount(B2ChainId chainId) Parameters chainId B2ChainId Returns int b2Chain_GetSegments(B2ChainId, B2ShapeId[], int) public static int b2Chain_GetSegments(B2ChainId chainId, B2ShapeId[] segmentArray, int capacity) Parameters chainId B2ChainId segmentArray B2ShapeId[] capacity int Returns int b2Chain_GetWorld(B2ChainId) public static B2WorldId b2Chain_GetWorld(B2ChainId chainId) Parameters chainId B2ChainId Returns B2WorldId b2Chain_SetFriction(B2ChainId, float) public static void b2Chain_SetFriction(B2ChainId chainId, float friction) Parameters chainId B2ChainId friction float b2Chain_SetMaterial(B2ChainId, int) public static void b2Chain_SetMaterial(B2ChainId chainId, int material) Parameters chainId B2ChainId material int b2Chain_SetRestitution(B2ChainId, float) public static void b2Chain_SetRestitution(B2ChainId chainId, float restitution) Parameters chainId B2ChainId restitution float b2CollideMover(B2Shape, B2Transform, ref B2Capsule) public static B2PlaneResult b2CollideMover(B2Shape shape, B2Transform transform, ref B2Capsule mover) Parameters shape B2Shape transform B2Transform mover B2Capsule Returns B2PlaneResult b2ComputeShapeAABB(B2Shape, B2Transform) public static B2AABB b2ComputeShapeAABB(B2Shape shape, B2Transform xf) Parameters shape B2Shape xf B2Transform Returns B2AABB b2ComputeShapeExtent(B2Shape, B2Vec2) public static B2ShapeExtent b2ComputeShapeExtent(B2Shape shape, B2Vec2 localCenter) Parameters shape B2Shape localCenter B2Vec2 Returns B2ShapeExtent b2ComputeShapeMass(B2Shape) public static B2MassData b2ComputeShapeMass(B2Shape shape) Parameters shape B2Shape Returns B2MassData b2CreateCapsuleShape(B2BodyId, ref B2ShapeDef, ref B2Capsule) public static B2ShapeId b2CreateCapsuleShape(B2BodyId bodyId, ref B2ShapeDef def, ref B2Capsule capsule) Parameters bodyId B2BodyId def B2ShapeDef capsule B2Capsule Returns B2ShapeId b2CreateChain(B2BodyId, ref B2ChainDef) public static B2ChainId b2CreateChain(B2BodyId bodyId, ref B2ChainDef def) Parameters bodyId B2BodyId def B2ChainDef Returns B2ChainId b2CreateCircleShape(B2BodyId, ref B2ShapeDef, ref B2Circle) public static B2ShapeId b2CreateCircleShape(B2BodyId bodyId, ref B2ShapeDef def, ref B2Circle circle) Parameters bodyId B2BodyId def B2ShapeDef circle B2Circle Returns B2ShapeId b2CreatePolygonShape(B2BodyId, ref B2ShapeDef, ref B2Polygon) public static B2ShapeId b2CreatePolygonShape(B2BodyId bodyId, ref B2ShapeDef def, ref B2Polygon polygon) Parameters bodyId B2BodyId def B2ShapeDef polygon B2Polygon Returns B2ShapeId b2CreateSegmentShape(B2BodyId, ref B2ShapeDef, ref B2Segment) public static B2ShapeId b2CreateSegmentShape(B2BodyId bodyId, ref B2ShapeDef def, ref B2Segment segment) Parameters bodyId B2BodyId def B2ShapeDef segment B2Segment Returns B2ShapeId b2CreateShapeInternal<T>(B2World, B2Body, B2Transform, ref B2ShapeDef, ref T, B2ShapeType) public static B2Shape b2CreateShapeInternal<T>(B2World world, B2Body body, B2Transform transform, ref B2ShapeDef def, ref T geometry, B2ShapeType shapeType) where T : struct Parameters world B2World body B2Body transform B2Transform def B2ShapeDef geometry T shapeType B2ShapeType Returns B2Shape Type Parameters T b2CreateShapeProxy(B2Shape, B2BroadPhase, B2BodyType, B2Transform, bool) public static void b2CreateShapeProxy(B2Shape shape, B2BroadPhase bp, B2BodyType type, B2Transform transform, bool forcePairCreation) Parameters shape B2Shape bp B2BroadPhase type B2BodyType transform B2Transform forcePairCreation bool b2CreateShape<T>(B2BodyId, ref B2ShapeDef, ref T, B2ShapeType) public static B2ShapeId b2CreateShape<T>(B2BodyId bodyId, ref B2ShapeDef def, ref T geometry, B2ShapeType shapeType) where T : struct Parameters bodyId B2BodyId def B2ShapeDef geometry T shapeType B2ShapeType Returns B2ShapeId Type Parameters T b2DestroyChain(B2ChainId) public static void b2DestroyChain(B2ChainId chainId) Parameters chainId B2ChainId b2DestroyShape(B2ShapeId, bool) public static void b2DestroyShape(B2ShapeId shapeId, bool updateBodyMass) Parameters shapeId B2ShapeId updateBodyMass bool b2DestroyShapeInternal(B2World, B2Shape, B2Body, bool) Destroy a shape on a body. This doesn't need to be called when destroying a body. public static void b2DestroyShapeInternal(B2World world, B2Shape shape, B2Body body, bool wakeBodies) Parameters world B2World shape B2Shape body B2Body wakeBodies bool b2DestroyShapeProxy(B2Shape, B2BroadPhase) public static void b2DestroyShapeProxy(B2Shape shape, B2BroadPhase bp) Parameters shape B2Shape bp B2BroadPhase b2FreeChainData(B2ChainShape) public static void b2FreeChainData(B2ChainShape chain) Parameters chain B2ChainShape b2GetChainShape(B2World, B2ChainId) public static B2ChainShape b2GetChainShape(B2World world, B2ChainId chainId) Parameters world B2World chainId B2ChainId Returns B2ChainShape b2GetShape(B2World, B2ShapeId) public static B2Shape b2GetShape(B2World world, B2ShapeId shapeId) Parameters world B2World shapeId B2ShapeId Returns B2Shape b2GetShapeCentroid(B2Shape) public static B2Vec2 b2GetShapeCentroid(B2Shape shape) Parameters shape B2Shape Returns B2Vec2 b2GetShapePerimeter(B2Shape) todo_erin maybe compute this on shape creation public static float b2GetShapePerimeter(B2Shape shape) Parameters shape B2Shape Returns float b2GetShapeProjectedPerimeter(B2Shape, B2Vec2) This projects the shape perimeter onto an infinite line public static float b2GetShapeProjectedPerimeter(B2Shape shape, B2Vec2 line) Parameters shape B2Shape line B2Vec2 Returns float b2GetShapeRadius(B2Shape) public static float b2GetShapeRadius(B2Shape shape) Parameters shape B2Shape Returns float b2MakeShapeDistanceProxy(B2Shape) public static B2ShapeProxy b2MakeShapeDistanceProxy(B2Shape shape) Parameters shape B2Shape Returns B2ShapeProxy b2RayCastShape(ref B2RayCastInput, B2Shape, B2Transform) public static B2CastOutput b2RayCastShape(ref B2RayCastInput input, B2Shape shape, B2Transform transform) Parameters input B2RayCastInput shape B2Shape transform B2Transform Returns B2CastOutput b2ResetProxy(B2World, B2Shape, bool, bool) public static void b2ResetProxy(B2World world, B2Shape shape, bool wakeBodies, bool destroyProxy) Parameters world B2World shape B2Shape wakeBodies bool destroyProxy bool b2ShapeCastShape(ref B2ShapeCastInput, B2Shape, B2Transform) public static B2CastOutput b2ShapeCastShape(ref B2ShapeCastInput input, B2Shape shape, B2Transform transform) Parameters input B2ShapeCastInput shape B2Shape transform B2Transform Returns B2CastOutput b2Shape_AreContactEventsEnabled(B2ShapeId) public static bool b2Shape_AreContactEventsEnabled(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns bool b2Shape_AreHitEventsEnabled(B2ShapeId) public static bool b2Shape_AreHitEventsEnabled(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns bool b2Shape_ArePreSolveEventsEnabled(B2ShapeId) public static bool b2Shape_ArePreSolveEventsEnabled(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns bool b2Shape_AreSensorEventsEnabled(B2ShapeId) Returns true if sensor events are enabled. public static bool b2Shape_AreSensorEventsEnabled(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns bool b2Shape_EnableContactEvents(B2ShapeId, bool) public static void b2Shape_EnableContactEvents(B2ShapeId shapeId, bool flag) Parameters shapeId B2ShapeId flag bool b2Shape_EnableHitEvents(B2ShapeId, bool) public static void b2Shape_EnableHitEvents(B2ShapeId shapeId, bool flag) Parameters shapeId B2ShapeId flag bool b2Shape_EnablePreSolveEvents(B2ShapeId, bool) public static void b2Shape_EnablePreSolveEvents(B2ShapeId shapeId, bool flag) Parameters shapeId B2ShapeId flag bool b2Shape_EnableSensorEvents(B2ShapeId, bool) Enable sensor events for this shape. @see b2ShapeDef::enableSensorEvents public static void b2Shape_EnableSensorEvents(B2ShapeId shapeId, bool flag) Parameters shapeId B2ShapeId flag bool b2Shape_GetAABB(B2ShapeId) public static B2AABB b2Shape_GetAABB(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2AABB b2Shape_GetBody(B2ShapeId) public static B2BodyId b2Shape_GetBody(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2BodyId b2Shape_GetCapsule(B2ShapeId) public static B2Capsule b2Shape_GetCapsule(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2Capsule b2Shape_GetChainSegment(B2ShapeId) public static B2ChainSegment b2Shape_GetChainSegment(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2ChainSegment b2Shape_GetCircle(B2ShapeId) public static B2Circle b2Shape_GetCircle(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2Circle b2Shape_GetClosestPoint(B2ShapeId, B2Vec2) public static B2Vec2 b2Shape_GetClosestPoint(B2ShapeId shapeId, B2Vec2 target) Parameters shapeId B2ShapeId target B2Vec2 Returns B2Vec2 b2Shape_GetContactCapacity(B2ShapeId) public static int b2Shape_GetContactCapacity(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns int b2Shape_GetContactData(B2ShapeId, Span<B2ContactData>, int) public static int b2Shape_GetContactData(B2ShapeId shapeId, Span<B2ContactData> contactData, int capacity) Parameters shapeId B2ShapeId contactData Span<B2ContactData> capacity int Returns int b2Shape_GetDensity(B2ShapeId) public static float b2Shape_GetDensity(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns float b2Shape_GetFilter(B2ShapeId) public static B2Filter b2Shape_GetFilter(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2Filter b2Shape_GetFriction(B2ShapeId) public static float b2Shape_GetFriction(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns float b2Shape_GetMassData(B2ShapeId) public static B2MassData b2Shape_GetMassData(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2MassData b2Shape_GetMaterial(B2ShapeId) Get the shape material identifier public static int b2Shape_GetMaterial(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns int b2Shape_GetParentChain(B2ShapeId) public static B2ChainId b2Shape_GetParentChain(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2ChainId b2Shape_GetPolygon(B2ShapeId) public static B2Polygon b2Shape_GetPolygon(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2Polygon b2Shape_GetRestitution(B2ShapeId) public static float b2Shape_GetRestitution(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns float b2Shape_GetSegment(B2ShapeId) public static B2Segment b2Shape_GetSegment(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2Segment b2Shape_GetSensorCapacity(B2ShapeId) public static int b2Shape_GetSensorCapacity(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns int b2Shape_GetSensorOverlaps(B2ShapeId, Span<B2ShapeId>, int) public static int b2Shape_GetSensorOverlaps(B2ShapeId shapeId, Span<B2ShapeId> overlaps, int capacity) Parameters shapeId B2ShapeId overlaps Span<B2ShapeId> capacity int Returns int b2Shape_GetSurfaceMaterial(B2ShapeId) Get the shape surface material public static B2SurfaceMaterial b2Shape_GetSurfaceMaterial(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2SurfaceMaterial b2Shape_GetType(B2ShapeId) public static B2ShapeType b2Shape_GetType(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2ShapeType b2Shape_GetUserData(B2ShapeId) public static object b2Shape_GetUserData(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns object b2Shape_GetWorld(B2ShapeId) public static B2WorldId b2Shape_GetWorld(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns B2WorldId b2Shape_IsSensor(B2ShapeId) Returns true if the shape is a sensor. It is not possible to change a shape from sensor to solid dynamically because this breaks the contract for sensor events. public static bool b2Shape_IsSensor(B2ShapeId shapeId) Parameters shapeId B2ShapeId Returns bool b2Shape_RayCast(B2ShapeId, ref B2RayCastInput) todo_erin untested public static B2CastOutput b2Shape_RayCast(B2ShapeId shapeId, ref B2RayCastInput input) Parameters shapeId B2ShapeId input B2RayCastInput Returns B2CastOutput b2Shape_SetCapsule(B2ShapeId, ref B2Capsule) public static void b2Shape_SetCapsule(B2ShapeId shapeId, ref B2Capsule capsule) Parameters shapeId B2ShapeId capsule B2Capsule b2Shape_SetCircle(B2ShapeId, ref B2Circle) public static void b2Shape_SetCircle(B2ShapeId shapeId, ref B2Circle circle) Parameters shapeId B2ShapeId circle B2Circle b2Shape_SetDensity(B2ShapeId, float, bool) public static void b2Shape_SetDensity(B2ShapeId shapeId, float density, bool updateBodyMass) Parameters shapeId B2ShapeId density float updateBodyMass bool b2Shape_SetFilter(B2ShapeId, B2Filter) Set the current filter. This is almost as expensive as recreating the shape. This may cause contacts to be immediately destroyed. However contacts are not created until the next world step. Sensor overlap state is also not updated until the next world step. @see b2ShapeDef::filter public static void b2Shape_SetFilter(B2ShapeId shapeId, B2Filter filter) Parameters shapeId B2ShapeId filter B2Filter b2Shape_SetFriction(B2ShapeId, float) public static void b2Shape_SetFriction(B2ShapeId shapeId, float friction) Parameters shapeId B2ShapeId friction float b2Shape_SetMaterial(B2ShapeId, int) public static void b2Shape_SetMaterial(B2ShapeId shapeId, int material) Parameters shapeId B2ShapeId material int b2Shape_SetPolygon(B2ShapeId, ref B2Polygon) public static void b2Shape_SetPolygon(B2ShapeId shapeId, ref B2Polygon polygon) Parameters shapeId B2ShapeId polygon B2Polygon b2Shape_SetRestitution(B2ShapeId, float) public static void b2Shape_SetRestitution(B2ShapeId shapeId, float restitution) Parameters shapeId B2ShapeId restitution float b2Shape_SetSegment(B2ShapeId, ref B2Segment) public static void b2Shape_SetSegment(B2ShapeId shapeId, ref B2Segment segment) Parameters shapeId B2ShapeId segment B2Segment b2Shape_SetSurfaceMaterial(B2ShapeId, B2SurfaceMaterial) Set the shape surface material public static void b2Shape_SetSurfaceMaterial(B2ShapeId shapeId, B2SurfaceMaterial surfaceMaterial) Parameters shapeId B2ShapeId surfaceMaterial B2SurfaceMaterial b2Shape_SetUserData(B2ShapeId, object) public static void b2Shape_SetUserData(B2ShapeId shapeId, object userData) Parameters shapeId B2ShapeId userData object b2Shape_TestPoint(B2ShapeId, B2Vec2) public static bool b2Shape_TestPoint(B2ShapeId shapeId, B2Vec2 point) Parameters shapeId B2ShapeId point B2Vec2 Returns bool b2ShouldQueryCollide(B2Filter, B2QueryFilter) public static bool b2ShouldQueryCollide(B2Filter shapeFilter, B2QueryFilter queryFilter) Parameters shapeFilter B2Filter queryFilter B2QueryFilter Returns bool b2ShouldShapesCollide(B2Filter, B2Filter) public static bool b2ShouldShapesCollide(B2Filter filterA, B2Filter filterB) Parameters filterA B2Filter filterB B2Filter Returns bool b2UpdateShapeAABBs(B2Shape, B2Transform, B2BodyType) public static void b2UpdateShapeAABBs(B2Shape shape, B2Transform transform, B2BodyType proxyType) Parameters shape B2Shape transform B2Transform proxyType B2BodyType"
  },
  "api/Box2D.NET.B2Simplex.html": {
    "href": "api/Box2D.NET.B2Simplex.html",
    "title": "Struct B2Simplex | Box2D API",
    "keywords": "Struct B2Simplex Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2Simplex Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields count public int count Field Value int v1 public B2SimplexVertex v1 Field Value B2SimplexVertex v2 public B2SimplexVertex v2 Field Value B2SimplexVertex v3 public B2SimplexVertex v3 Field Value B2SimplexVertex Methods AsSpan() public Span<B2SimplexVertex> AsSpan() Returns Span<B2SimplexVertex>"
  },
  "api/Box2D.NET.B2SimplexCache.html": {
    "href": "api/Box2D.NET.B2SimplexCache.html",
    "title": "Struct B2SimplexCache | Box2D API",
    "keywords": "Struct B2SimplexCache Namespace Box2D.NET Assembly Box2D.NET.dll Used to warm start the GJK simplex. If you call this function multiple times with nearby transforms this might improve performance. Otherwise you can zero initialize this. The distance cache must be initialized to zero on the first call. Users should generally just zero initialize this structure for each call. public struct B2SimplexCache Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields count The number of stored simplex points public ushort count Field Value ushort indexA The cached simplex indices on shape A public B2FixedArray3<byte> indexA Field Value B2FixedArray3<byte> indexB The cached simplex indices on shape B public B2FixedArray3<byte> indexB Field Value B2FixedArray3<byte>"
  },
  "api/Box2D.NET.B2SimplexVertex.html": {
    "href": "api/Box2D.NET.B2SimplexVertex.html",
    "title": "Struct B2SimplexVertex | Box2D API",
    "keywords": "Struct B2SimplexVertex Namespace Box2D.NET Assembly Box2D.NET.dll Simplex vertex for debugging the GJK algorithm public struct B2SimplexVertex Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields a public float a Field Value float indexA public int indexA Field Value int indexB public int indexB Field Value int w public B2Vec2 w Field Value B2Vec2 wA public B2Vec2 wA Field Value B2Vec2 wB public B2Vec2 wB Field Value B2Vec2"
  },
  "api/Box2D.NET.B2Softness.html": {
    "href": "api/Box2D.NET.B2Softness.html",
    "title": "Struct B2Softness | Box2D API",
    "keywords": "Struct B2Softness Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2Softness Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Softness(float, float, float) public B2Softness(float biasRate, float massScale, float impulseScale) Parameters biasRate float massScale float impulseScale float Fields biasRate public float biasRate Field Value float impulseScale public float impulseScale Field Value float massScale public float massScale Field Value float"
  },
  "api/Box2D.NET.B2SolverBlock.html": {
    "href": "api/Box2D.NET.B2SolverBlock.html",
    "title": "Class B2SolverBlock | Box2D API",
    "keywords": "Class B2SolverBlock Namespace Box2D.NET Assembly Box2D.NET.dll Each block of work has a sync index that gets incremented when a worker claims the block. This ensures only a single worker claims a block, yet lets work be distributed dynamically across multiple workers (work stealing). This also reduces contention on a single block index atomic. For non-iterative stages the sync index is simply set to one. For iterative stages (solver iteration) the same block of work is executed once per iteration and the atomic sync index is shared across iterations, so it increases monotonically. public class B2SolverBlock Inheritance object B2SolverBlock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields blockType public short blockType Field Value short count public short count Field Value short startIndex public int startIndex Field Value int syncIndex todo consider false sharing of this atomic public B2AtomicInt syncIndex Field Value B2AtomicInt"
  },
  "api/Box2D.NET.B2SolverBlockType.html": {
    "href": "api/Box2D.NET.B2SolverBlockType.html",
    "title": "Enum B2SolverBlockType | Box2D API",
    "keywords": "Enum B2SolverBlockType Namespace Box2D.NET Assembly Box2D.NET.dll public enum B2SolverBlockType Fields b2_bodyBlock = 0 b2_contactBlock = 2 b2_graphContactBlock = 4 b2_graphJointBlock = 3 b2_jointBlock = 1"
  },
  "api/Box2D.NET.B2SolverSet.html": {
    "href": "api/Box2D.NET.B2SolverSet.html",
    "title": "Class B2SolverSet | Box2D API",
    "keywords": "Class B2SolverSet Namespace Box2D.NET Assembly Box2D.NET.dll This holds solver set data. The following sets are used: static set for all static bodies (no contacts or joints) active set for all active bodies with body states (no contacts or joints) disabled set for disabled bodies and their joints all further sets are sleeping island sets along with their contacts and joints The purpose of solver sets is to achieve high memory locality. https://www.youtube.com/watch?v=nZNd5FjSquk public class B2SolverSet Inheritance object B2SolverSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields bodySims Body array. Empty for unused set. public B2Array<B2BodySim> bodySims Field Value B2Array<B2BodySim> bodyStates Body state only exists for active set public B2Array<B2BodyState> bodyStates Field Value B2Array<B2BodyState> contactSims This holds all contacts for sleeping sets. This holds non-touching contacts for the awake set. public B2Array<B2ContactSim> contactSims Field Value B2Array<B2ContactSim> islandSims The awake set has an array of islands. Sleeping sets normally have a single islands. However, joints created between sleeping sets causes the sets to merge, leaving them with multiple islands. These sleeping islands will be naturally merged with the set is woken. The static and disabled sets have no islands. Islands live in the solver sets to limit the number of islands that need to be considered for sleeping. public B2Array<B2IslandSim> islandSims Field Value B2Array<B2IslandSim> jointSims This holds sleeping/disabled joints. Empty for static/active set. public B2Array<B2JointSim> jointSims Field Value B2Array<B2JointSim> setIndex Aligns with b2World::solverSetIdPool. Used to create a stable id for body/contact/joint/islands. public int setIndex Field Value int Methods Clear() public void Clear()"
  },
  "api/Box2D.NET.B2SolverSets.html": {
    "href": "api/Box2D.NET.B2SolverSets.html",
    "title": "Class B2SolverSets | Box2D API",
    "keywords": "Class B2SolverSets Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2SolverSets Inheritance object B2SolverSets Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2CreateSolverSet(B2World) public static B2SolverSet b2CreateSolverSet(B2World world) Parameters world B2World Returns B2SolverSet b2DestroySolverSet(B2World, int) public static void b2DestroySolverSet(B2World world, int setIndex) Parameters world B2World setIndex int b2MergeSolverSets(B2World, int, int) Merge set 2 into set 1 then destroy set 2. Warning: any pointers into these sets will be orphaned. This is called when joints are created between sets. I want to allow the sets to continue sleeping if both are asleep. Otherwise one set is waked. Islands will get merge when the set is waked. public static void b2MergeSolverSets(B2World world, int setId1, int setId2) Parameters world B2World setId1 int setId2 int b2TransferBody(B2World, B2SolverSet, B2SolverSet, B2Body) public static void b2TransferBody(B2World world, B2SolverSet targetSet, B2SolverSet sourceSet, B2Body body) Parameters world B2World targetSet B2SolverSet sourceSet B2SolverSet body B2Body b2TransferJoint(B2World, B2SolverSet, B2SolverSet, B2Joint) public static void b2TransferJoint(B2World world, B2SolverSet targetSet, B2SolverSet sourceSet, B2Joint joint) Parameters world B2World targetSet B2SolverSet sourceSet B2SolverSet joint B2Joint b2TrySleepIsland(B2World, int) public static void b2TrySleepIsland(B2World world, int islandId) Parameters world B2World islandId int b2WakeSolverSet(B2World, int) Wake a solver set. Does not merge islands. Contacts can be in several places: non-touching contacts in the disabled set non-touching contacts already in the awake set touching contacts in the sleeping set This handles contact types 1 and 3. Type 2 doesn't need any action. public static void b2WakeSolverSet(B2World world, int setIndex) Parameters world B2World setIndex int"
  },
  "api/Box2D.NET.B2SolverStage.html": {
    "href": "api/Box2D.NET.B2SolverStage.html",
    "title": "Class B2SolverStage | Box2D API",
    "keywords": "Class B2SolverStage Namespace Box2D.NET Assembly Box2D.NET.dll Each stage must be completed before going to the next stage. Non-iterative stages use a stage instance once while iterative stages re-use the same instance each iteration. public class B2SolverStage Inheritance object B2SolverStage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields blockCount public int blockCount Field Value int blocks public ArraySegment<B2SolverBlock> blocks Field Value ArraySegment<B2SolverBlock> colorIndex public int colorIndex Field Value int completionCount todo consider false sharing of this atomic public B2AtomicInt completionCount Field Value B2AtomicInt type public B2SolverStageType type Field Value B2SolverStageType"
  },
  "api/Box2D.NET.B2SolverStageType.html": {
    "href": "api/Box2D.NET.B2SolverStageType.html",
    "title": "Enum B2SolverStageType | Box2D API",
    "keywords": "Enum B2SolverStageType Namespace Box2D.NET Assembly Box2D.NET.dll public enum B2SolverStageType Fields b2_stageIntegratePositions = 5 b2_stageIntegrateVelocities = 2 b2_stagePrepareContacts = 1 b2_stagePrepareJoints = 0 b2_stageRelax = 6 b2_stageRestitution = 7 b2_stageSolve = 4 b2_stageStoreImpulses = 8 b2_stageWarmStart = 3"
  },
  "api/Box2D.NET.B2Solvers.html": {
    "href": "api/Box2D.NET.B2Solvers.html",
    "title": "Class B2Solvers | Box2D API",
    "keywords": "Class B2Solvers Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Solvers Inheritance object B2Solvers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields B2_SIMD_SHIFT TODO: @ikpil. check SIMD public static readonly int B2_SIMD_SHIFT Field Value int Methods GetWorkerStartIndex(int, int, int) public static int GetWorkerStartIndex(int workerIndex, int blockCount, int workerCount) Parameters workerIndex int blockCount int workerCount int Returns int b2BulletBodyTask(int, int, uint, object) public static void b2BulletBodyTask(int startIndex, int endIndex, uint threadIndex, object taskContext) Parameters startIndex int endIndex int threadIndex uint taskContext object b2ContinuousQueryCallback(int, ulong, ref B2ContinuousContext) This is called from b2DynamicTree_Query for continuous collision public static bool b2ContinuousQueryCallback(int proxyId, ulong userData, ref B2ContinuousContext context) Parameters proxyId int userData ulong context B2ContinuousContext Returns bool b2ExecuteBlock(B2SolverStage, B2StepContext, B2SolverBlock) public static void b2ExecuteBlock(B2SolverStage stage, B2StepContext context, B2SolverBlock block) Parameters stage B2SolverStage context B2StepContext block B2SolverBlock b2ExecuteMainStage(B2SolverStage, B2StepContext, uint) public static void b2ExecuteMainStage(B2SolverStage stage, B2StepContext context, uint syncBits) Parameters stage B2SolverStage context B2StepContext syncBits uint b2ExecuteStage(B2SolverStage, B2StepContext, int, int, int) public static void b2ExecuteStage(B2SolverStage stage, B2StepContext context, int previousSyncIndex, int syncIndex, int workerIndex) Parameters stage B2SolverStage context B2StepContext previousSyncIndex int syncIndex int workerIndex int b2FinalizeBodiesTask(int, int, uint, object) public static void b2FinalizeBodiesTask(int startIndex, int endIndex, uint threadIndex, object context) Parameters startIndex int endIndex int threadIndex uint context object b2IntegratePositionsTask(int, int, B2StepContext) public static void b2IntegratePositionsTask(int startIndex, int endIndex, B2StepContext context) Parameters startIndex int endIndex int context B2StepContext b2IntegrateVelocitiesTask(int, int, B2StepContext) Integrate velocities and apply damping public static void b2IntegrateVelocitiesTask(int startIndex, int endIndex, B2StepContext context) Parameters startIndex int endIndex int context B2StepContext b2MakeSoft(float, float, float) public static B2Softness b2MakeSoft(float hertz, float zeta, float h) Parameters hertz float zeta float h float Returns B2Softness b2Pause() public static void b2Pause() b2PrepareJointsTask(int, int, B2StepContext) public static void b2PrepareJointsTask(int startIndex, int endIndex, B2StepContext context) Parameters startIndex int endIndex int context B2StepContext b2SIMDShift() public static int b2SIMDShift() Returns int b2Solve(B2World, B2StepContext) Solve with graph coloring public static void b2Solve(B2World world, B2StepContext stepContext) Parameters world B2World stepContext B2StepContext b2SolveContinuous(B2World, int) Continuous collision of dynamic versus static public static void b2SolveContinuous(B2World world, int bodySimIndex) Parameters world B2World bodySimIndex int b2SolveJointsTask(int, int, B2StepContext, int, bool) public static void b2SolveJointsTask(int startIndex, int endIndex, B2StepContext context, int colorIndex, bool useBias) Parameters startIndex int endIndex int context B2StepContext colorIndex int useBias bool b2SolverTask(int, int, uint, object) This should not use the thread index because thread 0 can be called twice by enkiTS. public static void b2SolverTask(int startIndex, int endIndex, uint threadIndexIgnore, object taskContext) Parameters startIndex int endIndex int threadIndexIgnore uint taskContext object b2WarmStartJointsTask(int, int, B2StepContext, int) public static void b2WarmStartJointsTask(int startIndex, int endIndex, B2StepContext context, int colorIndex) Parameters startIndex int endIndex int context B2StepContext colorIndex int"
  },
  "api/Box2D.NET.B2StepContext.html": {
    "href": "api/Box2D.NET.B2StepContext.html",
    "title": "Class B2StepContext | Box2D API",
    "keywords": "Class B2StepContext Namespace Box2D.NET Assembly Box2D.NET.dll Context for a time step. Recreated each time step. public class B2StepContext Inheritance object B2StepContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields activeColorCount public int activeColorCount Field Value int atomicSyncBits sync index (16-bits) | stage type (16-bits) public B2AtomicU32 atomicSyncBits Field Value B2AtomicU32 bulletBodies Array of bullet bodies that need continuous collision handling public ArraySegment<int> bulletBodies Field Value ArraySegment<int> bulletBodyCount public B2AtomicInt bulletBodyCount Field Value B2AtomicInt contactSoftness public B2Softness contactSoftness Field Value B2Softness contacts contact pointers for simplified parallel-for access. parallel-for collide with no gaps parallel-for prepare and store contacts with NULL gaps for SIMD remainders despite being an array of pointers, these are contiguous sub-arrays corresponding to constraint graph colors public ArraySegment<B2ContactSim> contacts Field Value ArraySegment<B2ContactSim> dt time step public float dt Field Value float dummy1 todo padding to prevent false sharing public B2FixedArray64<byte> dummy1 Field Value B2FixedArray64<byte> dummy2 public B2FixedArray64<byte> dummy2 Field Value B2FixedArray64<byte> enableWarmStarting public bool enableWarmStarting Field Value bool enlargedShapeCount public int enlargedShapeCount Field Value int enlargedShapes array of all shape ids for shapes that have enlarged AABBs public int[] enlargedShapes Field Value int[] graph public B2ConstraintGraph graph Field Value B2ConstraintGraph h sub-step public float h Field Value float inv_dt inverse time step (0 if dt == 0). public float inv_dt Field Value float inv_h public float inv_h Field Value float jointSoftness public B2Softness jointSoftness Field Value B2Softness joints joint pointers for simplified parallel-for access. public ArraySegment<B2JointSim> joints Field Value ArraySegment<B2JointSim> maxLinearVelocity public float maxLinearVelocity Field Value float restitutionThreshold public float restitutionThreshold Field Value float simdContactConstraints public ArraySegment<B2ContactConstraintSIMD> simdContactConstraints Field Value ArraySegment<B2ContactConstraintSIMD> sims shortcut to body sims from awake set public B2BodySim[] sims Field Value B2BodySim[] stageCount public int stageCount Field Value int stages public ArraySegment<B2SolverStage> stages Field Value ArraySegment<B2SolverStage> states shortcut to body states from awake set public B2BodyState[] states Field Value B2BodyState[] staticSoftness public B2Softness staticSoftness Field Value B2Softness subStepCount public int subStepCount Field Value int workerCount public int workerCount Field Value int world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2SurfaceMaterial.html": {
    "href": "api/Box2D.NET.B2SurfaceMaterial.html",
    "title": "Struct B2SurfaceMaterial | Box2D API",
    "keywords": "Struct B2SurfaceMaterial Namespace Box2D.NET Assembly Box2D.NET.dll Surface materials allow chain shapes to have per segment surface properties. @ingroup shape public struct B2SurfaceMaterial Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields customColor Custom debug draw color. public uint customColor Field Value uint friction The Coulomb (dry) friction coefficient, usually in the range [0,1]. public float friction Field Value float restitution The coefficient of restitution (bounce) usually in the range [0,1]. https://en.wikipedia.org/wiki/Coefficient_of_restitution public float restitution Field Value float rollingResistance The rolling resistance usually in the range [0,1]. public float rollingResistance Field Value float tangentSpeed The tangent speed for conveyor belts public float tangentSpeed Field Value float userMaterialId User material identifier. This is passed with query results and to friction and restitution combining functions. It is not used internally. public int userMaterialId Field Value int"
  },
  "api/Box2D.NET.B2Sweep.html": {
    "href": "api/Box2D.NET.B2Sweep.html",
    "title": "Struct B2Sweep | Box2D API",
    "keywords": "Struct B2Sweep Namespace Box2D.NET Assembly Box2D.NET.dll This describes the motion of a body/shape for TOI computation. Shapes are defined with respect to the body origin, which may not coincide with the center of mass. However, to support dynamics we must interpolate the center of mass position. public struct B2Sweep Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Sweep(B2Vec2, B2Vec2, B2Vec2, B2Rot, B2Rot) public B2Sweep(B2Vec2 localCenter, B2Vec2 c1, B2Vec2 c2, B2Rot q1, B2Rot q2) Parameters localCenter B2Vec2 c1 B2Vec2 c2 B2Vec2 q1 B2Rot q2 B2Rot Fields c1 public B2Vec2 c1 Field Value B2Vec2 c2 public B2Vec2 c2 Field Value B2Vec2 localCenter public B2Vec2 localCenter Field Value B2Vec2 q1 public B2Rot q1 Field Value B2Rot q2 public B2Rot q2 Field Value B2Rot"
  },
  "api/Box2D.NET.B2TOIInput.html": {
    "href": "api/Box2D.NET.B2TOIInput.html",
    "title": "Struct B2TOIInput | Box2D API",
    "keywords": "Struct B2TOIInput Namespace Box2D.NET Assembly Box2D.NET.dll Input parameters for b2TimeOfImpact public struct B2TOIInput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields maxFraction public float maxFraction Field Value float proxyA public B2ShapeProxy proxyA Field Value B2ShapeProxy proxyB public B2ShapeProxy proxyB Field Value B2ShapeProxy sweepA public B2Sweep sweepA Field Value B2Sweep sweepB public B2Sweep sweepB Field Value B2Sweep"
  },
  "api/Box2D.NET.B2TOIOutput.html": {
    "href": "api/Box2D.NET.B2TOIOutput.html",
    "title": "Struct B2TOIOutput | Box2D API",
    "keywords": "Struct B2TOIOutput Namespace Box2D.NET Assembly Box2D.NET.dll Output parameters for b2TimeOfImpact. public struct B2TOIOutput Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fraction public float fraction Field Value float state public B2TOIState state Field Value B2TOIState"
  },
  "api/Box2D.NET.B2TOIState.html": {
    "href": "api/Box2D.NET.B2TOIState.html",
    "title": "Enum B2TOIState | Box2D API",
    "keywords": "Enum B2TOIState Namespace Box2D.NET Assembly Box2D.NET.dll Describes the TOI output public enum B2TOIState Fields b2_toiStateFailed = 1 b2_toiStateHit = 3 b2_toiStateOverlapped = 2 b2_toiStateSeparated = 4 b2_toiStateUnknown = 0"
  },
  "api/Box2D.NET.B2Tables.html": {
    "href": "api/Box2D.NET.B2Tables.html",
    "title": "Class B2Tables | Box2D API",
    "keywords": "Class B2Tables Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Tables Inheritance object B2Tables Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods B2_SHAPE_PAIR_KEY(long, long) public static ulong B2_SHAPE_PAIR_KEY(long K1, long K2) Parameters K1 long K2 long Returns ulong b2AddKey(ref B2HashSet, ulong) Returns true if key was already in set public static bool b2AddKey(ref B2HashSet set, ulong key) Parameters set B2HashSet key ulong Returns bool b2AddKeyHaveCapacity(ref B2HashSet, ulong, uint) public static void b2AddKeyHaveCapacity(ref B2HashSet set, ulong key, uint hash) Parameters set B2HashSet key ulong hash uint b2ClearSet(ref B2HashSet) public static void b2ClearSet(ref B2HashSet set) Parameters set B2HashSet b2ContainsKey(ref B2HashSet, ulong) public static bool b2ContainsKey(ref B2HashSet set, ulong key) Parameters set B2HashSet key ulong Returns bool b2CreateSet(int) todo compare with https://github.com/skeeto/scratch/blob/master/set32/set32.h public static B2HashSet b2CreateSet(int capacity) Parameters capacity int Returns B2HashSet b2DestroySet(ref B2HashSet) public static void b2DestroySet(ref B2HashSet set) Parameters set B2HashSet b2FindSlot(ref B2HashSet, ulong, uint) public static int b2FindSlot(ref B2HashSet set, ulong key, uint hash) Parameters set B2HashSet key ulong hash uint Returns int b2GetHashSetBytes(ref B2HashSet) public static int b2GetHashSetBytes(ref B2HashSet set) Parameters set B2HashSet Returns int b2GrowTable(ref B2HashSet) public static void b2GrowTable(ref B2HashSet set) Parameters set B2HashSet b2KeyHash(ulong) public static uint b2KeyHash(ulong key) Parameters key ulong Returns uint b2RemoveKey(ref B2HashSet, ulong) Returns true if the key was found See https://en.wikipedia.org/wiki/Open_addressing public static bool b2RemoveKey(ref B2HashSet set, ulong key) Parameters set B2HashSet key ulong Returns bool"
  },
  "api/Box2D.NET.B2TaskContext.html": {
    "href": "api/Box2D.NET.B2TaskContext.html",
    "title": "Class B2TaskContext | Box2D API",
    "keywords": "Class B2TaskContext Namespace Box2D.NET Assembly Box2D.NET.dll Per thread task storage public class B2TaskContext Inheritance object B2TaskContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields awakeIslandBitSet Used to put islands to sleep public B2BitSet awakeIslandBitSet Field Value B2BitSet contactStateBitSet These bits align with the b2ConstraintGraph::contactBlocks and signal a change in contact status public B2BitSet contactStateBitSet Field Value B2BitSet enlargedSimBitSet Used to track bodies with shapes that have enlarged AABBs. This avoids having a bit array that is very large when there are many static shapes. public B2BitSet enlargedSimBitSet Field Value B2BitSet splitIslandId public int splitIslandId Field Value int splitSleepTime Per worker split island candidate public float splitSleepTime Field Value float"
  },
  "api/Box2D.NET.B2Timers.html": {
    "href": "api/Box2D.NET.B2Timers.html",
    "title": "Class B2Timers | Box2D API",
    "keywords": "Class B2Timers Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Timers Inheritance object B2Timers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2GetMilliseconds(ulong) Get the milliseconds passed from an initial tick value. public static float b2GetMilliseconds(ulong ticks) Parameters ticks ulong Returns float b2GetMillisecondsAndReset(ref ulong) Get the milliseconds passed from an initial tick value. Resets the passed in value to the current tick value. public static float b2GetMillisecondsAndReset(ref ulong ticks) Parameters ticks ulong Returns float b2GetTicks() Get the absolute number of system ticks. The value is platform specific. nanoseconds public static ulong b2GetTicks() Returns ulong b2Hash(uint, ReadOnlySpan<byte>, int) djb2 hash https://en.wikipedia.org/wiki/List_of_hash_functions public static uint b2Hash(uint hash, ReadOnlySpan<byte> data, int count) Parameters hash uint data ReadOnlySpan<byte> count int Returns uint b2Yield() Yield to be used in a busy loop. public static void b2Yield()"
  },
  "api/Box2D.NET.B2TracyCZone.html": {
    "href": "api/Box2D.NET.B2TracyCZone.html",
    "title": "Enum B2TracyCZone | Box2D API",
    "keywords": "Enum B2TracyCZone Namespace Box2D.NET Assembly Box2D.NET.dll public enum B2TracyCZone Fields bullet_body_task = 23 bullets = 30 ccd = 21 collide = 34 collide_task = 32 contact_state = 35 create_contacts = 2 finalize_transfprms = 22 hit_events = 28 integrate_positions = 20 integrate_velocity = 16 merge = 24 merge_islands = 11 overflow_resitution = 6 overlap_sensors = 14 pair_task = 0 prepare_contact = 7 prepare_joints = 17 prepare_overflow_contact = 3 prepare_stages = 25 refit_bvh = 29 restitution = 9 sensor_state = 15 sensor_task = 13 sleep_islands = 31 solve_constraints = 26 solve_contact = 5 solve_joints = 19 split = 12 store_impulses = 10 tree_task = 33 update_pairs = 1 update_transforms = 27 warm_joints = 18 warm_start_contact = 8 warmstart_overflow_contact = 4 world_step = 36"
  },
  "api/Box2D.NET.B2Transform.html": {
    "href": "api/Box2D.NET.B2Transform.html",
    "title": "Struct B2Transform | Box2D API",
    "keywords": "Struct B2Transform Namespace Box2D.NET Assembly Box2D.NET.dll A 2D rigid transform public struct B2Transform Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Transform(B2Vec2, B2Rot) public B2Transform(B2Vec2 p, B2Rot q) Parameters p B2Vec2 q B2Rot Fields p public B2Vec2 p Field Value B2Vec2 q public B2Rot q Field Value B2Rot Methods TryWriteBytes(Span<byte>) public bool TryWriteBytes(Span<byte> bytes) Parameters bytes Span<byte> Returns bool"
  },
  "api/Box2D.NET.B2TreeBin.html": {
    "href": "api/Box2D.NET.B2TreeBin.html",
    "title": "Struct B2TreeBin | Box2D API",
    "keywords": "Struct B2TreeBin Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2TreeBin Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aabb public B2AABB aabb Field Value B2AABB count public int count Field Value int"
  },
  "api/Box2D.NET.B2TreeNode.html": {
    "href": "api/Box2D.NET.B2TreeNode.html",
    "title": "Struct B2TreeNode | Box2D API",
    "keywords": "Struct B2TreeNode Namespace Box2D.NET Assembly Box2D.NET.dll todo externalize this to visualize internal nodes and speed up FindPairs A node in the dynamic tree. public struct B2TreeNode Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aabb The node bounding box public B2AABB aabb Field Value B2AABB categoryBits Category bits for collision filtering public ulong categoryBits Field Value ulong children TODO: @ikpil, check union public B2TreeNodeDataUnion children Field Value B2TreeNodeDataUnion flags public ushort flags Field Value ushort height public ushort height Field Value ushort pn TODO: @ikpil, check union public B2TreeNodeConnectionUnion pn Field Value B2TreeNodeConnectionUnion"
  },
  "api/Box2D.NET.B2TreeNodeConnectionUnion.html": {
    "href": "api/Box2D.NET.B2TreeNodeConnectionUnion.html",
    "title": "Struct B2TreeNodeConnectionUnion | Box2D API",
    "keywords": "Struct B2TreeNodeConnectionUnion Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2TreeNodeConnectionUnion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields next public int next Field Value int parent public int parent Field Value int"
  },
  "api/Box2D.NET.B2TreeNodeDataUnion.html": {
    "href": "api/Box2D.NET.B2TreeNodeDataUnion.html",
    "title": "Struct B2TreeNodeDataUnion | Box2D API",
    "keywords": "Struct B2TreeNodeDataUnion Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2TreeNodeDataUnion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields child1 public int child1 Field Value int child2 public int child2 Field Value int userData public ulong userData Field Value ulong"
  },
  "api/Box2D.NET.B2TreeNodeFlags.html": {
    "href": "api/Box2D.NET.B2TreeNodeFlags.html",
    "title": "Enum B2TreeNodeFlags | Box2D API",
    "keywords": "Enum B2TreeNodeFlags Namespace Box2D.NET Assembly Box2D.NET.dll [Flags] public enum B2TreeNodeFlags Fields b2_allocatedNode = 1 b2_enlargedNode = 2 b2_leafNode = 4"
  },
  "api/Box2D.NET.B2TreePlane.html": {
    "href": "api/Box2D.NET.B2TreePlane.html",
    "title": "Struct B2TreePlane | Box2D API",
    "keywords": "Struct B2TreePlane Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2TreePlane Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields leftAABB public B2AABB leftAABB Field Value B2AABB leftCount public int leftCount Field Value int rightAABB public B2AABB rightAABB Field Value B2AABB rightCount public int rightCount Field Value int"
  },
  "api/Box2D.NET.B2TreeStats.html": {
    "href": "api/Box2D.NET.B2TreeStats.html",
    "title": "Struct B2TreeStats | Box2D API",
    "keywords": "Struct B2TreeStats Namespace Box2D.NET Assembly Box2D.NET.dll These are performance results returned by dynamic tree queries. public struct B2TreeStats Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields leafVisits Number of leaf nodes visited during the query public int leafVisits Field Value int nodeVisits Number of internal nodes visited during the query public int nodeVisits Field Value int"
  },
  "api/Box2D.NET.B2Types.html": {
    "href": "api/Box2D.NET.B2Types.html",
    "title": "Class B2Types | Box2D API",
    "keywords": "Class B2Types Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Types Inheritance object B2Types Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2DefaultBodyDef() Use this to initialize your body definition @ingroup body public static B2BodyDef b2DefaultBodyDef() Returns B2BodyDef b2DefaultChainDef() Use this to initialize your chain definition @ingroup shape public static B2ChainDef b2DefaultChainDef() Returns B2ChainDef b2DefaultDebugDraw() Use this to initialize your drawing interface. This allows you to implement a sub-set of the drawing functions. public static B2DebugDraw b2DefaultDebugDraw() Returns B2DebugDraw b2DefaultFilter() Use this to initialize your filter @ingroup shape public static B2Filter b2DefaultFilter() Returns B2Filter b2DefaultQueryFilter() Use this to initialize your query filter @ingroup shape public static B2QueryFilter b2DefaultQueryFilter() Returns B2QueryFilter b2DefaultShapeDef() Use this to initialize your shape definition @ingroup shape public static B2ShapeDef b2DefaultShapeDef() Returns B2ShapeDef b2DefaultSurfaceMaterial() Use this to initialize your surface material @ingroup shape public static B2SurfaceMaterial b2DefaultSurfaceMaterial() Returns B2SurfaceMaterial b2DefaultWorldDef() Use this to initialize your world definition @ingroup world public static B2WorldDef b2DefaultWorldDef() Returns B2WorldDef b2EmptyDrawCircle(B2Vec2, float, B2HexColor, object) public static void b2EmptyDrawCircle(B2Vec2 center, float radius, B2HexColor color, object context) Parameters center B2Vec2 radius float color B2HexColor context object b2EmptyDrawPoint(B2Vec2, float, B2HexColor, object) public static void b2EmptyDrawPoint(B2Vec2 p, float size, B2HexColor color, object context) Parameters p B2Vec2 size float color B2HexColor context object b2EmptyDrawPolygon(ReadOnlySpan<B2Vec2>, int, B2HexColor, object) public static void b2EmptyDrawPolygon(ReadOnlySpan<B2Vec2> vertices, int vertexCount, B2HexColor color, object context) Parameters vertices ReadOnlySpan<B2Vec2> vertexCount int color B2HexColor context object b2EmptyDrawSegment(B2Vec2, B2Vec2, B2HexColor, object) public static void b2EmptyDrawSegment(B2Vec2 p1, B2Vec2 p2, B2HexColor color, object context) Parameters p1 B2Vec2 p2 B2Vec2 color B2HexColor context object b2EmptyDrawSolidCapsule(B2Vec2, B2Vec2, float, B2HexColor, object) public static void b2EmptyDrawSolidCapsule(B2Vec2 p1, B2Vec2 p2, float radius, B2HexColor color, object context) Parameters p1 B2Vec2 p2 B2Vec2 radius float color B2HexColor context object b2EmptyDrawSolidCircle(ref B2Transform, float, B2HexColor, object) public static void b2EmptyDrawSolidCircle(ref B2Transform transform, float radius, B2HexColor color, object context) Parameters transform B2Transform radius float color B2HexColor context object b2EmptyDrawSolidPolygon(ref B2Transform, ReadOnlySpan<B2Vec2>, int, float, B2HexColor, object) public static void b2EmptyDrawSolidPolygon(ref B2Transform transform, ReadOnlySpan<B2Vec2> vertices, int vertexCount, float radius, B2HexColor color, object context) Parameters transform B2Transform vertices ReadOnlySpan<B2Vec2> vertexCount int radius float color B2HexColor context object b2EmptyDrawString(B2Vec2, string, B2HexColor, object) public static void b2EmptyDrawString(B2Vec2 p, string s, B2HexColor color, object context) Parameters p B2Vec2 s string color B2HexColor context object b2EmptyDrawTransform(B2Transform, object) public static void b2EmptyDrawTransform(B2Transform transform, object context) Parameters transform B2Transform context object"
  },
  "api/Box2D.NET.B2Vec2.html": {
    "href": "api/Box2D.NET.B2Vec2.html",
    "title": "Struct B2Vec2 | Box2D API",
    "keywords": "Struct B2Vec2 Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2Vec2 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Vec2(float, float) public B2Vec2(float x, float y) Parameters x float y float Fields X coordinates public float X Field Value float Y coordinates public float Y Field Value float Operators operator +(B2Vec2, B2Vec2) public static B2Vec2 operator +(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns B2Vec2 operator ==(B2Vec2, B2Vec2) public static bool operator ==(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns bool operator !=(B2Vec2, B2Vec2) public static bool operator !=(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns bool operator *(B2Vec2, float) public static B2Vec2 operator *(B2Vec2 a, float b) Parameters a B2Vec2 b float Returns B2Vec2 operator *(float, B2Vec2) public static B2Vec2 operator *(float a, B2Vec2 b) Parameters a float b B2Vec2 Returns B2Vec2 operator -(B2Vec2, B2Vec2) public static B2Vec2 operator -(B2Vec2 a, B2Vec2 b) Parameters a B2Vec2 b B2Vec2 Returns B2Vec2 operator -(B2Vec2) public static B2Vec2 operator -(B2Vec2 a) Parameters a B2Vec2 Returns B2Vec2"
  },
  "api/Box2D.NET.B2Vec2W.html": {
    "href": "api/Box2D.NET.B2Vec2W.html",
    "title": "Struct B2Vec2W | Box2D API",
    "keywords": "Struct B2Vec2W Namespace Box2D.NET Assembly Box2D.NET.dll Wide vec2 public struct B2Vec2W Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Vec2W(B2FloatW, B2FloatW) public B2Vec2W(B2FloatW X, B2FloatW Y) Parameters X B2FloatW Y B2FloatW Fields X public B2FloatW X Field Value B2FloatW Y public B2FloatW Y Field Value B2FloatW"
  },
  "api/Box2D.NET.B2Version.html": {
    "href": "api/Box2D.NET.B2Version.html",
    "title": "Struct B2Version | Box2D API",
    "keywords": "Struct B2Version Namespace Box2D.NET Assembly Box2D.NET.dll Version numbering scheme. See https://semver.org/ public struct B2Version Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2Version(int, int, int) public B2Version(int major, int minor, int revision) Parameters major int minor int revision int Fields major Significant changes public int major Field Value int minor Incremental changes public int minor Field Value int revision Bug fixes public int revision Field Value int"
  },
  "api/Box2D.NET.B2WeldJoint.html": {
    "href": "api/Box2D.NET.B2WeldJoint.html",
    "title": "Struct B2WeldJoint | Box2D API",
    "keywords": "Struct B2WeldJoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2WeldJoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA public B2Vec2 anchorA Field Value B2Vec2 anchorB public B2Vec2 anchorB Field Value B2Vec2 angularDampingRatio public float angularDampingRatio Field Value float angularHertz public float angularHertz Field Value float angularImpulse public float angularImpulse Field Value float angularSoftness public B2Softness angularSoftness Field Value B2Softness axialMass public float axialMass Field Value float deltaAngle public float deltaAngle Field Value float deltaCenter public B2Vec2 deltaCenter Field Value B2Vec2 indexA public int indexA Field Value int indexB public int indexB Field Value int linearDampingRatio public float linearDampingRatio Field Value float linearHertz public float linearHertz Field Value float linearImpulse public B2Vec2 linearImpulse Field Value B2Vec2 linearSoftness public B2Softness linearSoftness Field Value B2Softness referenceAngle public float referenceAngle Field Value float"
  },
  "api/Box2D.NET.B2WeldJointDef.html": {
    "href": "api/Box2D.NET.B2WeldJointDef.html",
    "title": "Struct B2WeldJointDef | Box2D API",
    "keywords": "Struct B2WeldJointDef Namespace Box2D.NET Assembly Box2D.NET.dll Weld joint definition A weld joint connect to bodies together rigidly. This constraint provides springs to mimic soft-body simulation. @note The approximate solver in Box2D cannot hold many bodies together rigidly @ingroup weld_joint public struct B2WeldJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields angularDampingRatio Linear damping ratio, non-dimensional. Use 1 for critical damping. public float angularDampingRatio Field Value float angularHertz Angular stiffness as Hertz (cycles per second). Use zero for maximum stiffness. public float angularHertz Field Value float bodyIdA The first attached body public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body public B2BodyId bodyIdB Field Value B2BodyId collideConnected Set this flag to true if the attached bodies should collide public bool collideConnected Field Value bool internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int linearDampingRatio Linear damping ratio, non-dimensional. Use 1 for critical damping. public float linearDampingRatio Field Value float linearHertz Linear stiffness expressed as Hertz (cycles per second). Use zero for maximum stiffness. public float linearHertz Field Value float localAnchorA The local anchor point relative to bodyA's origin public B2Vec2 localAnchorA Field Value B2Vec2 localAnchorB The local anchor point relative to bodyB's origin public B2Vec2 localAnchorB Field Value B2Vec2 referenceAngle The bodyB angle minus bodyA angle in the reference state (radians) todo maybe make this a b2Rot public float referenceAngle Field Value float userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.B2WeldJoints.html": {
    "href": "api/Box2D.NET.B2WeldJoints.html",
    "title": "Class B2WeldJoints | Box2D API",
    "keywords": "Class B2WeldJoints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2WeldJoints Inheritance object B2WeldJoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2GetWeldJointForce(B2World, B2JointSim) public static B2Vec2 b2GetWeldJointForce(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns B2Vec2 b2GetWeldJointTorque(B2World, B2JointSim) public static float b2GetWeldJointTorque(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns float b2PrepareWeldJoint(B2JointSim, B2StepContext) public static void b2PrepareWeldJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2SolveWeldJoint(B2JointSim, B2StepContext, bool) public static void b2SolveWeldJoint(B2JointSim @base, B2StepContext context, bool useBias) Parameters base B2JointSim context B2StepContext useBias bool b2WarmStartWeldJoint(B2JointSim, B2StepContext) public static void b2WarmStartWeldJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2WeldJoint_GetAngularDampingRatio(B2JointId) public static float b2WeldJoint_GetAngularDampingRatio(B2JointId jointId) Parameters jointId B2JointId Returns float b2WeldJoint_GetAngularHertz(B2JointId) public static float b2WeldJoint_GetAngularHertz(B2JointId jointId) Parameters jointId B2JointId Returns float b2WeldJoint_GetLinearDampingRatio(B2JointId) public static float b2WeldJoint_GetLinearDampingRatio(B2JointId jointId) Parameters jointId B2JointId Returns float b2WeldJoint_GetLinearHertz(B2JointId) public static float b2WeldJoint_GetLinearHertz(B2JointId jointId) Parameters jointId B2JointId Returns float b2WeldJoint_GetReferenceAngle(B2JointId) public static float b2WeldJoint_GetReferenceAngle(B2JointId jointId) Parameters jointId B2JointId Returns float b2WeldJoint_SetAngularDampingRatio(B2JointId, float) public static void b2WeldJoint_SetAngularDampingRatio(B2JointId jointId, float dampingRatio) Parameters jointId B2JointId dampingRatio float b2WeldJoint_SetAngularHertz(B2JointId, float) public static void b2WeldJoint_SetAngularHertz(B2JointId jointId, float hertz) Parameters jointId B2JointId hertz float b2WeldJoint_SetLinearDampingRatio(B2JointId, float) public static void b2WeldJoint_SetLinearDampingRatio(B2JointId jointId, float dampingRatio) Parameters jointId B2JointId dampingRatio float b2WeldJoint_SetLinearHertz(B2JointId, float) public static void b2WeldJoint_SetLinearHertz(B2JointId jointId, float hertz) Parameters jointId B2JointId hertz float b2WeldJoint_SetReferenceAngle(B2JointId, float) public static void b2WeldJoint_SetReferenceAngle(B2JointId jointId, float angleInRadians) Parameters jointId B2JointId angleInRadians float"
  },
  "api/Box2D.NET.B2WheelJoint.html": {
    "href": "api/Box2D.NET.B2WheelJoint.html",
    "title": "Struct B2WheelJoint | Box2D API",
    "keywords": "Struct B2WheelJoint Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2WheelJoint Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields anchorA public B2Vec2 anchorA Field Value B2Vec2 anchorB public B2Vec2 anchorB Field Value B2Vec2 axialMass public float axialMass Field Value float axisA public B2Vec2 axisA Field Value B2Vec2 dampingRatio public float dampingRatio Field Value float deltaCenter public B2Vec2 deltaCenter Field Value B2Vec2 enableLimit public bool enableLimit Field Value bool enableMotor public bool enableMotor Field Value bool enableSpring public bool enableSpring Field Value bool hertz public float hertz Field Value float indexA public int indexA Field Value int indexB public int indexB Field Value int localAxisA public B2Vec2 localAxisA Field Value B2Vec2 lowerImpulse public float lowerImpulse Field Value float lowerTranslation public float lowerTranslation Field Value float maxMotorTorque public float maxMotorTorque Field Value float motorImpulse public float motorImpulse Field Value float motorMass public float motorMass Field Value float motorSpeed public float motorSpeed Field Value float perpImpulse public float perpImpulse Field Value float perpMass public float perpMass Field Value float springImpulse public float springImpulse Field Value float springSoftness public B2Softness springSoftness Field Value B2Softness upperImpulse public float upperImpulse Field Value float upperTranslation public float upperTranslation Field Value float"
  },
  "api/Box2D.NET.B2WheelJointDef.html": {
    "href": "api/Box2D.NET.B2WheelJointDef.html",
    "title": "Struct B2WheelJointDef | Box2D API",
    "keywords": "Struct B2WheelJointDef Namespace Box2D.NET Assembly Box2D.NET.dll Wheel joint definition This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. @ingroup wheel_joint public struct B2WheelJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyIdA The first attached body public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body public B2BodyId bodyIdB Field Value B2BodyId collideConnected Set this flag to true if the attached bodies should collide public bool collideConnected Field Value bool dampingRatio Spring damping ratio, non-dimensional public float dampingRatio Field Value float enableLimit Enable/disable the joint linear limit public bool enableLimit Field Value bool enableMotor Enable/disable the joint rotational motor public bool enableMotor Field Value bool enableSpring Enable a linear spring along the local axis public bool enableSpring Field Value bool hertz Spring stiffness in Hertz public float hertz Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int localAnchorA The local anchor point relative to bodyA's origin public B2Vec2 localAnchorA Field Value B2Vec2 localAnchorB The local anchor point relative to bodyB's origin public B2Vec2 localAnchorB Field Value B2Vec2 localAxisA The local translation unit axis in bodyA public B2Vec2 localAxisA Field Value B2Vec2 lowerTranslation The lower translation limit public float lowerTranslation Field Value float maxMotorTorque The maximum motor torque, typically in newton-meters public float maxMotorTorque Field Value float motorSpeed The desired motor speed in radians per second public float motorSpeed Field Value float upperTranslation The upper translation limit public float upperTranslation Field Value float userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.B2WheelJoints.html": {
    "href": "api/Box2D.NET.B2WheelJoints.html",
    "title": "Class B2WheelJoints | Box2D API",
    "keywords": "Class B2WheelJoints Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2WheelJoints Inheritance object B2WheelJoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods b2DrawWheelJoint(B2DebugDraw, B2JointSim, B2Transform, B2Transform) public static void b2DrawWheelJoint(B2DebugDraw draw, B2JointSim @base, B2Transform transformA, B2Transform transformB) Parameters draw B2DebugDraw base B2JointSim transformA B2Transform transformB B2Transform b2GetWheelJointForce(B2World, B2JointSim) public static B2Vec2 b2GetWheelJointForce(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns B2Vec2 b2GetWheelJointTorque(B2World, B2JointSim) public static float b2GetWheelJointTorque(B2World world, B2JointSim @base) Parameters world B2World base B2JointSim Returns float b2PrepareWheelJoint(B2JointSim, B2StepContext) public static void b2PrepareWheelJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2SolveWheelJoint(B2JointSim, B2StepContext, bool) public static void b2SolveWheelJoint(B2JointSim @base, B2StepContext context, bool useBias) Parameters base B2JointSim context B2StepContext useBias bool b2WarmStartWheelJoint(B2JointSim, B2StepContext) public static void b2WarmStartWheelJoint(B2JointSim @base, B2StepContext context) Parameters base B2JointSim context B2StepContext b2WheelJoint_EnableLimit(B2JointId, bool) public static void b2WheelJoint_EnableLimit(B2JointId jointId, bool enableLimit) Parameters jointId B2JointId enableLimit bool b2WheelJoint_EnableMotor(B2JointId, bool) public static void b2WheelJoint_EnableMotor(B2JointId jointId, bool enableMotor) Parameters jointId B2JointId enableMotor bool b2WheelJoint_EnableSpring(B2JointId, bool) public static void b2WheelJoint_EnableSpring(B2JointId jointId, bool enableSpring) Parameters jointId B2JointId enableSpring bool b2WheelJoint_GetLowerLimit(B2JointId) public static float b2WheelJoint_GetLowerLimit(B2JointId jointId) Parameters jointId B2JointId Returns float b2WheelJoint_GetMaxMotorTorque(B2JointId) public static float b2WheelJoint_GetMaxMotorTorque(B2JointId jointId) Parameters jointId B2JointId Returns float b2WheelJoint_GetMotorSpeed(B2JointId) public static float b2WheelJoint_GetMotorSpeed(B2JointId jointId) Parameters jointId B2JointId Returns float b2WheelJoint_GetMotorTorque(B2JointId) public static float b2WheelJoint_GetMotorTorque(B2JointId jointId) Parameters jointId B2JointId Returns float b2WheelJoint_GetSpringDampingRatio(B2JointId) public static float b2WheelJoint_GetSpringDampingRatio(B2JointId jointId) Parameters jointId B2JointId Returns float b2WheelJoint_GetSpringHertz(B2JointId) public static float b2WheelJoint_GetSpringHertz(B2JointId jointId) Parameters jointId B2JointId Returns float b2WheelJoint_GetUpperLimit(B2JointId) public static float b2WheelJoint_GetUpperLimit(B2JointId jointId) Parameters jointId B2JointId Returns float b2WheelJoint_IsLimitEnabled(B2JointId) public static bool b2WheelJoint_IsLimitEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2WheelJoint_IsMotorEnabled(B2JointId) public static bool b2WheelJoint_IsMotorEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2WheelJoint_IsSpringEnabled(B2JointId) public static bool b2WheelJoint_IsSpringEnabled(B2JointId jointId) Parameters jointId B2JointId Returns bool b2WheelJoint_SetLimits(B2JointId, float, float) public static void b2WheelJoint_SetLimits(B2JointId jointId, float lower, float upper) Parameters jointId B2JointId lower float upper float b2WheelJoint_SetMaxMotorTorque(B2JointId, float) public static void b2WheelJoint_SetMaxMotorTorque(B2JointId jointId, float torque) Parameters jointId B2JointId torque float b2WheelJoint_SetMotorSpeed(B2JointId, float) public static void b2WheelJoint_SetMotorSpeed(B2JointId jointId, float motorSpeed) Parameters jointId B2JointId motorSpeed float b2WheelJoint_SetSpringDampingRatio(B2JointId, float) public static void b2WheelJoint_SetSpringDampingRatio(B2JointId jointId, float dampingRatio) Parameters jointId B2JointId dampingRatio float b2WheelJoint_SetSpringHertz(B2JointId, float) public static void b2WheelJoint_SetSpringHertz(B2JointId jointId, float hertz) Parameters jointId B2JointId hertz float"
  },
  "api/Box2D.NET.B2WorkerContext.html": {
    "href": "api/Box2D.NET.B2WorkerContext.html",
    "title": "Class B2WorkerContext | Box2D API",
    "keywords": "Class B2WorkerContext Namespace Box2D.NET Assembly Box2D.NET.dll public class B2WorkerContext Inheritance object B2WorkerContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields context public B2StepContext context Field Value B2StepContext userTask public object userTask Field Value object workerIndex public int workerIndex Field Value int Methods Clear() public void Clear()"
  },
  "api/Box2D.NET.B2World.html": {
    "href": "api/Box2D.NET.B2World.html",
    "title": "Class B2World | Box2D API",
    "keywords": "Class B2World Namespace Box2D.NET Assembly Box2D.NET.dll The world struct manages all physics entities, dynamic simulation, and asynchronous queries. The world also contains efficient memory management facilities. public class B2World Inheritance object B2World Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields activeTaskCount public int activeTaskCount Field Value int arena public B2ArenaAllocator arena Field Value B2ArenaAllocator bodies This is a sparse array that maps body ids to the body data stored in solver sets. As sims move within a set or across set. Indices come from id pool. public B2Array<B2Body> bodies Field Value B2Array<B2Body> bodyIdPool The body id pool is used to allocate and recycle body ids. Body ids provide a stable identifier for users, but incur caches misses when used to access body data. Aligns with b2Body. public B2IdPool bodyIdPool Field Value B2IdPool bodyMoveEvents public B2Array<B2BodyMoveEvent> bodyMoveEvents Field Value B2Array<B2BodyMoveEvent> broadPhase public B2BroadPhase broadPhase Field Value B2BroadPhase chainIdPool public B2IdPool chainIdPool Field Value B2IdPool chainShapes public B2Array<B2ChainShape> chainShapes Field Value B2Array<B2ChainShape> constraintGraph public B2ConstraintGraph constraintGraph Field Value B2ConstraintGraph contactBeginEvents public B2Array<B2ContactBeginTouchEvent> contactBeginEvents Field Value B2Array<B2ContactBeginTouchEvent> contactDampingRatio public float contactDampingRatio Field Value float contactEndEvents public B2Array<B2ContactEndTouchEvent>[] contactEndEvents Field Value B2Array<B2ContactEndTouchEvent>[] contactHertz public float contactHertz Field Value float contactHitEvents public B2Array<B2ContactHitEvent> contactHitEvents Field Value B2Array<B2ContactHitEvent> contactIdPool Used to create stable ids for contacts public B2IdPool contactIdPool Field Value B2IdPool contacts This is a sparse array that maps contact ids to the contact data stored in the constraint graph or in the solver sets. public B2Array<B2Contact> contacts Field Value B2Array<B2Contact> customFilterContext public object customFilterContext Field Value object customFilterFcn public b2CustomFilterFcn customFilterFcn Field Value b2CustomFilterFcn debugBodySet Used to track debug draw public B2BitSet debugBodySet Field Value B2BitSet debugContactSet public B2BitSet debugContactSet Field Value B2BitSet debugIslandSet public B2BitSet debugIslandSet Field Value B2BitSet debugJointSet public B2BitSet debugJointSet Field Value B2BitSet enableContinuous public bool enableContinuous Field Value bool enableSleep public bool enableSleep Field Value bool enableSpeculative public bool enableSpeculative Field Value bool enableWarmStarting public bool enableWarmStarting Field Value bool endEventArrayIndex public int endEventArrayIndex Field Value int enqueueTaskFcn public b2EnqueueTaskCallback enqueueTaskFcn Field Value b2EnqueueTaskCallback finishTaskFcn public b2FinishTaskCallback finishTaskFcn Field Value b2FinishTaskCallback frictionCallback public b2FrictionCallback frictionCallback Field Value b2FrictionCallback generation public ushort generation Field Value ushort gravity public B2Vec2 gravity Field Value B2Vec2 hitEventThreshold public float hitEventThreshold Field Value float inUse public bool inUse Field Value bool inv_h Remember type step used for reporting forces and torques public float inv_h Field Value float islandIdPool Used to create stable ids for islands public B2IdPool islandIdPool Field Value B2IdPool islands This is a sparse array that maps island ids to the island data stored in the solver sets. public B2Array<B2Island> islands Field Value B2Array<B2Island> jointDampingRatio public float jointDampingRatio Field Value float jointHertz public float jointHertz Field Value float jointIdPool Used to create stable ids for joints public B2IdPool jointIdPool Field Value B2IdPool joints This is a sparse array that maps joint ids to the joint data stored in the constraint graph or in the solver sets. public B2Array<B2Joint> joints Field Value B2Array<B2Joint> locked public bool locked Field Value bool maxContactPushSpeed public float maxContactPushSpeed Field Value float maxLinearSpeed public float maxLinearSpeed Field Value float preSolveContext public object preSolveContext Field Value object preSolveFcn public b2PreSolveFcn preSolveFcn Field Value b2PreSolveFcn profile public B2Profile profile Field Value B2Profile restitutionCallback public b2RestitutionCallback restitutionCallback Field Value b2RestitutionCallback restitutionThreshold public float restitutionThreshold Field Value float sensorBeginEvents public B2Array<B2SensorBeginTouchEvent> sensorBeginEvents Field Value B2Array<B2SensorBeginTouchEvent> sensorEndEvents End events are double buffered so that the user doesn't need to flush events public B2Array<B2SensorEndTouchEvent>[] sensorEndEvents Field Value B2Array<B2SensorEndTouchEvent>[] sensorTaskContexts public B2Array<B2SensorTaskContext> sensorTaskContexts Field Value B2Array<B2SensorTaskContext> sensors This is a dense array of sensor data. public B2Array<B2Sensor> sensors Field Value B2Array<B2Sensor> shapeIdPool public B2IdPool shapeIdPool Field Value B2IdPool shapes These are sparse arrays that point into the pools above public B2Array<B2Shape> shapes Field Value B2Array<B2Shape> solverSetIdPool Provides free list for solver sets. public B2IdPool solverSetIdPool Field Value B2IdPool solverSets Solvers sets allow sims to be stored in contiguous arrays. The first set is all static sims. The second set is active sims. The third set is disabled sims. The remaining sets are sleeping islands. public B2Array<B2SolverSet> solverSets Field Value B2Array<B2SolverSet> splitIslandId Identify islands for splitting as follows: I want to split islands so smaller islands can sleep when a body comes to rest and its sleep timer trips, I can look at the island and flag it for splitting if it has removed constraints islands that have removed constraints must be put split first because I don't want to wake bodies incorrectly otherwise I can use the awake islands that have bodies wanting to sleep as the splitting candidates if no bodies want to sleep then there is no reason to perform island splitting public int splitIslandId Field Value int stepIndex Id that is incremented every time step public ulong stepIndex Field Value ulong taskContexts Per thread storage public B2Array<B2TaskContext> taskContexts Field Value B2Array<B2TaskContext> taskCount public int taskCount Field Value int tempWorkerContext TODO: @ikpil for b2Solve public readonly B2WorkerContext[] tempWorkerContext Field Value B2WorkerContext[] userData public object userData Field Value object userTaskContext public object userTaskContext Field Value object userTreeTask public object userTreeTask Field Value object workerCount public int workerCount Field Value int worldId public ushort worldId Field Value ushort Methods Clear() public void Clear()"
  },
  "api/Box2D.NET.B2WorldDef.html": {
    "href": "api/Box2D.NET.B2WorldDef.html",
    "title": "Struct B2WorldDef | Box2D API",
    "keywords": "Struct B2WorldDef Namespace Box2D.NET Assembly Box2D.NET.dll World definition used to create a simulation world. Must be initialized using b2DefaultWorldDef(). @ingroup world public struct B2WorldDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields contactDampingRatio Contact bounciness. Non-dimensional. You can speed up overlap recovery by decreasing this with the trade-off that overlap resolution becomes more energetic. public float contactDampingRatio Field Value float contactHertz Contact stiffness. Cycles per second. Increasing this increases the speed of overlap recovery, but can introduce jitter. public float contactHertz Field Value float enableContinuous Enable continuous collision public bool enableContinuous Field Value bool enableSleep Can bodies go to sleep to improve performance public bool enableSleep Field Value bool enqueueTask Function to spawn tasks public b2EnqueueTaskCallback enqueueTask Field Value b2EnqueueTaskCallback finishTask Function to finish a task public b2FinishTaskCallback finishTask Field Value b2FinishTaskCallback frictionCallback Optional mixing callback for friction. The default uses sqrt(frictionA * frictionB). public b2FrictionCallback frictionCallback Field Value b2FrictionCallback gravity Gravity vector. Box2D has no up-vector defined. public B2Vec2 gravity Field Value B2Vec2 hitEventThreshold Threshold speed for hit events. Usually meters per second. public float hitEventThreshold Field Value float internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int jointDampingRatio Joint bounciness. Non-dimensional. public float jointDampingRatio Field Value float jointHertz Joint stiffness. Cycles per second. public float jointHertz Field Value float maxContactPushSpeed This parameter controls how fast overlap is resolved and usually has units of meters per second. This only puts a cap on the resolution speed. The resolution speed is increased by increasing the hertz and/or decreasing the damping ratio. public float maxContactPushSpeed Field Value float maximumLinearSpeed Maximum linear speed. Usually meters per second. public float maximumLinearSpeed Field Value float restitutionCallback Optional mixing callback for restitution. The default uses max(restitutionA, restitutionB). public b2RestitutionCallback restitutionCallback Field Value b2RestitutionCallback restitutionThreshold Restitution speed threshold, usually in m/s. Collisions above this speed have restitution applied (will bounce). public float restitutionThreshold Field Value float userData User data public object userData Field Value object userTaskContext User context that is provided to enqueueTask and finishTask public object userTaskContext Field Value object workerCount Number of workers to use with the provided task system. Box2D performs best when using only performance cores and accessing a single L2 cache. Efficiency cores and hyper-threading provide little benefit and may even harm performance. @note Box2D does not create threads. This is the number of threads your applications has created that you are allocating to b2World_Step. @warning Do not modify the default value unless you are also providing a task system and providing task callbacks (enqueueTask and finishTask). public int workerCount Field Value int"
  },
  "api/Box2D.NET.B2WorldId.html": {
    "href": "api/Box2D.NET.B2WorldId.html",
    "title": "Struct B2WorldId | Box2D API",
    "keywords": "Struct B2WorldId Namespace Box2D.NET Assembly Box2D.NET.dll World id references a world instance. This should be treated as an opaque handle. public readonly struct B2WorldId Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2WorldId(ushort, ushort) public B2WorldId(ushort index1, ushort generation) Parameters index1 ushort generation ushort Fields generation public readonly ushort generation Field Value ushort index1 public readonly ushort index1 Field Value ushort"
  },
  "api/Box2D.NET.B2WorldMoverCastContext.html": {
    "href": "api/Box2D.NET.B2WorldMoverCastContext.html",
    "title": "Struct B2WorldMoverCastContext | Box2D API",
    "keywords": "Struct B2WorldMoverCastContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2WorldMoverCastContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2WorldMoverCastContext(B2World, B2QueryFilter, float) public B2WorldMoverCastContext(B2World world, B2QueryFilter filter, float fraction) Parameters world B2World filter B2QueryFilter fraction float Fields filter public B2QueryFilter filter Field Value B2QueryFilter fraction public float fraction Field Value float world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2WorldMoverContext.html": {
    "href": "api/Box2D.NET.B2WorldMoverContext.html",
    "title": "Struct B2WorldMoverContext | Box2D API",
    "keywords": "Struct B2WorldMoverContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2WorldMoverContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fcn public b2PlaneResultFcn fcn Field Value b2PlaneResultFcn filter public B2QueryFilter filter Field Value B2QueryFilter mover public B2Capsule mover Field Value B2Capsule userContext public object userContext Field Value object world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2WorldOverlapContext.html": {
    "href": "api/Box2D.NET.B2WorldOverlapContext.html",
    "title": "Struct B2WorldOverlapContext | Box2D API",
    "keywords": "Struct B2WorldOverlapContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2WorldOverlapContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2WorldOverlapContext(B2World, b2OverlapResultFcn, B2QueryFilter, B2ShapeProxy, object) public B2WorldOverlapContext(B2World world, b2OverlapResultFcn fcn, B2QueryFilter filter, B2ShapeProxy proxy, object userContext) Parameters world B2World fcn b2OverlapResultFcn filter B2QueryFilter proxy B2ShapeProxy userContext object Fields fcn public b2OverlapResultFcn fcn Field Value b2OverlapResultFcn filter public B2QueryFilter filter Field Value B2QueryFilter proxy public B2ShapeProxy proxy Field Value B2ShapeProxy userContext public object userContext Field Value object world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2WorldQueryContext.html": {
    "href": "api/Box2D.NET.B2WorldQueryContext.html",
    "title": "Struct B2WorldQueryContext | Box2D API",
    "keywords": "Struct B2WorldQueryContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2WorldQueryContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2WorldQueryContext(B2World, b2OverlapResultFcn, B2QueryFilter, object) public B2WorldQueryContext(B2World world, b2OverlapResultFcn fcn, B2QueryFilter filter, object userContext) Parameters world B2World fcn b2OverlapResultFcn filter B2QueryFilter userContext object Fields fcn public b2OverlapResultFcn fcn Field Value b2OverlapResultFcn filter public B2QueryFilter filter Field Value B2QueryFilter userContext public object userContext Field Value object world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2WorldRayCastContext.html": {
    "href": "api/Box2D.NET.B2WorldRayCastContext.html",
    "title": "Struct B2WorldRayCastContext | Box2D API",
    "keywords": "Struct B2WorldRayCastContext Namespace Box2D.NET Assembly Box2D.NET.dll public struct B2WorldRayCastContext Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors B2WorldRayCastContext(B2World, b2CastResultFcn, B2QueryFilter, float, object) public B2WorldRayCastContext(B2World world, b2CastResultFcn fcn, B2QueryFilter filter, float fraction, object userContext) Parameters world B2World fcn b2CastResultFcn filter B2QueryFilter fraction float userContext object Fields fcn public b2CastResultFcn fcn Field Value b2CastResultFcn filter public B2QueryFilter filter Field Value B2QueryFilter fraction public float fraction Field Value float userContext public object userContext Field Value object world public B2World world Field Value B2World"
  },
  "api/Box2D.NET.B2Worlds.html": {
    "href": "api/Box2D.NET.B2Worlds.html",
    "title": "Class B2Worlds | Box2D API",
    "keywords": "Class B2Worlds Namespace Box2D.NET Assembly Box2D.NET.dll public static class B2Worlds Inheritance object B2Worlds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawQueryCallback(int, ulong, ref B2DrawContext) public static bool DrawQueryCallback(int proxyId, ulong userData, ref B2DrawContext context) Parameters proxyId int userData ulong context B2DrawContext Returns bool ExplosionCallback(int, ulong, ref B2ExplosionContext) public static bool ExplosionCallback(int proxyId, ulong userData, ref B2ExplosionContext context) Parameters proxyId int userData ulong context B2ExplosionContext Returns bool MoverCastCallback(ref B2ShapeCastInput, int, ulong, ref B2WorldMoverCastContext) public static float MoverCastCallback(ref B2ShapeCastInput input, int proxyId, ulong userData, ref B2WorldMoverCastContext context) Parameters input B2ShapeCastInput proxyId int userData ulong context B2WorldMoverCastContext Returns float RayCastCallback(ref B2RayCastInput, int, ulong, ref B2WorldRayCastContext) public static float RayCastCallback(ref B2RayCastInput input, int proxyId, ulong userData, ref B2WorldRayCastContext context) Parameters input B2RayCastInput proxyId int userData ulong context B2WorldRayCastContext Returns float ShapeCastCallback(ref B2ShapeCastInput, int, ulong, ref B2WorldRayCastContext) public static float ShapeCastCallback(ref B2ShapeCastInput input, int proxyId, ulong userData, ref B2WorldRayCastContext context) Parameters input B2ShapeCastInput proxyId int userData ulong context B2WorldRayCastContext Returns float TreeCollideCallback(int, ulong, ref B2WorldMoverContext) public static bool TreeCollideCallback(int proxyId, ulong userData, ref B2WorldMoverContext context) Parameters proxyId int userData ulong context B2WorldMoverContext Returns bool TreeOverlapCallback(int, ulong, ref B2WorldOverlapContext) public static bool TreeOverlapCallback(int proxyId, ulong userData, ref B2WorldOverlapContext context) Parameters proxyId int userData ulong context B2WorldOverlapContext Returns bool b2AddNonTouchingContact(B2World, B2Contact, B2ContactSim) public static void b2AddNonTouchingContact(B2World world, B2Contact contact, B2ContactSim contactSim) Parameters world B2World contact B2Contact contactSim B2ContactSim b2Body_IsValid(B2BodyId) public static bool b2Body_IsValid(B2BodyId id) Parameters id B2BodyId Returns bool b2Chain_IsValid(B2ChainId) public static bool b2Chain_IsValid(B2ChainId id) Parameters id B2ChainId Returns bool b2Collide(B2StepContext) Narrow-phase collision public static void b2Collide(B2StepContext context) Parameters context B2StepContext b2CollideTask(int, int, uint, object) public static void b2CollideTask(int startIndex, int endIndex, uint threadIndex, object context) Parameters startIndex int endIndex int threadIndex uint context object b2CreateWorld(ref B2WorldDef) public static B2WorldId b2CreateWorld(ref B2WorldDef def) Parameters def B2WorldDef Returns B2WorldId b2DefaultAddTaskFcn(b2TaskCallback, int, int, object, object) public static object b2DefaultAddTaskFcn(b2TaskCallback task, int count, int minRange, object taskContext, object userContext) Parameters task b2TaskCallback count int minRange int taskContext object userContext object Returns object b2DefaultFinishTaskFcn(object, object) public static void b2DefaultFinishTaskFcn(object userTask, object userContext) Parameters userTask object userContext object b2DefaultFrictionCallback(float, int, float, int) public static float b2DefaultFrictionCallback(float frictionA, int materialA, float frictionB, int materialB) Parameters frictionA float materialA int frictionB float materialB int Returns float b2DefaultRestitutionCallback(float, int, float, int) public static float b2DefaultRestitutionCallback(float restitutionA, int materialA, float restitutionB, int materialB) Parameters restitutionA float materialA int restitutionB float materialB int Returns float b2DestroyWorld(B2WorldId) public static void b2DestroyWorld(B2WorldId worldId) Parameters worldId B2WorldId b2DrawShape(B2DebugDraw, B2Shape, B2Transform, B2HexColor) public static void b2DrawShape(B2DebugDraw draw, B2Shape shape, B2Transform xf, B2HexColor color) Parameters draw B2DebugDraw shape B2Shape xf B2Transform color B2HexColor b2DrawWithBounds(B2World, B2DebugDraw) todo this has varying order for moving shapes, causing flicker when overlapping shapes are moving solution: display order by shape id modulus 3, keep 3 buckets in GLSolid* and flush in 3 passes. public static void b2DrawWithBounds(B2World world, B2DebugDraw draw) Parameters world B2World draw B2DebugDraw b2GetWorld(int) public static B2World b2GetWorld(int index) Parameters index int Returns B2World b2GetWorldFromId(B2WorldId) public static B2World b2GetWorldFromId(B2WorldId id) Parameters id B2WorldId Returns B2World b2GetWorldLocked(int) public static B2World b2GetWorldLocked(int index) Parameters index int Returns B2World b2Joint_IsValid(B2JointId) public static bool b2Joint_IsValid(B2JointId id) Parameters id B2JointId Returns bool b2RayCastClosestFcn(B2ShapeId, B2Vec2, B2Vec2, float, object) This callback finds the closest hit. This is the most common callback used in games. public static float b2RayCastClosestFcn(B2ShapeId shapeId, B2Vec2 point, B2Vec2 normal, float fraction, object context) Parameters shapeId B2ShapeId point B2Vec2 normal B2Vec2 fraction float context object Returns float b2RemoveNonTouchingContact(B2World, int, int) public static void b2RemoveNonTouchingContact(B2World world, int setIndex, int localIndex) Parameters world B2World setIndex int localIndex int b2Shape_IsValid(B2ShapeId) public static bool b2Shape_IsValid(B2ShapeId id) Parameters id B2ShapeId Returns bool b2UpdateTreesTask(int, int, uint, object) public static void b2UpdateTreesTask(int startIndex, int endIndex, uint threadIndex, object context) Parameters startIndex int endIndex int threadIndex uint context object b2ValidateConnectivity(B2World) public static void b2ValidateConnectivity(B2World world) Parameters world B2World b2ValidateContacts(B2World) public static void b2ValidateContacts(B2World world) Parameters world B2World b2ValidateSolverSets(B2World) public static void b2ValidateSolverSets(B2World world) Parameters world B2World b2World_CastMover(B2WorldId, ref B2Capsule, B2Vec2, B2QueryFilter) Cast a capsule mover through the world. This is a special shape cast that handles sliding along other shapes while reducing clipping. public static float b2World_CastMover(B2WorldId worldId, ref B2Capsule mover, B2Vec2 translation, B2QueryFilter filter) Parameters worldId B2WorldId mover B2Capsule translation B2Vec2 filter B2QueryFilter Returns float b2World_CastRay(B2WorldId, B2Vec2, B2Vec2, B2QueryFilter, b2CastResultFcn, object) Cast a ray into the world to collect shapes in the path of the ray. Your callback function controls whether you get the closest point, any point, or n-points. @note The callback function may receive shapes in any order @param worldId The world to cast the ray against @param origin The start point of the ray @param translation The translation of the ray from the start point to the end point @param filter Contains bit flags to filter unwanted shapes from the results @param fcn A user implemented callback function @param context A user context that is passed along to the callback function @return traversal performance counters public static B2TreeStats b2World_CastRay(B2WorldId worldId, B2Vec2 origin, B2Vec2 translation, B2QueryFilter filter, b2CastResultFcn fcn, object context) Parameters worldId B2WorldId origin B2Vec2 translation B2Vec2 filter B2QueryFilter fcn b2CastResultFcn context object Returns B2TreeStats b2World_CastRayClosest(B2WorldId, B2Vec2, B2Vec2, B2QueryFilter) Cast a ray into the world to collect the closest hit. This is a convenience function. Ignores initial overlap. This is less general than b2World_CastRay() and does not allow for custom filtering. public static B2RayResult b2World_CastRayClosest(B2WorldId worldId, B2Vec2 origin, B2Vec2 translation, B2QueryFilter filter) Parameters worldId B2WorldId origin B2Vec2 translation B2Vec2 filter B2QueryFilter Returns B2RayResult b2World_CastShape(B2WorldId, ref B2ShapeProxy, B2Vec2, B2QueryFilter, b2CastResultFcn, object) Cast a shape through the world. Similar to a cast ray except that a shape is cast instead of a point. @see b2World_CastRay public static B2TreeStats b2World_CastShape(B2WorldId worldId, ref B2ShapeProxy proxy, B2Vec2 translation, B2QueryFilter filter, b2CastResultFcn fcn, object context) Parameters worldId B2WorldId proxy B2ShapeProxy translation B2Vec2 filter B2QueryFilter fcn b2CastResultFcn context object Returns B2TreeStats b2World_CollideMover(B2WorldId, ref B2Capsule, B2QueryFilter, b2PlaneResultFcn, object) Collide a capsule mover with the world, gathering collision planes that can be fed to b2SolvePlanes. Useful for kinematic character movement It is tempting to use a shape proxy for the mover, but this makes handling deep overlap difficult and the generality may not be worth it. public static void b2World_CollideMover(B2WorldId worldId, ref B2Capsule mover, B2QueryFilter filter, b2PlaneResultFcn fcn, object context) Parameters worldId B2WorldId mover B2Capsule filter B2QueryFilter fcn b2PlaneResultFcn context object b2World_Draw(B2WorldId, B2DebugDraw) public static void b2World_Draw(B2WorldId worldId, B2DebugDraw draw) Parameters worldId B2WorldId draw B2DebugDraw b2World_DumpMemoryStats(B2WorldId) public static void b2World_DumpMemoryStats(B2WorldId worldId) Parameters worldId B2WorldId b2World_EnableContinuous(B2WorldId, bool) public static void b2World_EnableContinuous(B2WorldId worldId, bool flag) Parameters worldId B2WorldId flag bool b2World_EnableSleeping(B2WorldId, bool) public static void b2World_EnableSleeping(B2WorldId worldId, bool flag) Parameters worldId B2WorldId flag bool b2World_EnableSpeculative(B2WorldId, bool) public static void b2World_EnableSpeculative(B2WorldId worldId, bool flag) Parameters worldId B2WorldId flag bool b2World_EnableWarmStarting(B2WorldId, bool) Enable/disable constraint warm starting. Advanced feature for testing. Disabling warm starting greatly reduces stability and provides no performance gain. public static void b2World_EnableWarmStarting(B2WorldId worldId, bool flag) Parameters worldId B2WorldId flag bool b2World_Explode(B2WorldId, ref B2ExplosionDef) public static void b2World_Explode(B2WorldId worldId, ref B2ExplosionDef explosionDef) Parameters worldId B2WorldId explosionDef B2ExplosionDef b2World_GetAwakeBodyCount(B2WorldId) public static int b2World_GetAwakeBodyCount(B2WorldId worldId) Parameters worldId B2WorldId Returns int b2World_GetBodyEvents(B2WorldId) public static B2BodyEvents b2World_GetBodyEvents(B2WorldId worldId) Parameters worldId B2WorldId Returns B2BodyEvents b2World_GetContactEvents(B2WorldId) public static B2ContactEvents b2World_GetContactEvents(B2WorldId worldId) Parameters worldId B2WorldId Returns B2ContactEvents b2World_GetCounters(B2WorldId) public static B2Counters b2World_GetCounters(B2WorldId worldId) Parameters worldId B2WorldId Returns B2Counters b2World_GetGravity(B2WorldId) public static B2Vec2 b2World_GetGravity(B2WorldId worldId) Parameters worldId B2WorldId Returns B2Vec2 b2World_GetHitEventThreshold(B2WorldId) public static float b2World_GetHitEventThreshold(B2WorldId worldId) Parameters worldId B2WorldId Returns float b2World_GetMaximumLinearSpeed(B2WorldId) public static float b2World_GetMaximumLinearSpeed(B2WorldId worldId) Parameters worldId B2WorldId Returns float b2World_GetProfile(B2WorldId) public static B2Profile b2World_GetProfile(B2WorldId worldId) Parameters worldId B2WorldId Returns B2Profile b2World_GetRestitutionThreshold(B2WorldId) public static float b2World_GetRestitutionThreshold(B2WorldId worldId) Parameters worldId B2WorldId Returns float b2World_GetSensorEvents(B2WorldId) public static B2SensorEvents b2World_GetSensorEvents(B2WorldId worldId) Parameters worldId B2WorldId Returns B2SensorEvents b2World_GetUserData(B2WorldId) public static object b2World_GetUserData(B2WorldId worldId) Parameters worldId B2WorldId Returns object b2World_IsContinuousEnabled(B2WorldId) public static bool b2World_IsContinuousEnabled(B2WorldId worldId) Parameters worldId B2WorldId Returns bool b2World_IsSleepingEnabled(B2WorldId) public static bool b2World_IsSleepingEnabled(B2WorldId worldId) Parameters worldId B2WorldId Returns bool b2World_IsValid(B2WorldId) public static bool b2World_IsValid(B2WorldId id) Parameters id B2WorldId Returns bool b2World_IsWarmStartingEnabled(B2WorldId) public static bool b2World_IsWarmStartingEnabled(B2WorldId worldId) Parameters worldId B2WorldId Returns bool b2World_OverlapAABB(B2WorldId, B2AABB, B2QueryFilter, b2OverlapResultFcn, object) public static B2TreeStats b2World_OverlapAABB(B2WorldId worldId, B2AABB aabb, B2QueryFilter filter, b2OverlapResultFcn fcn, object context) Parameters worldId B2WorldId aabb B2AABB filter B2QueryFilter fcn b2OverlapResultFcn context object Returns B2TreeStats b2World_OverlapShape(B2WorldId, ref B2ShapeProxy, B2QueryFilter, b2OverlapResultFcn, object) Overlap test for all shapes that overlap the provided shape proxy. public static B2TreeStats b2World_OverlapShape(B2WorldId worldId, ref B2ShapeProxy proxy, B2QueryFilter filter, b2OverlapResultFcn fcn, object context) Parameters worldId B2WorldId proxy B2ShapeProxy filter B2QueryFilter fcn b2OverlapResultFcn context object Returns B2TreeStats b2World_RebuildStaticTree(B2WorldId) public static void b2World_RebuildStaticTree(B2WorldId worldId) Parameters worldId B2WorldId b2World_SetContactTuning(B2WorldId, float, float, float) public static void b2World_SetContactTuning(B2WorldId worldId, float hertz, float dampingRatio, float pushSpeed) Parameters worldId B2WorldId hertz float dampingRatio float pushSpeed float b2World_SetCustomFilterCallback(B2WorldId, b2CustomFilterFcn, object) public static void b2World_SetCustomFilterCallback(B2WorldId worldId, b2CustomFilterFcn fcn, object context) Parameters worldId B2WorldId fcn b2CustomFilterFcn context object b2World_SetFrictionCallback(B2WorldId, b2FrictionCallback) public static void b2World_SetFrictionCallback(B2WorldId worldId, b2FrictionCallback callback) Parameters worldId B2WorldId callback b2FrictionCallback b2World_SetGravity(B2WorldId, B2Vec2) public static void b2World_SetGravity(B2WorldId worldId, B2Vec2 gravity) Parameters worldId B2WorldId gravity B2Vec2 b2World_SetHitEventThreshold(B2WorldId, float) public static void b2World_SetHitEventThreshold(B2WorldId worldId, float value) Parameters worldId B2WorldId value float b2World_SetJointTuning(B2WorldId, float, float) public static void b2World_SetJointTuning(B2WorldId worldId, float hertz, float dampingRatio) Parameters worldId B2WorldId hertz float dampingRatio float b2World_SetMaximumLinearSpeed(B2WorldId, float) public static void b2World_SetMaximumLinearSpeed(B2WorldId worldId, float maximumLinearSpeed) Parameters worldId B2WorldId maximumLinearSpeed float b2World_SetPreSolveCallback(B2WorldId, b2PreSolveFcn, object) public static void b2World_SetPreSolveCallback(B2WorldId worldId, b2PreSolveFcn fcn, object context) Parameters worldId B2WorldId fcn b2PreSolveFcn context object b2World_SetRestitutionCallback(B2WorldId, b2RestitutionCallback) public static void b2World_SetRestitutionCallback(B2WorldId worldId, b2RestitutionCallback callback) Parameters worldId B2WorldId callback b2RestitutionCallback b2World_SetRestitutionThreshold(B2WorldId, float) public static void b2World_SetRestitutionThreshold(B2WorldId worldId, float value) Parameters worldId B2WorldId value float b2World_SetUserData(B2WorldId, object) public static void b2World_SetUserData(B2WorldId worldId, object userData) Parameters worldId B2WorldId userData object b2World_Step(B2WorldId, float, int) public static void b2World_Step(B2WorldId worldId, float timeStep, int subStepCount) Parameters worldId B2WorldId timeStep float subStepCount int"
  },
  "api/Box2D.NET.DrawCircleFcn.html": {
    "href": "api/Box2D.NET.DrawCircleFcn.html",
    "title": "Delegate DrawCircleFcn | Box2D API",
    "keywords": "Delegate DrawCircleFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a circle. public delegate void DrawCircleFcn(B2Vec2 center, float radius, B2HexColor color, object context) Parameters center B2Vec2 Draw a circle. radius float Draw a circle. color B2HexColor Draw a circle. context object Draw a circle."
  },
  "api/Box2D.NET.DrawPointFcn.html": {
    "href": "api/Box2D.NET.DrawPointFcn.html",
    "title": "Delegate DrawPointFcn | Box2D API",
    "keywords": "Delegate DrawPointFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a point. public delegate void DrawPointFcn(B2Vec2 p, float size, B2HexColor color, object context) Parameters p B2Vec2 Draw a point. size float Draw a point. color B2HexColor Draw a point. context object Draw a point."
  },
  "api/Box2D.NET.DrawPolygonFcn.html": {
    "href": "api/Box2D.NET.DrawPolygonFcn.html",
    "title": "Delegate DrawPolygonFcn | Box2D API",
    "keywords": "Delegate DrawPolygonFcn Namespace Box2D.NET Assembly Box2D.NET.dll public delegate void DrawPolygonFcn(ReadOnlySpan<B2Vec2> vertices, int vertexCount, B2HexColor color, object context) Parameters vertices ReadOnlySpan<B2Vec2> vertexCount int color B2HexColor context object"
  },
  "api/Box2D.NET.DrawSegmentFcn.html": {
    "href": "api/Box2D.NET.DrawSegmentFcn.html",
    "title": "Delegate DrawSegmentFcn | Box2D API",
    "keywords": "Delegate DrawSegmentFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a line segment. public delegate void DrawSegmentFcn(B2Vec2 p1, B2Vec2 p2, B2HexColor color, object context) Parameters p1 B2Vec2 Draw a line segment. p2 B2Vec2 Draw a line segment. color B2HexColor Draw a line segment. context object Draw a line segment."
  },
  "api/Box2D.NET.DrawSolidCapsuleFcn.html": {
    "href": "api/Box2D.NET.DrawSolidCapsuleFcn.html",
    "title": "Delegate DrawSolidCapsuleFcn | Box2D API",
    "keywords": "Delegate DrawSolidCapsuleFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a solid capsule. public delegate void DrawSolidCapsuleFcn(B2Vec2 p1, B2Vec2 p2, float radius, B2HexColor color, object context) Parameters p1 B2Vec2 Draw a solid capsule. p2 B2Vec2 Draw a solid capsule. radius float Draw a solid capsule. color B2HexColor Draw a solid capsule. context object Draw a solid capsule."
  },
  "api/Box2D.NET.DrawSolidCircleFcn.html": {
    "href": "api/Box2D.NET.DrawSolidCircleFcn.html",
    "title": "Delegate DrawSolidCircleFcn | Box2D API",
    "keywords": "Delegate DrawSolidCircleFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a solid circle. public delegate void DrawSolidCircleFcn(ref B2Transform transform, float radius, B2HexColor color, object context) Parameters transform B2Transform Draw a solid circle. radius float Draw a solid circle. color B2HexColor Draw a solid circle. context object Draw a solid circle."
  },
  "api/Box2D.NET.DrawSolidPolygonFcn.html": {
    "href": "api/Box2D.NET.DrawSolidPolygonFcn.html",
    "title": "Delegate DrawSolidPolygonFcn | Box2D API",
    "keywords": "Delegate DrawSolidPolygonFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a solid closed polygon provided in CCW order. public delegate void DrawSolidPolygonFcn(ref B2Transform transform, ReadOnlySpan<B2Vec2> vertices, int vertexCount, float radius, B2HexColor color, object context) Parameters transform B2Transform Draw a solid closed polygon provided in CCW order. vertices ReadOnlySpan<B2Vec2> Draw a solid closed polygon provided in CCW order. vertexCount int Draw a solid closed polygon provided in CCW order. radius float Draw a solid closed polygon provided in CCW order. color B2HexColor Draw a solid closed polygon provided in CCW order. context object Draw a solid closed polygon provided in CCW order."
  },
  "api/Box2D.NET.DrawStringFcn.html": {
    "href": "api/Box2D.NET.DrawStringFcn.html",
    "title": "Delegate DrawStringFcn | Box2D API",
    "keywords": "Delegate DrawStringFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a string in world space public delegate void DrawStringFcn(B2Vec2 p, string s, B2HexColor color, object context) Parameters p B2Vec2 Draw a string in world space s string Draw a string in world space color B2HexColor Draw a string in world space context object Draw a string in world space"
  },
  "api/Box2D.NET.DrawTransformFcn.html": {
    "href": "api/Box2D.NET.DrawTransformFcn.html",
    "title": "Delegate DrawTransformFcn | Box2D API",
    "keywords": "Delegate DrawTransformFcn Namespace Box2D.NET Assembly Box2D.NET.dll Draw a transform. Choose your own length scale. public delegate void DrawTransformFcn(B2Transform transform, object context) Parameters transform B2Transform Draw a transform. Choose your own length scale. context object Draw a transform. Choose your own length scale."
  },
  "api/Box2D.NET.IB2ArenaAllocatable.html": {
    "href": "api/Box2D.NET.IB2ArenaAllocatable.html",
    "title": "Interface IB2ArenaAllocatable | Box2D API",
    "keywords": "Interface IB2ArenaAllocatable Namespace Box2D.NET Assembly Box2D.NET.dll public interface IB2ArenaAllocatable Properties allocation int allocation { get; } Property Value int capacity int capacity { get; } Property Value int index int index { get; } Property Value int maxAllocation int maxAllocation { get; } Property Value int Methods Destroy() void Destroy() Grow() int Grow() Returns int"
  },
  "api/Box2D.NET.b2AllocFcn.html": {
    "href": "api/Box2D.NET.b2AllocFcn.html",
    "title": "Delegate b2AllocFcn | Box2D API",
    "keywords": "Delegate b2AllocFcn Namespace Box2D.NET Assembly Box2D.NET.dll Prototype for user allocation function @param size the allocation size in bytes @param alignment the required alignment, guaranteed to be a power of 2 public delegate byte[] b2AllocFcn(uint size, int alignment) Parameters size uint Prototype for user allocation function size the allocation size in bytes alignment the required alignment, guaranteed to be a power of 2 alignment int Prototype for user allocation function size the allocation size in bytes alignment the required alignment, guaranteed to be a power of 2 Returns byte[] Prototype for user allocation function size the allocation size in bytes alignment the required alignment, guaranteed to be a power of 2"
  },
  "api/Box2D.NET.b2AssertFcn.html": {
    "href": "api/Box2D.NET.b2AssertFcn.html",
    "title": "Delegate b2AssertFcn | Box2D API",
    "keywords": "Delegate b2AssertFcn Namespace Box2D.NET Assembly Box2D.NET.dll Prototype for the user assert callback. Return 0 to skip the debugger break. public delegate int b2AssertFcn(string condition, string fileName, int lineNumber) Parameters condition string Prototype for the user assert callback. Return 0 to skip the debugger break. fileName string Prototype for the user assert callback. Return 0 to skip the debugger break. lineNumber int Prototype for the user assert callback. Return 0 to skip the debugger break. Returns int Prototype for the user assert callback. Return 0 to skip the debugger break."
  },
  "api/Box2D.NET.b2CastResultFcn.html": {
    "href": "api/Box2D.NET.b2CastResultFcn.html",
    "title": "Delegate b2CastResultFcn | Box2D API",
    "keywords": "Delegate b2CastResultFcn Namespace Box2D.NET Assembly Box2D.NET.dll Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. @param shapeId the shape hit by the ray @param point the point of initial intersection @param normal the normal vector at the point of intersection, zero for a shape cast with initial overlap @param fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap @param context the user context @return -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue @see b2World_CastRay @ingroup world public delegate float b2CastResultFcn(B2ShapeId shapeId, B2Vec2 point, B2Vec2 normal, float fraction, object context) Parameters shapeId B2ShapeId Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. shapeId the shape hit by the ray point the point of initial intersection normal the normal vector at the point of intersection, zero for a shape cast with initial overlap fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap context the user context -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue b2World_CastRay world point B2Vec2 Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. shapeId the shape hit by the ray point the point of initial intersection normal the normal vector at the point of intersection, zero for a shape cast with initial overlap fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap context the user context -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue b2World_CastRay world normal B2Vec2 Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. shapeId the shape hit by the ray point the point of initial intersection normal the normal vector at the point of intersection, zero for a shape cast with initial overlap fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap context the user context -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue b2World_CastRay world fraction float Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. shapeId the shape hit by the ray point the point of initial intersection normal the normal vector at the point of intersection, zero for a shape cast with initial overlap fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap context the user context -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue b2World_CastRay world context object Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. shapeId the shape hit by the ray point the point of initial intersection normal the normal vector at the point of intersection, zero for a shape cast with initial overlap fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap context the user context -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue b2World_CastRay world Returns float Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. shapeId the shape hit by the ray point the point of initial intersection normal the normal vector at the point of intersection, zero for a shape cast with initial overlap fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap context the user context -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue b2World_CastRay world"
  },
  "api/Box2D.NET.b2CustomFilterFcn.html": {
    "href": "api/Box2D.NET.b2CustomFilterFcn.html",
    "title": "Delegate b2CustomFilterFcn | Box2D API",
    "keywords": "Delegate b2CustomFilterFcn Namespace Box2D.NET Assembly Box2D.NET.dll Prototype for a contact filter callback. This is called when a contact pair is considered for collision. This allows you to perform custom logic to prevent collision between shapes. This is only called if one of the two shapes has custom filtering enabled. Notes: this function must be thread-safe this is only called if one of the two shapes has enabled custom filtering this is called only for awake dynamic bodies Return false if you want to disable the collision @see b2ShapeDef @warning Do not attempt to modify the world inside this callback @ingroup world public delegate bool b2CustomFilterFcn(B2ShapeId shapeIdA, B2ShapeId shapeIdB, object context) Parameters shapeIdA B2ShapeId Prototype for a contact filter callback. This is called when a contact pair is considered for collision. This allows you to perform custom logic to prevent collision between shapes. This is only called if one of the two shapes has custom filtering enabled. Notes: this function must be thread-safe this is only called if one of the two shapes has enabled custom filtering this is called only for awake dynamic bodies Return false if you want to disable the collision b2ShapeDef Do not attempt to modify the world inside this callback world shapeIdB B2ShapeId Prototype for a contact filter callback. This is called when a contact pair is considered for collision. This allows you to perform custom logic to prevent collision between shapes. This is only called if one of the two shapes has custom filtering enabled. Notes: this function must be thread-safe this is only called if one of the two shapes has enabled custom filtering this is called only for awake dynamic bodies Return false if you want to disable the collision b2ShapeDef Do not attempt to modify the world inside this callback world context object Prototype for a contact filter callback. This is called when a contact pair is considered for collision. This allows you to perform custom logic to prevent collision between shapes. This is only called if one of the two shapes has custom filtering enabled. Notes: this function must be thread-safe this is only called if one of the two shapes has enabled custom filtering this is called only for awake dynamic bodies Return false if you want to disable the collision b2ShapeDef Do not attempt to modify the world inside this callback world Returns bool Prototype for a contact filter callback. This is called when a contact pair is considered for collision. This allows you to perform custom logic to prevent collision between shapes. This is only called if one of the two shapes has custom filtering enabled. Notes: this function must be thread-safe this is only called if one of the two shapes has enabled custom filtering this is called only for awake dynamic bodies Return false if you want to disable the collision b2ShapeDef Do not attempt to modify the world inside this callback world"
  },
  "api/Box2D.NET.b2EnqueueTaskCallback.html": {
    "href": "api/Box2D.NET.b2EnqueueTaskCallback.html",
    "title": "Delegate b2EnqueueTaskCallback | Box2D API",
    "keywords": "Delegate b2EnqueueTaskCallback Namespace Box2D.NET Assembly Box2D.NET.dll public delegate object b2EnqueueTaskCallback(b2TaskCallback task, int itemCount, int minRange, object taskContext, object userContext) Parameters task b2TaskCallback itemCount int minRange int taskContext object userContext object Returns object"
  },
  "api/Box2D.NET.b2FilterJointDef.html": {
    "href": "api/Box2D.NET.b2FilterJointDef.html",
    "title": "Struct b2FilterJointDef | Box2D API",
    "keywords": "Struct b2FilterJointDef Namespace Box2D.NET Assembly Box2D.NET.dll A filter joint is used to disable collision between two specific bodies. @ingroup filter_joint public struct b2FilterJointDef Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bodyIdA The first attached body. public B2BodyId bodyIdA Field Value B2BodyId bodyIdB The second attached body. public B2BodyId bodyIdB Field Value B2BodyId internalValue Used internally to detect a valid definition. DO NOT SET. public int internalValue Field Value int userData User data pointer public object userData Field Value object"
  },
  "api/Box2D.NET.b2FinishTaskCallback.html": {
    "href": "api/Box2D.NET.b2FinishTaskCallback.html",
    "title": "Delegate b2FinishTaskCallback | Box2D API",
    "keywords": "Delegate b2FinishTaskCallback Namespace Box2D.NET Assembly Box2D.NET.dll Finishes a user task object that wraps a Box2D task. @ingroup world public delegate void b2FinishTaskCallback(object userTask, object userContext) Parameters userTask object Finishes a user task object that wraps a Box2D task. world userContext object Finishes a user task object that wraps a Box2D task. world"
  },
  "api/Box2D.NET.b2FreeFcn.html": {
    "href": "api/Box2D.NET.b2FreeFcn.html",
    "title": "Delegate b2FreeFcn | Box2D API",
    "keywords": "Delegate b2FreeFcn Namespace Box2D.NET Assembly Box2D.NET.dll Prototype for user free function @param mem the memory previously allocated through b2AllocFcn public delegate void b2FreeFcn(byte[] mem) Parameters mem byte[] Prototype for user free function mem the memory previously allocated through b2AllocFcn"
  },
  "api/Box2D.NET.b2FrictionCallback.html": {
    "href": "api/Box2D.NET.b2FrictionCallback.html",
    "title": "Delegate b2FrictionCallback | Box2D API",
    "keywords": "Delegate b2FrictionCallback Namespace Box2D.NET Assembly Box2D.NET.dll Optional friction mixing callback. This intentionally provides no context objects because this is called from a worker thread. @warning This function should not attempt to modify Box2D state or user application state. @ingroup world public delegate float b2FrictionCallback(float frictionA, int userMaterialIdA, float frictionB, int userMaterialIdB) Parameters frictionA float Optional friction mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world userMaterialIdA int Optional friction mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world frictionB float Optional friction mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world userMaterialIdB int Optional friction mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world Returns float Optional friction mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world"
  },
  "api/Box2D.NET.b2ManifoldFcn.html": {
    "href": "api/Box2D.NET.b2ManifoldFcn.html",
    "title": "Delegate b2ManifoldFcn | Box2D API",
    "keywords": "Delegate b2ManifoldFcn Namespace Box2D.NET Assembly Box2D.NET.dll Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results. public delegate B2Manifold b2ManifoldFcn(B2Shape shapeA, B2Transform xfA, B2Shape shapeB, B2Transform xfB, ref B2SimplexCache cache) Parameters shapeA B2Shape Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results. xfA B2Transform Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results. shapeB B2Shape Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results. xfB B2Transform Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results. cache B2SimplexCache Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results. Returns B2Manifold Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results."
  },
  "api/Box2D.NET.b2OverlapResultFcn.html": {
    "href": "api/Box2D.NET.b2OverlapResultFcn.html",
    "title": "Delegate b2OverlapResultFcn | Box2D API",
    "keywords": "Delegate b2OverlapResultFcn Namespace Box2D.NET Assembly Box2D.NET.dll Prototype callback for overlap queries. Called for each shape found in the query. @see b2World_OverlapABB @return false to terminate the query. @ingroup world public delegate bool b2OverlapResultFcn(B2ShapeId shapeId, object context) Parameters shapeId B2ShapeId Prototype callback for overlap queries. Called for each shape found in the query. b2World_OverlapABB false to terminate the query. world context object Prototype callback for overlap queries. Called for each shape found in the query. b2World_OverlapABB false to terminate the query. world Returns bool Prototype callback for overlap queries. Called for each shape found in the query. b2World_OverlapABB false to terminate the query. world"
  },
  "api/Box2D.NET.b2PlaneResultFcn.html": {
    "href": "api/Box2D.NET.b2PlaneResultFcn.html",
    "title": "Delegate b2PlaneResultFcn | Box2D API",
    "keywords": "Delegate b2PlaneResultFcn Namespace Box2D.NET Assembly Box2D.NET.dll Used to collect collision planes for character movers. Return true to continue gathering planes. public delegate bool b2PlaneResultFcn(B2ShapeId shapeId, ref B2PlaneResult plane, object context) Parameters shapeId B2ShapeId Used to collect collision planes for character movers. Return true to continue gathering planes. plane B2PlaneResult Used to collect collision planes for character movers. Return true to continue gathering planes. context object Used to collect collision planes for character movers. Return true to continue gathering planes. Returns bool Used to collect collision planes for character movers. Return true to continue gathering planes."
  },
  "api/Box2D.NET.b2PreSolveFcn.html": {
    "href": "api/Box2D.NET.b2PreSolveFcn.html",
    "title": "Delegate b2PreSolveFcn | Box2D API",
    "keywords": "Delegate b2PreSolveFcn Namespace Box2D.NET Assembly Box2D.NET.dll Prototype for a pre-solve callback. This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. modify the normal). Notes: this function must be thread-safe this is only called if the shape has enabled pre-solve events this is called only for awake dynamic bodies this is not called for sensors the supplied manifold has impulse values from the previous step Return false if you want to disable the contact this step @warning Do not attempt to modify the world inside this callback @ingroup world public delegate bool b2PreSolveFcn(B2ShapeId shapeIdA, B2ShapeId shapeIdB, ref B2Manifold manifold, object context) Parameters shapeIdA B2ShapeId Prototype for a pre-solve callback. This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. modify the normal). Notes: this function must be thread-safe this is only called if the shape has enabled pre-solve events this is called only for awake dynamic bodies this is not called for sensors the supplied manifold has impulse values from the previous step Return false if you want to disable the contact this step Do not attempt to modify the world inside this callback world shapeIdB B2ShapeId Prototype for a pre-solve callback. This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. modify the normal). Notes: this function must be thread-safe this is only called if the shape has enabled pre-solve events this is called only for awake dynamic bodies this is not called for sensors the supplied manifold has impulse values from the previous step Return false if you want to disable the contact this step Do not attempt to modify the world inside this callback world manifold B2Manifold Prototype for a pre-solve callback. This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. modify the normal). Notes: this function must be thread-safe this is only called if the shape has enabled pre-solve events this is called only for awake dynamic bodies this is not called for sensors the supplied manifold has impulse values from the previous step Return false if you want to disable the contact this step Do not attempt to modify the world inside this callback world context object Prototype for a pre-solve callback. This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. modify the normal). Notes: this function must be thread-safe this is only called if the shape has enabled pre-solve events this is called only for awake dynamic bodies this is not called for sensors the supplied manifold has impulse values from the previous step Return false if you want to disable the contact this step Do not attempt to modify the world inside this callback world Returns bool Prototype for a pre-solve callback. This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. modify the normal). Notes: this function must be thread-safe this is only called if the shape has enabled pre-solve events this is called only for awake dynamic bodies this is not called for sensors the supplied manifold has impulse values from the previous step Return false if you want to disable the contact this step Do not attempt to modify the world inside this callback world"
  },
  "api/Box2D.NET.b2RestitutionCallback.html": {
    "href": "api/Box2D.NET.b2RestitutionCallback.html",
    "title": "Delegate b2RestitutionCallback | Box2D API",
    "keywords": "Delegate b2RestitutionCallback Namespace Box2D.NET Assembly Box2D.NET.dll Optional restitution mixing callback. This intentionally provides no context objects because this is called from a worker thread. @warning This function should not attempt to modify Box2D state or user application state. @ingroup world public delegate float b2RestitutionCallback(float restitutionA, int userMaterialIdA, float restitutionB, int userMaterialIdB) Parameters restitutionA float Optional restitution mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world userMaterialIdA int Optional restitution mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world restitutionB float Optional restitution mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world userMaterialIdB int Optional restitution mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world Returns float Optional restitution mixing callback. This intentionally provides no context objects because this is called from a worker thread. This function should not attempt to modify Box2D state or user application state. world"
  },
  "api/Box2D.NET.b2TaskCallback.html": {
    "href": "api/Box2D.NET.b2TaskCallback.html",
    "title": "Delegate b2TaskCallback | Box2D API",
    "keywords": "Delegate b2TaskCallback Namespace Box2D.NET Assembly Box2D.NET.dll public delegate void b2TaskCallback(int startIndex, int endIndex, uint workerIndex, object taskContext) Parameters startIndex int endIndex int workerIndex uint taskContext object"
  },
  "api/Box2D.NET.b2TreeQueryCallbackFcn-1.html": {
    "href": "api/Box2D.NET.b2TreeQueryCallbackFcn-1.html",
    "title": "Delegate b2TreeQueryCallbackFcn<T> | Box2D API",
    "keywords": "Delegate b2TreeQueryCallbackFcn<T> Namespace Box2D.NET Assembly Box2D.NET.dll This function receives proxies found in the AABB query. @return true if the query should continue public delegate bool b2TreeQueryCallbackFcn<T>(int proxyId, ulong userData, ref T context) Parameters proxyId int This function receives proxies found in the AABB query. true if the query should continue userData ulong This function receives proxies found in the AABB query. true if the query should continue context T This function receives proxies found in the AABB query. true if the query should continue Returns bool This function receives proxies found in the AABB query. true if the query should continue Type Parameters T"
  },
  "api/Box2D.NET.b2TreeRayCastCallbackFcn-1.html": {
    "href": "api/Box2D.NET.b2TreeRayCastCallbackFcn-1.html",
    "title": "Delegate b2TreeRayCastCallbackFcn<T> | Box2D API",
    "keywords": "Delegate b2TreeRayCastCallbackFcn<T> Namespace Box2D.NET Assembly Box2D.NET.dll This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping public delegate float b2TreeRayCastCallbackFcn<T>(ref B2RayCastInput input, int proxyId, ulong userData, ref T context) where T : struct Parameters input B2RayCastInput This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping proxyId int This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping userData ulong This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping context T This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping Returns float This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping Type Parameters T"
  },
  "api/Box2D.NET.b2TreeShapeCastCallbackFcn-1.html": {
    "href": "api/Box2D.NET.b2TreeShapeCastCallbackFcn-1.html",
    "title": "Delegate b2TreeShapeCastCallbackFcn<T> | Box2D API",
    "keywords": "Delegate b2TreeShapeCastCallbackFcn<T> Namespace Box2D.NET Assembly Box2D.NET.dll This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping public delegate float b2TreeShapeCastCallbackFcn<T>(ref B2ShapeCastInput input, int proxyId, ulong userData, ref T context) where T : struct Parameters input B2ShapeCastInput This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping proxyId int This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping userData ulong This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping context T This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping Returns float This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping Type Parameters T"
  },
  "api/Box2D.NET.html": {
    "href": "api/Box2D.NET.html",
    "title": "Namespace Box2D.NET | Box2D API",
    "keywords": "Namespace Box2D.NET Classes B2AABBs B2ArenaAllocator B2ArenaAllocatorTyped<T> This is a stack-like arena allocator used for fast per step allocations. You must nest allocate/free pairs. The code will Debug.Assert if you try to interleave multiple allocate/free pairs. This allocator uses the heap if space is insufficient. I could remove the need to free entries individually. B2ArenaAllocators B2Arrays todo_erin consider code-gen: https://github.com/IbrahimHindawi/haikal B2Atomics B2BitSets B2BoardPhases B2Bodies B2Body Body organizational details that are not used in the solver. B2BodySim Body simulation data used for integration of position and velocity Transform data used for collision and solver preparation. B2BodyState 32 bytes B2BroadPhase The broad-phase is used for computing pairs and performing volume queries and ray casts. This broad-phase does not persist pairs. Instead, this reports potentially new pairs. It is up to the client to consume the new pairs and to track subsequent overlap. B2Buffers B2CTZs B2ChainShape B2Collisions B2Constants B2ConstraintGraphs B2Contact Cold contact data. Used as a persistent handle and for persistent island connectivity. B2ContactSim The class manages contact between two shapes. A contact exists for each overlapping AABB in the broad-phase (except if filtered). Therefore a contact object may exist that has no contact points. B2ContactSolvers B2Contacts B2Cores B2DebugDraw This struct holds callbacks you can implement to draw a Box2D world. This structure should be zero initialized. @ingroup world B2Diagnostics B2DistanceJoints B2Distances B2DynamicTree The dynamic tree structure. This should be considered private data. It is placed here for performance reasons. B2DynamicTrees B2Geometries B2Hulls B2IdPool B2IdPools B2Ids B2Island Persistent island for awake bodies, joints, and contacts https://en.wikipedia.org/wiki/Component_(graph_theory) https://en.wikipedia.org/wiki/Dynamic_connectivity map from int to solver set and index B2IslandSim This is used to move islands across solver sets B2Islands Collide all awake contacts Use bit array to emit start/stop touching events in defined order, per thread. Try using contact index, assuming contacts are created in a deterministic order. bit-wise OR together bit arrays and issue changes: start touching: merge islands - temporary linked list - mark root island dirty - wake all - largest island is root stop touching: increment constraintRemoveCount B2Joint Map from b2JointId to b2Joint in the solver sets B2JointSim The @base joint class. Joints are used to constraint two bodies together in various fashions. Some joints also feature limits and motors. B2Joints B2Manifolds B2MathFunction B2MotorJoints B2MouseJoints B2MovePair B2MoveResult B2Movers B2PrismaticJoints B2Profiling B2RayResult Result from b2World_RayCastClosest If there is initial overlap the fraction and normal will be zero while the point is an arbitrary point in the overlap region. @ingroup world B2RevoluteJoints B2RuntimeValidator B2Sensor B2SensorTaskContext B2Sensors B2Shape B2ShapeRefComparer B2Shapes B2SolverBlock Each block of work has a sync index that gets incremented when a worker claims the block. This ensures only a single worker claims a block, yet lets work be distributed dynamically across multiple workers (work stealing). This also reduces contention on a single block index atomic. For non-iterative stages the sync index is simply set to one. For iterative stages (solver iteration) the same block of work is executed once per iteration and the atomic sync index is shared across iterations, so it increases monotonically. B2SolverSet This holds solver set data. The following sets are used: static set for all static bodies (no contacts or joints) active set for all active bodies with body states (no contacts or joints) disabled set for disabled bodies and their joints all further sets are sleeping island sets along with their contacts and joints The purpose of solver sets is to achieve high memory locality. https://www.youtube.com/watch?v=nZNd5FjSquk B2SolverSets B2SolverStage Each stage must be completed before going to the next stage. Non-iterative stages use a stage instance once while iterative stages re-use the same instance each iteration. B2Solvers B2StepContext Context for a time step. Recreated each time step. B2Tables B2TaskContext Per thread task storage B2Timers B2Types B2WeldJoints B2WheelJoints B2WorkerContext B2World The world struct manages all physics entities, dynamic simulation, and asynchronous queries. The world also contains efficient memory management facilities. B2Worlds Structs B2AABB Axis-aligned bounding box B2ArenaEntry<T> B2Array<T> Array declaration that doesn't need the type T to be defined B2AtomicInt B2AtomicU32 B2BitSet Bit set provides fast operations on large arrays of bits. B2BodyDef A body definition holds all the data needed to construct a rigid body. You can safely re-use body definitions. Shapes are added to a body after construction. Body definitions are temporary objects used to bundle creation parameters. Must be initialized using b2DefaultBodyDef(). @ingroup body B2BodyEvents Body events are buffered in the Box2D world and are available as event arrays after the time step is complete. Note: this data becomes invalid if bodies are destroyed B2BodyId Body id references a body instance. This should be treated as an opaque handle. B2BodyMoveEvent Body move events triggered when a body moves. Triggered when a body moves due to simulation. Not reported for bodies moved by the user. This also has a flag to indicate that the body went to sleep so the application can also sleep that actor/entity/object associated with the body. On the other hand if the flag does not indicate the body went to sleep then the application can treat the actor/entity/object associated with the body as awake. This is an efficient way for an application to update game object transforms rather than calling functions such as b2Body_GetTransform() because this data is delivered as a contiguous array and it is only populated with bodies that have moved. @note If sleeping is disabled all dynamic and kinematic bodies will trigger move events. B2BodyStateW wide version of b2BodyState B2Capsule A solid capsule can be viewed as two semicircles connected by a rectangle. B2CastOutput Low level ray cast or shape-cast output data. Returns a zero fraction and normal in the case of initial overlap. B2ChainDef Used to create a chain of line segments. This is designed to eliminate ghost collisions with some limitations. chains are one-sided chains have no mass and should be used on static bodies chains have a counter-clockwise winding order (normal points right of segment direction) chains are either a loop or open a chain must have at least 4 points the distance between any two points must be greater than B2_LINEAR_SLOP a chain shape should not self intersect (this is not validated) an open chain shape has NO COLLISION on the first and final edge you may overlap two open chains on their first three and/or last three points to get smooth collision a chain shape creates multiple line segment shapes on the body https://en.wikipedia.org/wiki/Polygonal_chain Must be initialized using b2DefaultChainDef(). @warning Do not use chain shapes unless you understand the limitations. This is an advanced feature. @ingroup shape B2ChainId Chain id references a chain instances. This should be treated as an opaque handle. B2ChainSegment A line segment with one-sided collision. Only collides on the right side. Several of these are generated for a chain shape. ghost1 -> point1 -> point2 -> ghost2 B2ChainSegmentParams B2Circle A solid circle B2CollisionPlane These are collision planes that can be fed to b2SolvePlanes. Normally this is assembled by the user from plane results in b2PlaneResult B2ConstraintGraph B2ContactBeginTouchEvent A begin touch event is generated when two shapes begin touching. B2ContactConstraint B2ContactConstraintPoint B2ContactConstraintSIMD B2ContactData The contact data for two shapes. By convention the manifold normal points from shape A to shape B. @see b2Shape_GetContactData() and b2Body_GetContactData() B2ContactEdge B2ContactEndTouchEvent An end touch event is generated when two shapes stop touching. You will get an end event if you do anything that destroys contacts previous to the last world step. These include things like setting the transform, destroying a body or shape, or changing a filter or body type. B2ContactEvents Contact events are buffered in the Box2D world and are available as event arrays after the time step is complete. Note: these may become invalid if bodies and/or shapes are destroyed B2ContactHitEvent A hit touch event is generated when two shapes collide with a speed faster than the hit speed threshold. This may be reported for speculative contacts that have a confirmed impulse. B2ContactRegister B2ContinuousContext B2CosSin Cosine and sine pair This uses a custom implementation designed for cross-platform determinism B2Counters Counters that give details of the simulation size. B2DistanceInput Input for b2ShapeDistance B2DistanceJoint B2DistanceJointDef Distance joint definition This requires defining an anchor point on both bodies and the non-zero distance of the distance joint. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. This helps when saving and loading a game. @ingroup distance_joint B2DistanceOutput Output for b2ShapeDistance B2DrawContext B2ExplosionContext B2ExplosionDef The explosion definition is used to configure options for explosions. Explosions consider shape geometry when computing the impulse. @ingroup world B2Filter This is used to filter collision on shapes. It affects shape-vs-shape collision and shape-versus-query collision (such as b2World_CastRay). @ingroup shape B2FixedArray1024<T> B2FixedArray11<T> B2FixedArray12<T> B2FixedArray16<T> B2FixedArray1<T> B2FixedArray2<T> B2FixedArray3<T> B2FixedArray4<T> B2FixedArray64<T> B2FixedArray7<T> B2FixedArray8<T> B2FloatW B2GraphColor B2HashSet B2Hull A convex hull. Used to create convex polygons. @warning Do not modify these values directly, instead use b2ComputeHull() B2JointEdge A joint edge is used to connect bodies and joints together in a joint graph where each body is a node and each joint is an edge. A joint edge belongs to a doubly linked list maintained in each attached body. Each joint has two joint nodes, one for each attached body. B2JointId Joint id references a joint instance. This should be treated as an opaque handle. B2JointPair B2JointUnion B2Manifold A contact manifold describes the contact points between colliding shapes. @note Box2D uses speculative collision so some contact points may be separated. B2ManifoldPoint A manifold point is a contact point belonging to a contact manifold. It holds details related to the geometry and dynamics of the contact points. Box2D uses speculative collision so some contact points may be separated. You may use the totalNormalImpulse to determine if there was an interaction during the time step. B2MassData This holds the mass data computed for a shape. B2Mat22 A 2-by-2 Matrix B2MotorJoint B2MotorJointDef A motor joint is used to control the relative motion between two bodies A typical usage is to control the movement of a dynamic body with respect to the ground. @ingroup motor_joint B2MouseJoint B2MouseJointDef A mouse joint is used to make a point on a body track a specified world point. This a soft constraint and allows the constraint to stretch without applying huge forces. This also applies rotation constraint heuristic to improve control. @ingroup mouse_joint B2MoverContext B2Plane separation = dot(normal, point) - offset B2PlaneResult These are the collision planes returned from b2World_CollideMover B2PlaneSolverResult Result returned by b2SolvePlane B2Polygon A solid convex polygon. It is assumed that the interior of the polygon is to the left of each edge. Polygons have a maximum number of vertices equal to B2_MAX_POLYGON_VERTICES. In most cases you should not need many vertices for a convex polygon. @warning DO NOT fill this out manually, instead use a helper function like b2MakePolygon or b2MakeBox. B2PrismaticJoint B2PrismaticJointDef Prismatic joint definition This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. @ingroup prismatic_joint B2Profile Profiling data. Times are in milliseconds. B2QueryFilter The query filter is used to filter collisions between queries and shapes. For example, you may want a ray-cast representing a projectile to hit players and the static environment but not debris. @ingroup shape B2QueryPairContext B2RayCastInput Low level ray cast input data B2RebuildItem Temporary data used to track the rebuild of a tree node B2RevoluteJoint B2RevoluteJointDef Revolute joint definition This requires defining an anchor point where the bodies are joined. The definition uses local anchor points so that the initial configuration can violate the constraint slightly. You also need to specify the initial relative angle for joint limits. This helps when saving and loading a game. The local anchor points are measured from the body's origin rather than the center of mass because: you might not know where the center of mass will be if you add/remove shapes from a body and recompute the mass, the joints will be broken @ingroup revolute_joint B2Rot B2RotW Wide rotation B2Segment A line segment with two-sided collision. B2SegmentDistanceResult Result of computing the distance between two line segments B2SensorBeginTouchEvent A begin touch event is generated when a shape starts to overlap a sensor shape. B2SensorEndTouchEvent An end touch event is generated when a shape stops overlapping a sensor shape. These include things like setting the transform, destroying a body or shape, or changing a filter. You will also get an end event if the sensor or visitor are destroyed. Therefore you should always confirm the shape id is valid using b2Shape_IsValid. B2SensorEvents Sensor events are buffered in the Box2D world and are available as begin/end overlap event arrays after the time step is complete. Note: these may become invalid if bodies and/or shapes are destroyed B2SensorOverlaps Sensors are shapes that live in the broad-phase but never have contacts. At the end of the time step all sensors are queried for overlap with any other shapes. Sensors ignore body type and sleeping. Sensors generate events when there is a new overlap or and overlap disappears. The sensor overlaps don't get cleared until the next time step regardless of the overlapped shapes being destroyed. When a sensor is destroyed. B2SensorQueryContext B2SeparationFunction B2SetItem B2ShapeCastInput Low level shape cast input in generic form. This allows casting an arbitrary point cloud wrap with a radius. For example, a circle is a single point with a non-zero radius. A capsule is two points with a non-zero radius. A box is four points with a zero radius. B2ShapeCastPairInput Input parameters for b2ShapeCast B2ShapeDef Used to create a shape. This is a temporary object used to bundle shape creation parameters. You may use the same shape definition to create multiple shapes. Must be initialized using b2DefaultShapeDef(). @ingroup shape B2ShapeExtent B2ShapeId Shape id references a shape instance. This should be treated as an opaque handle. B2ShapeProxy A distance proxy is used by the GJK algorithm. It encapsulates any shape. You can provide between 1 and B2_MAX_POLYGON_VERTICES and a radius. B2ShapeRef B2ShapeUnion B2Simplex B2SimplexCache Used to warm start the GJK simplex. If you call this function multiple times with nearby transforms this might improve performance. Otherwise you can zero initialize this. The distance cache must be initialized to zero on the first call. Users should generally just zero initialize this structure for each call. B2SimplexVertex Simplex vertex for debugging the GJK algorithm B2Softness B2SurfaceMaterial Surface materials allow chain shapes to have per segment surface properties. @ingroup shape B2Sweep This describes the motion of a body/shape for TOI computation. Shapes are defined with respect to the body origin, which may not coincide with the center of mass. However, to support dynamics we must interpolate the center of mass position. B2TOIInput Input parameters for b2TimeOfImpact B2TOIOutput Output parameters for b2TimeOfImpact. B2Transform A 2D rigid transform B2TreeBin B2TreeNode todo externalize this to visualize internal nodes and speed up FindPairs A node in the dynamic tree. B2TreeNodeConnectionUnion B2TreeNodeDataUnion B2TreePlane B2TreeStats These are performance results returned by dynamic tree queries. B2Vec2 B2Vec2W Wide vec2 B2Version Version numbering scheme. See https://semver.org/ B2WeldJoint B2WeldJointDef Weld joint definition A weld joint connect to bodies together rigidly. This constraint provides springs to mimic soft-body simulation. @note The approximate solver in Box2D cannot hold many bodies together rigidly @ingroup weld_joint B2WheelJoint B2WheelJointDef Wheel joint definition This requires defining a line of motion using an axis and an anchor point. The definition uses local anchor points and a local axis so that the initial configuration can violate the constraint slightly. The joint translation is zero when the local anchor points coincide in world space. @ingroup wheel_joint B2WorldDef World definition used to create a simulation world. Must be initialized using b2DefaultWorldDef(). @ingroup world B2WorldId World id references a world instance. This should be treated as an opaque handle. B2WorldMoverCastContext B2WorldMoverContext B2WorldOverlapContext B2WorldQueryContext B2WorldRayCastContext b2FilterJointDef A filter joint is used to disable collision between two specific bodies. @ingroup filter_joint Interfaces IB2ArenaAllocatable Enums B2BodyType The body simulation type. Each body is one of these three types. The type determines how the body behaves in the simulation. @ingroup body B2ContactFlags A contact edge is used to connect bodies and contacts together in a contact graph where each body is a node and each contact is an edge. A contact edge belongs to a doubly linked list maintained in each attached body. Each contact has two contact edges, one for each attached body. B2ContactSimFlags Shifted to be distinct from b2ContactFlags B2HexColor These colors are used for debug draw and mostly match the named SVG colors. See https://www.rapidtables.com/web/color/index.html https://johndecember.com/html/spec/colorsvg.html https://upload.wikimedia.org/wikipedia/commons/2/2b/SVG_Recognized_color_keyword_names.svg B2JointType Joint type enumeration This is useful because all joint types use b2JointId and sometimes you want to get the type of a joint. @ingroup joint B2NormalType B2RotateType B2SeparationType B2SetType B2ShapeType Shape type @ingroup shape B2SolverBlockType B2SolverStageType B2TOIState Describes the TOI output B2TracyCZone B2TreeNodeFlags Delegates DrawCircleFcn Draw a circle. DrawPointFcn Draw a point. DrawPolygonFcn DrawSegmentFcn Draw a line segment. DrawSolidCapsuleFcn Draw a solid capsule. DrawSolidCircleFcn Draw a solid circle. DrawSolidPolygonFcn Draw a solid closed polygon provided in CCW order. DrawStringFcn Draw a string in world space DrawTransformFcn Draw a transform. Choose your own length scale. b2AllocFcn Prototype for user allocation function @param size the allocation size in bytes @param alignment the required alignment, guaranteed to be a power of 2 b2AssertFcn Prototype for the user assert callback. Return 0 to skip the debugger break. b2CastResultFcn Prototype callback for ray and shape casts. Called for each shape found in the query. You control how the ray cast proceeds by returning a float: return -1: ignore this shape and continue return 0: terminate the ray cast return fraction: clip the ray to this point return 1: don't clip the ray and continue A cast with initial overlap will return a zero fraction and a zero normal. @param shapeId the shape hit by the ray @param point the point of initial intersection @param normal the normal vector at the point of intersection, zero for a shape cast with initial overlap @param fraction the fraction along the ray at the point of intersection, zero for a shape cast with initial overlap @param context the user context @return -1 to filter, 0 to terminate, fraction to clip the ray for closest hit, 1 to continue @see b2World_CastRay @ingroup world b2CustomFilterFcn Prototype for a contact filter callback. This is called when a contact pair is considered for collision. This allows you to perform custom logic to prevent collision between shapes. This is only called if one of the two shapes has custom filtering enabled. Notes: this function must be thread-safe this is only called if one of the two shapes has enabled custom filtering this is called only for awake dynamic bodies Return false if you want to disable the collision @see b2ShapeDef @warning Do not attempt to modify the world inside this callback @ingroup world b2EnqueueTaskCallback b2FinishTaskCallback Finishes a user task object that wraps a Box2D task. @ingroup world b2FreeFcn Prototype for user free function @param mem the memory previously allocated through b2AllocFcn b2FrictionCallback Optional friction mixing callback. This intentionally provides no context objects because this is called from a worker thread. @warning This function should not attempt to modify Box2D state or user application state. @ingroup world b2ManifoldFcn Third: The user may call the manifold functions directly and they should be easy to use and have easy to use results. b2OverlapResultFcn Prototype callback for overlap queries. Called for each shape found in the query. @see b2World_OverlapABB @return false to terminate the query. @ingroup world b2PlaneResultFcn Used to collect collision planes for character movers. Return true to continue gathering planes. b2PreSolveFcn Prototype for a pre-solve callback. This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. modify the normal). Notes: this function must be thread-safe this is only called if the shape has enabled pre-solve events this is called only for awake dynamic bodies this is not called for sensors the supplied manifold has impulse values from the previous step Return false if you want to disable the contact this step @warning Do not attempt to modify the world inside this callback @ingroup world b2RestitutionCallback Optional restitution mixing callback. This intentionally provides no context objects because this is called from a worker thread. @warning This function should not attempt to modify Box2D state or user application state. @ingroup world b2TaskCallback b2TreeQueryCallbackFcn<T> This function receives proxies found in the AABB query. @return true if the query should continue b2TreeRayCastCallbackFcn<T> This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping b2TreeShapeCastCallbackFcn<T> This function receives clipped ray cast input for a proxy. The function returns the new ray fraction. return a value of 0 to terminate the ray cast return a value less than input->maxFraction to clip the ray return a value of input->maxFraction to continue the ray cast without clipping"
  },
  "docs/index.html": {
    "href": "docs/index.html",
    "title": "Box2D.NET Docs | Box2D Docs",
    "keywords": "Box2D.NET Docs"
  },
  "index.html": {
    "href": "index.html",
    "title": "Box2D.NET | Box2D Docs",
    "keywords": "Box2D.NET Box2D.NET is a C# port of the Box2D physics engine. If you'd like to support the project, we'd appreciate starring(⭐) our repos on Github for more visibility. ✨ Features \uD83C\uDF3F Purity - Fully implemented in pure C#. \uD83D\uDCBB Compatibility - Ensuring seamless integration with the .NET platform and Unity3D. \uD83C\uDF0D Cross-Platform Support - Easily integrates with all major platforms, including Linux, Windows, macOS Box2D.NET is divided into multiple modules, each contained in its own folder: Box2D.NET : A C# port of the Box2D physics engine for 2D physics simulations. Box2D.NET.Shared : Shared code and utilities for Box2D.NET, for use in sample projects and by library users. Box2D.NET.Samples : Sample projects to showcase the features of Box2D.NET Box2D.NET.Test : Unit tests for Box2D.NET. \uD83D\uDE80 Getting Started To verify the run for all modules, run Box2D.NET.Samples on the Windows platform, you need to install the redistributable package Microsoft Visual C++ Redistributable Package ▶️ Running With Command Prompt dotnet run --project src/Box2D.NET.Samples --framework net9.0 -c Release \uD83D\uDEE0️ Integration There are a few ways to integrate Box2D.NET into your project. Source integration is the most popular and most flexible. Additionally, NuGet installation will also be supported in the future. \uD83D\uDCDA Documentation & Links Box2D.NET Links Box2D.NET/issues Original Box2D Links box2d.org box2d/issues box2d.org/documentation You can use the original Box2D documentation as a reference, since the Box2D.NET API closely mirrors the original implementation. If you are new to Box2D, we recommend starting with the original documentation to learn the basics and core concepts. Key Naming Conventions: Properties and methods: Start with lowercase (matches original Box2D) Classes and structs: Start with Uppercase (differs from original Box2D)"
  }
}